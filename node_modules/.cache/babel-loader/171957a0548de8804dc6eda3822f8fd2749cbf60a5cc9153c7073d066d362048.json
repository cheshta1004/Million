{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chesh\\\\OneDrive\\\\Desktop\\\\Million\\\\src\\\\Components\\\\Calender.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [expandedDates, setExpandedDates] = useState({});\n  const getDaysInMonth = (year, month) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n  const getFirstDayOfMonth = (year, month) => {\n    return new Date(year, month, 1).getDay();\n  };\n  const handleExpandClick = day => {\n    setExpandedDates(prev => ({\n      ...prev,\n      [day]: !prev[day]\n    }));\n  };\n  const generateCalendar = () => {\n    const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n    const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\n    let calendar = [];\n\n    // Adding empty cells for the days before the first day of the month\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      calendar.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-day empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this));\n    }\n\n    // Adding cells for each day of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      calendar.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-day\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleExpandClick(day),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), expandedDates[day] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"extra-row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 34\n        }, this)]\n      }, `day-${day}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this));\n    }\n    return calendar;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentDate(prevMonth(currentDate)),\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [getMonthName(currentDate.getMonth()), \" \", currentDate.getFullYear()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentDate(nextMonth(currentDate)),\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: generateCalendar()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper functions to navigate months\n_s(Calendar, \"7siAW7QLEoHtQNpnWe3fxm5rpCg=\");\n_c = Calendar;\nconst prevMonth = date => new Date(date.getFullYear(), date.getMonth() - 1, 1);\nconst nextMonth = date => new Date(date.getFullYear(), date.getMonth() + 1, 1);\nconst getMonthName = month => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[month];\n};\nexport default Calendar;\n\n// import React, { useState } from 'react';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n\n//   const getDaysInMonth = (year, month) => {\n//     return new Date(year, month + 1, 0).getDate();\n//   };\n\n//   const getFirstDayOfMonth = (year, month) => {\n//     return new Date(year, month, 1).getDay();\n//   };\n\n//   const generateCalendar = () => {\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n//     const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\n\n//     let calendar = [];\n\n//     // Adding empty cells for the days before the first day of the month\n//     for (let i = 0; i < firstDayOfMonth; i++) {\n//       calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\n//     }\n\n//     // Adding cells for each day of the month\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       calendar.push(\n//         <div key={`day-${day}`} className=\"calendar-day\">\n//           <span>{day}</span>\n//         </div>\n//       );\n//     }\n\n//     return calendar;\n//   };\n\n//   return (\n//     <div className=\"calendar\">\n//       <div className=\"calendar-header\">\n//         <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\n//         <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\n//         <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\n//       </div>\n//       <div className=\"calendar-grid\">\n//         {generateCalendar()}\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Helper functions to navigate months\n// const prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\n// const nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\n// const getMonthName = (month) => {\n//   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n//   return months[month];\n// };\n\n// export default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","expandedDates","setExpandedDates","getDaysInMonth","year","month","getDate","getFirstDayOfMonth","getDay","handleExpandClick","day","prev","generateCalendar","daysInMonth","getFullYear","getMonth","firstDayOfMonth","calendar","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","children","onClick","prevMonth","getMonthName","nextMonth","_c","date","months","$RefreshReg$"],"sources":["C:/Users/chesh/OneDrive/Desktop/Million/src/Components/Calender.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Calendar = () => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [expandedDates, setExpandedDates] = useState({});\r\n\r\n  const getDaysInMonth = (year, month) => {\r\n    return new Date(year, month + 1, 0).getDate();\r\n  };\r\n\r\n  const getFirstDayOfMonth = (year, month) => {\r\n    return new Date(year, month, 1).getDay();\r\n  };\r\n\r\n  const handleExpandClick = (day) => {\r\n    setExpandedDates((prev) => ({\r\n      ...prev,\r\n      [day]: !prev[day],\r\n    }));\r\n  };\r\n\r\n  const generateCalendar = () => {\r\n    const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n    const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n\r\n    let calendar = [];\r\n\r\n    // Adding empty cells for the days before the first day of the month\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n      calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\r\n    }\r\n\r\n    // Adding cells for each day of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      calendar.push(\r\n        <div key={`day-${day}`} className=\"calendar-day\">\r\n          <span>{day}</span>\r\n          <button onClick={() => handleExpandClick(day)}>+</button>\r\n          {expandedDates[day] && <div className=\"extra-row\"></div>}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return calendar;\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <div className=\"calendar-header\">\r\n        <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\r\n        <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\r\n        <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\r\n      </div>\r\n      <div className=\"calendar-grid\">\r\n        {generateCalendar()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper functions to navigate months\r\nconst prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\r\nconst nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\nconst getMonthName = (month) => {\r\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  return months[month];\r\n};\r\n\r\nexport default Calendar;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const Calendar = () => {\r\n//   const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n//   const getDaysInMonth = (year, month) => {\r\n//     return new Date(year, month + 1, 0).getDate();\r\n//   };\r\n\r\n//   const getFirstDayOfMonth = (year, month) => {\r\n//     return new Date(year, month, 1).getDay();\r\n//   };\r\n\r\n//   const generateCalendar = () => {\r\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n//     const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n\r\n//     let calendar = [];\r\n\r\n//     // Adding empty cells for the days before the first day of the month\r\n//     for (let i = 0; i < firstDayOfMonth; i++) {\r\n//       calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\r\n//     }\r\n\r\n//     // Adding cells for each day of the month\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       calendar.push(\r\n//         <div key={`day-${day}`} className=\"calendar-day\">\r\n//           <span>{day}</span>\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return calendar;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calendar\">\r\n//       <div className=\"calendar-header\">\r\n//         <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\r\n//         <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\r\n//         <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\r\n//       </div>\r\n//       <div className=\"calendar-grid\">\r\n//         {generateCalendar()}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Helper functions to navigate months\r\n// const prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\r\n// const nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n// const getMonthName = (month) => {\r\n//   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n//   return months[month];\r\n// };\r\n\r\n// export default Calendar;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,IAAIO,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtD,MAAMU,cAAc,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;IACtC,OAAO,IAAIL,IAAI,CAACI,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACH,IAAI,EAAEC,KAAK,KAAK;IAC1C,OAAO,IAAIL,IAAI,CAACI,IAAI,EAAEC,KAAK,EAAE,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC;EAC1C,CAAC;EAED,MAAMC,iBAAiB,GAAIC,GAAG,IAAK;IACjCR,gBAAgB,CAAES,IAAI,KAAM;MAC1B,GAAGA,IAAI;MACP,CAACD,GAAG,GAAG,CAACC,IAAI,CAACD,GAAG;IAClB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,WAAW,GAAGV,cAAc,CAACL,WAAW,CAACgB,WAAW,CAAC,CAAC,EAAEhB,WAAW,CAACiB,QAAQ,CAAC,CAAC,CAAC;IACrF,MAAMC,eAAe,GAAGT,kBAAkB,CAACT,WAAW,CAACgB,WAAW,CAAC,CAAC,EAAEhB,WAAW,CAACiB,QAAQ,CAAC,CAAC,CAAC;IAE7F,IAAIE,QAAQ,GAAG,EAAE;;IAEjB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,eAAe,EAAEE,CAAC,EAAE,EAAE;MACxCD,QAAQ,CAACE,IAAI,eAACxB,OAAA;QAAwByB,SAAS,EAAC;MAAoB,GAA3C,SAAQF,CAAE,EAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsC,CAAC,CAAC;IAC9E;;IAEA;IACA,KAAK,IAAId,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAIG,WAAW,EAAEH,GAAG,EAAE,EAAE;MAC3CO,QAAQ,CAACE,IAAI,eACXxB,OAAA;QAAwByB,SAAS,EAAC,cAAc;QAAAK,QAAA,gBAC9C9B,OAAA;UAAA8B,QAAA,EAAOf;QAAG;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClB7B,OAAA;UAAQ+B,OAAO,EAAEA,CAAA,KAAMjB,iBAAiB,CAACC,GAAG,CAAE;UAAAe,QAAA,EAAC;QAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxDvB,aAAa,CAACS,GAAG,CAAC,iBAAIf,OAAA;UAAKyB,SAAS,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAH/C,OAAMd,GAAI,EAAC;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIjB,CACP,CAAC;IACH;IAEA,OAAOP,QAAQ;EACjB,CAAC;EAED,oBACEtB,OAAA;IAAKyB,SAAS,EAAC,UAAU;IAAAK,QAAA,gBACvB9B,OAAA;MAAKyB,SAAS,EAAC,iBAAiB;MAAAK,QAAA,gBAC9B9B,OAAA;QAAQ+B,OAAO,EAAEA,CAAA,KAAM3B,cAAc,CAAC4B,SAAS,CAAC7B,WAAW,CAAC,CAAE;QAAA2B,QAAA,EAAC;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5E7B,OAAA;QAAA8B,QAAA,GAAOG,YAAY,CAAC9B,WAAW,CAACiB,QAAQ,CAAC,CAAC,CAAC,EAAC,GAAC,EAACjB,WAAW,CAACgB,WAAW,CAAC,CAAC;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC/E7B,OAAA;QAAQ+B,OAAO,EAAEA,CAAA,KAAM3B,cAAc,CAAC8B,SAAS,CAAC/B,WAAW,CAAC,CAAE;QAAA2B,QAAA,EAAC;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,eACN7B,OAAA;MAAKyB,SAAS,EAAC,eAAe;MAAAK,QAAA,EAC3Bb,gBAAgB,CAAC;IAAC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAA3B,EAAA,CA1DMD,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AA2Dd,MAAM+B,SAAS,GAAII,IAAI,IAAK,IAAI/B,IAAI,CAAC+B,IAAI,CAACjB,WAAW,CAAC,CAAC,EAAEiB,IAAI,CAAChB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChF,MAAMc,SAAS,GAAIE,IAAI,IAAK,IAAI/B,IAAI,CAAC+B,IAAI,CAACjB,WAAW,CAAC,CAAC,EAAEiB,IAAI,CAAChB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChF,MAAMa,YAAY,GAAIvB,KAAK,IAAK;EAC9B,MAAM2B,MAAM,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;EACzI,OAAOA,MAAM,CAAC3B,KAAK,CAAC;AACtB,CAAC;AAED,eAAeT,QAAQ;;AAIvB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkC,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}