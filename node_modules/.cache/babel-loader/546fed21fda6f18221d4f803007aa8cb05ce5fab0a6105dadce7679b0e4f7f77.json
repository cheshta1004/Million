{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chesh\\\\OneDrive\\\\Desktop\\\\Million\\\\src\\\\Components\\\\Calender.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Tasks from './Tasks';\nimport Popup from './Popup';\nimport Button from 'react-bootstrap/Button';\nimport Performance from './Performace';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [dateTasks, setDateTasks] = useState({});\n  const getDaysInMonth = (year, month) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n  const getFirstDayOfMonth = (year, month) => {\n    return new Date(year, month, 1).getDay();\n  };\n  const calculateTaskPercentages = () => {\n    const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n    const taskOccurrences = {};\n    Object.keys(dateTasks).forEach(date => {\n      const dateObj = new Date(date);\n      if (dateObj.getMonth() === currentDate.getMonth() && dateObj.getFullYear() === currentDate.getFullYear()) {\n        dateTasks[date].forEach(task => {\n          if (taskOccurrences[task.name]) {\n            taskOccurrences[task.name]++;\n          } else {\n            taskOccurrences[task.name] = 1;\n          }\n        });\n      }\n    });\n    const taskPercentages = {};\n    Object.keys(taskOccurrences).forEach(task => {\n      taskPercentages[task] = (taskOccurrences[task] / daysInMonth * 100).toFixed(2);\n    });\n    return taskPercentages;\n  };\n  const generateCalendar = () => {\n    const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n    const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\n    let calendar = [];\n\n    // Adding empty cells for the days before the first day of the month\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      calendar.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-day empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this));\n    }\n\n    // Adding cells for each day of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n      const tasks = dateTasks[date.toDateString()];\n      const taskCount = tasks ? tasks.length : 0;\n      const cellStyle = taskCount > 0 ? {\n        border: '1px solid #ccc'\n      } : {};\n      calendar.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-day\",\n        style: cellStyle,\n        onClick: () => setSelectedDate(date),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-indicators\",\n          children: tasks && tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-indicator\",\n            style: {\n              backgroundColor: task.color\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), taskCount > 0 && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-danger\",\n          style: {\n            fontSize: '0.55rem',\n            padding: '0.3rem 0.3rem'\n          },\n          onClick: e => handleRemoveTask(e, date),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, `day-${day}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this));\n    }\n    return calendar;\n  };\n  const handleTaskSelect = task => {\n    setDateTasks(prev => ({\n      ...prev,\n      [selectedDate.toDateString()]: prev[selectedDate.toDateString()] ? [...prev[selectedDate.toDateString()], task] : [task]\n    }));\n    setSelectedDate(null);\n  };\n  const handleRemoveTask = (e, date) => {\n    e.stopPropagation(); // Prevents click on button from triggering calendar day selection\n    setDateTasks(prev => {\n      const updatedTasks = {\n        ...prev\n      };\n      delete updatedTasks[date.toDateString()];\n      return updatedTasks;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentDate(prevMonth(currentDate)),\n            children: \"<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [getMonthName(currentDate.getMonth()), \" \", currentDate.getFullYear()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentDate(nextMonth(currentDate)),\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-grid\",\n          children: generateCalendar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-percentages\",\n        children: Object.entries(calculateTaskPercentages()).map(([task, percentage]) => /*#__PURE__*/_jsxDEV(Performance, {\n          style: {\n            position: absolute\n          },\n          task: task,\n          percentage: percentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), selectedDate && /*#__PURE__*/_jsxDEV(Popup, {\n      tasks: Tasks,\n      selectedDate: selectedDate,\n      onSelectTask: handleTaskSelect,\n      onClose: () => setSelectedDate(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper functions to navigate months\n_s(Calendar, \"LC5oCYJ/iUKsblDYNJSOMGiyVrc=\");\n_c = Calendar;\nconst prevMonth = date => new Date(date.getFullYear(), date.getMonth() - 1, 1);\nconst nextMonth = date => new Date(date.getFullYear(), date.getMonth() + 1, 1);\nconst getMonthName = month => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[month];\n};\nexport default Calendar;\n\n// import React, { useState } from 'react';\n// import Tasks from './Tasks';\n// import Popup from './Popup';\n// import Button from 'react-bootstrap/Button';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [dateTasks, setDateTasks] = useState({});\n\n//   const getDaysInMonth = (year, month) => {\n//     return new Date(year, month + 1, 0).getDate();\n//   };\n\n//   const getFirstDayOfMonth = (year, month) => {\n//     return new Date(year, month, 1).getDay();\n//   };\n\n//   const calculateTaskPercentage = () => {\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n//     const taskDays = Object.keys(dateTasks).filter(date => {\n//       const dateObj = new Date(date);\n//       return dateObj.getMonth() === currentDate.getMonth() && dateObj.getFullYear() === currentDate.getFullYear();\n//     }).length;\n//     return ((taskDays / daysInMonth) * 100).toFixed(2);\n//   };\n\n//   const generateCalendar = () => {\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n//     const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\n\n//     let calendar = [];\n\n//     // Adding empty cells for the days before the first day of the month\n//     for (let i = 0; i < firstDayOfMonth; i++) {\n//       calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\n//     }\n\n//     // Adding cells for each day of the month\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n//       const tasks = dateTasks[date.toDateString()];\n//       const taskCount = tasks ? tasks.length : 0;\n//       const cellStyle = taskCount > 0 ? { border: '1px solid #ccc' } : {};\n\n//       calendar.push(\n//         <div\n//           key={`day-${day}`}\n//           className=\"calendar-day\"\n//           style={cellStyle}\n//           onClick={() => setSelectedDate(date)}\n//         >\n//           <span>{day}</span>\n//           <div className=\"task-indicators\">\n//             {tasks && tasks.map((task, index) => (\n//               <div key={index} className=\"task-indicator\" style={{ backgroundColor: task.color }}></div>\n//             ))}\n//           </div>\n//           {taskCount > 0 && (\n//             <Button variant=\"outline-danger\" style={{ fontSize: '0.55rem', padding: '0.3rem 0.3rem' }} onClick={(e) => handleRemoveTask(e, date)}>X</Button>\n//           )}\n//         </div>\n//       );\n//     }\n\n//     return calendar;\n//   };\n\n//   const handleTaskSelect = (task) => {\n//     setDateTasks(prev => ({\n//       ...prev,\n//       [selectedDate.toDateString()]: prev[selectedDate.toDateString()] \n//         ? [...prev[selectedDate.toDateString()], task] \n//         : [task]\n//     }));\n//     setSelectedDate(null);\n//   };\n\n//   const handleRemoveTask = (e, date) => {\n//     e.stopPropagation(); // Prevents click on button from triggering calendar day selection\n//     setDateTasks(prev => {\n//       const updatedTasks = { ...prev };\n//       delete updatedTasks[date.toDateString()];\n//       return updatedTasks;\n//     });\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"calendar-container\">\n//         <div className=\"calendar\">\n//           <div className=\"calendar-header\">\n//             <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\n//             <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\n//             <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {generateCalendar()}\n//           </div>\n//         </div>\n//         <div className=\"task-percentage\">\n//           Task performed {calculateTaskPercentage()}% of the days this month\n//         </div>\n//       </div>\n//       {selectedDate && (\n//         <Popup\n//           tasks={Tasks}\n//           selectedDate={selectedDate}\n//           onSelectTask={handleTaskSelect}\n//           onClose={() => setSelectedDate(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Helper functions to navigate months\n// const prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\n// const nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\n// const getMonthName = (month) => {\n//   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n//   return months[month];\n// };\n\n// export default Calendar;\n\n// import React, { useState } from 'react';\n// import Tasks from './Tasks';\n// import Popup from './Popup';\n// import Button from 'react-bootstrap/Button';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [dateTasks, setDateTasks] = useState({});\n\n//   const getDaysInMonth = (year, month) => {\n//     return new Date(year, month + 1, 0).getDate();\n//   };\n\n//   const getFirstDayOfMonth = (year, month) => {\n//     return new Date(year, month, 1).getDay();\n//   };\n\n//   const generateCalendar = () => {\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\n//     const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\n\n//     let calendar = [];\n\n//     // Adding empty cells for the days before the first day of the month\n//     for (let i = 0; i < firstDayOfMonth; i++) {\n//       calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\n//     }\n\n//     // Adding cells for each day of the month\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n//       const tasks = dateTasks[date.toDateString()];\n//       const taskCount = tasks ? tasks.length : 0;\n//       const cellStyle = taskCount > 0 ? { border: '1px solid #ccc' } : {};\n\n//       calendar.push(\n//         <div\n//           key={`day-${day}`}\n//           className=\"calendar-day\"\n//           style={cellStyle}\n//           onClick={() => setSelectedDate(date)}\n//         >\n//           <span>{day}</span>\n//           <div className=\"task-indicators\">\n//             {tasks && tasks.map((task, index) => (\n//               <div key={index} className=\"task-indicator\" style={{ backgroundColor: task.color }}></div>\n//             ))}\n//           </div>\n//           {taskCount > 0 && (\n//             <Button variant=\"outline-danger\" style={{ fontSize: '0.55rem', padding: '0.3rem 0.3rem' }} onClick={(e) => handleRemoveTask(e, date)}>X</Button>\n\n//           )}\n//         </div>\n//       );\n//     }\n\n//     return calendar;\n//   };\n\n//   const handleTaskSelect = (task) => {\n//     setDateTasks(prev => ({\n//       ...prev,\n//       [selectedDate.toDateString()]: prev[selectedDate.toDateString()] \n//         ? [...prev[selectedDate.toDateString()], task] \n//         : [task]\n//     }));\n//     setSelectedDate(null);\n//   };\n\n//   const handleRemoveTask = (e, date) => {\n//     e.stopPropagation(); // Prevents click on button from triggering calendar day selection\n//     setDateTasks(prev => {\n//       const updatedTasks = { ...prev };\n//       delete updatedTasks[date.toDateString()];\n//       return updatedTasks;\n//     });\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"calendar-container\">\n//         <div className=\"calendar\">\n//           <div className=\"calendar-header\">\n//             <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\n//             <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\n//             <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {generateCalendar()}\n//           </div>\n//         </div>\n//       </div>\n//       {selectedDate && (\n//         <Popup\n//           tasks={Tasks}\n//           selectedDate={selectedDate}\n//           onSelectTask={handleTaskSelect}\n//           onClose={() => setSelectedDate(null)}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// // Helper functions to navigate months\n// const prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\n// const nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\n// const getMonthName = (month) => {\n//   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n//   return months[month];\n// };\n\n// export default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","Tasks","Popup","Button","Performance","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","dateTasks","setDateTasks","getDaysInMonth","year","month","getDate","getFirstDayOfMonth","getDay","calculateTaskPercentages","daysInMonth","getFullYear","getMonth","taskOccurrences","Object","keys","forEach","date","dateObj","task","name","taskPercentages","toFixed","generateCalendar","firstDayOfMonth","calendar","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","day","tasks","toDateString","taskCount","length","cellStyle","border","style","onClick","children","map","index","backgroundColor","color","variant","fontSize","padding","e","handleRemoveTask","handleTaskSelect","prev","stopPropagation","updatedTasks","prevMonth","getMonthName","nextMonth","entries","percentage","position","absolute","onSelectTask","onClose","_c","months","$RefreshReg$"],"sources":["C:/Users/chesh/OneDrive/Desktop/Million/src/Components/Calender.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Tasks from './Tasks';\r\nimport Popup from './Popup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Performance from './Performace';\r\nconst Calendar = () => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [dateTasks, setDateTasks] = useState({});\r\n\r\n  const getDaysInMonth = (year, month) => {\r\n    return new Date(year, month + 1, 0).getDate();\r\n  };\r\n\r\n  const getFirstDayOfMonth = (year, month) => {\r\n    return new Date(year, month, 1).getDay();\r\n  };\r\n\r\n  const calculateTaskPercentages = () => {\r\n    const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n    const taskOccurrences = {};\r\n\r\n    Object.keys(dateTasks).forEach(date => {\r\n      const dateObj = new Date(date);\r\n      if (dateObj.getMonth() === currentDate.getMonth() && dateObj.getFullYear() === currentDate.getFullYear()) {\r\n        dateTasks[date].forEach(task => {\r\n          if (taskOccurrences[task.name]) {\r\n            taskOccurrences[task.name]++;\r\n          } else {\r\n            taskOccurrences[task.name] = 1;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const taskPercentages = {};\r\n    Object.keys(taskOccurrences).forEach(task => {\r\n      taskPercentages[task] = ((taskOccurrences[task] / daysInMonth) * 100).toFixed(2);\r\n    });\r\n\r\n    return taskPercentages;\r\n  };\r\n\r\n  const generateCalendar = () => {\r\n    const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n    const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n\r\n    let calendar = [];\r\n\r\n    // Adding empty cells for the days before the first day of the month\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n      calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\r\n    }\r\n\r\n    // Adding cells for each day of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n      const tasks = dateTasks[date.toDateString()];\r\n      const taskCount = tasks ? tasks.length : 0;\r\n      const cellStyle = taskCount > 0 ? { border: '1px solid #ccc' } : {};\r\n\r\n      calendar.push(\r\n        <div\r\n          key={`day-${day}`}\r\n          className=\"calendar-day\"\r\n          style={cellStyle}\r\n          onClick={() => setSelectedDate(date)}\r\n        >\r\n          <span>{day}</span>\r\n          <div className=\"task-indicators\">\r\n            {tasks && tasks.map((task, index) => (\r\n              <div key={index} className=\"task-indicator\" style={{ backgroundColor: task.color }}></div>\r\n            ))}\r\n          </div>\r\n          {taskCount > 0 && (\r\n            <Button variant=\"outline-danger\" style={{ fontSize: '0.55rem', padding: '0.3rem 0.3rem' }} onClick={(e) => handleRemoveTask(e, date)}>X</Button>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return calendar;\r\n  };\r\n\r\n  const handleTaskSelect = (task) => {\r\n    setDateTasks(prev => ({\r\n      ...prev,\r\n      [selectedDate.toDateString()]: prev[selectedDate.toDateString()] \r\n        ? [...prev[selectedDate.toDateString()], task] \r\n        : [task]\r\n    }));\r\n    setSelectedDate(null);\r\n  };\r\n\r\n  const handleRemoveTask = (e, date) => {\r\n    e.stopPropagation(); // Prevents click on button from triggering calendar day selection\r\n    setDateTasks(prev => {\r\n      const updatedTasks = { ...prev };\r\n      delete updatedTasks[date.toDateString()];\r\n      return updatedTasks;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"calendar-container\">\r\n        <div className=\"calendar\">\r\n          <div className=\"calendar-header\">\r\n            <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\r\n            <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\r\n            <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\r\n          </div>\r\n          <div className=\"calendar-grid\">\r\n            {generateCalendar()}\r\n          </div>\r\n        </div>\r\n        <div className=\"task-percentages\">\r\n          {Object.entries(calculateTaskPercentages()).map(([task, percentage]) => (\r\n            <Performance style={{\r\n              position:absolute\r\n            }}task={task}percentage={percentage}/>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {selectedDate && (\r\n        <Popup\r\n          tasks={Tasks}\r\n          selectedDate={selectedDate}\r\n          onSelectTask={handleTaskSelect}\r\n          onClose={() => setSelectedDate(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper functions to navigate months\r\nconst prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\r\nconst nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\nconst getMonthName = (month) => {\r\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  return months[month];\r\n};\r\n\r\nexport default Calendar;\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import Tasks from './Tasks';\r\n// import Popup from './Popup';\r\n// import Button from 'react-bootstrap/Button';\r\n\r\n// const Calendar = () => {\r\n//   const [currentDate, setCurrentDate] = useState(new Date());\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [dateTasks, setDateTasks] = useState({});\r\n\r\n//   const getDaysInMonth = (year, month) => {\r\n//     return new Date(year, month + 1, 0).getDate();\r\n//   };\r\n\r\n//   const getFirstDayOfMonth = (year, month) => {\r\n//     return new Date(year, month, 1).getDay();\r\n//   };\r\n\r\n//   const calculateTaskPercentage = () => {\r\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n//     const taskDays = Object.keys(dateTasks).filter(date => {\r\n//       const dateObj = new Date(date);\r\n//       return dateObj.getMonth() === currentDate.getMonth() && dateObj.getFullYear() === currentDate.getFullYear();\r\n//     }).length;\r\n//     return ((taskDays / daysInMonth) * 100).toFixed(2);\r\n//   };\r\n\r\n//   const generateCalendar = () => {\r\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n//     const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n\r\n//     let calendar = [];\r\n\r\n//     // Adding empty cells for the days before the first day of the month\r\n//     for (let i = 0; i < firstDayOfMonth; i++) {\r\n//       calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\r\n//     }\r\n\r\n//     // Adding cells for each day of the month\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n//       const tasks = dateTasks[date.toDateString()];\r\n//       const taskCount = tasks ? tasks.length : 0;\r\n//       const cellStyle = taskCount > 0 ? { border: '1px solid #ccc' } : {};\r\n\r\n//       calendar.push(\r\n//         <div\r\n//           key={`day-${day}`}\r\n//           className=\"calendar-day\"\r\n//           style={cellStyle}\r\n//           onClick={() => setSelectedDate(date)}\r\n//         >\r\n//           <span>{day}</span>\r\n//           <div className=\"task-indicators\">\r\n//             {tasks && tasks.map((task, index) => (\r\n//               <div key={index} className=\"task-indicator\" style={{ backgroundColor: task.color }}></div>\r\n//             ))}\r\n//           </div>\r\n//           {taskCount > 0 && (\r\n//             <Button variant=\"outline-danger\" style={{ fontSize: '0.55rem', padding: '0.3rem 0.3rem' }} onClick={(e) => handleRemoveTask(e, date)}>X</Button>\r\n//           )}\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return calendar;\r\n//   };\r\n\r\n//   const handleTaskSelect = (task) => {\r\n//     setDateTasks(prev => ({\r\n//       ...prev,\r\n//       [selectedDate.toDateString()]: prev[selectedDate.toDateString()] \r\n//         ? [...prev[selectedDate.toDateString()], task] \r\n//         : [task]\r\n//     }));\r\n//     setSelectedDate(null);\r\n//   };\r\n\r\n//   const handleRemoveTask = (e, date) => {\r\n//     e.stopPropagation(); // Prevents click on button from triggering calendar day selection\r\n//     setDateTasks(prev => {\r\n//       const updatedTasks = { ...prev };\r\n//       delete updatedTasks[date.toDateString()];\r\n//       return updatedTasks;\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"calendar-container\">\r\n//         <div className=\"calendar\">\r\n//           <div className=\"calendar-header\">\r\n//             <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\r\n//             <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\r\n//             <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\r\n//           </div>\r\n//           <div className=\"calendar-grid\">\r\n//             {generateCalendar()}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"task-percentage\">\r\n//           Task performed {calculateTaskPercentage()}% of the days this month\r\n//         </div>\r\n//       </div>\r\n//       {selectedDate && (\r\n//         <Popup\r\n//           tasks={Tasks}\r\n//           selectedDate={selectedDate}\r\n//           onSelectTask={handleTaskSelect}\r\n//           onClose={() => setSelectedDate(null)}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Helper functions to navigate months\r\n// const prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\r\n// const nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n// const getMonthName = (month) => {\r\n//   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n//   return months[month];\r\n// };\r\n\r\n// export default Calendar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import Tasks from './Tasks';\r\n// import Popup from './Popup';\r\n// import Button from 'react-bootstrap/Button';\r\n\r\n// const Calendar = () => {\r\n//   const [currentDate, setCurrentDate] = useState(new Date());\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [dateTasks, setDateTasks] = useState({});\r\n\r\n//   const getDaysInMonth = (year, month) => {\r\n//     return new Date(year, month + 1, 0).getDate();\r\n//   };\r\n\r\n//   const getFirstDayOfMonth = (year, month) => {\r\n//     return new Date(year, month, 1).getDay();\r\n//   };\r\n\r\n//   const generateCalendar = () => {\r\n//     const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n//     const firstDayOfMonth = getFirstDayOfMonth(currentDate.getFullYear(), currentDate.getMonth());\r\n\r\n//     let calendar = [];\r\n\r\n//     // Adding empty cells for the days before the first day of the month\r\n//     for (let i = 0; i < firstDayOfMonth; i++) {\r\n//       calendar.push(<div key={`empty-${i}`} className=\"calendar-day empty\"></div>);\r\n//     }\r\n\r\n//     // Adding cells for each day of the month\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n//       const tasks = dateTasks[date.toDateString()];\r\n//       const taskCount = tasks ? tasks.length : 0;\r\n//       const cellStyle = taskCount > 0 ? { border: '1px solid #ccc' } : {};\r\n\r\n//       calendar.push(\r\n//         <div\r\n//           key={`day-${day}`}\r\n//           className=\"calendar-day\"\r\n//           style={cellStyle}\r\n//           onClick={() => setSelectedDate(date)}\r\n//         >\r\n//           <span>{day}</span>\r\n//           <div className=\"task-indicators\">\r\n//             {tasks && tasks.map((task, index) => (\r\n//               <div key={index} className=\"task-indicator\" style={{ backgroundColor: task.color }}></div>\r\n//             ))}\r\n//           </div>\r\n//           {taskCount > 0 && (\r\n//             <Button variant=\"outline-danger\" style={{ fontSize: '0.55rem', padding: '0.3rem 0.3rem' }} onClick={(e) => handleRemoveTask(e, date)}>X</Button>\r\n\r\n//           )}\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return calendar;\r\n//   };\r\n\r\n//   const handleTaskSelect = (task) => {\r\n//     setDateTasks(prev => ({\r\n//       ...prev,\r\n//       [selectedDate.toDateString()]: prev[selectedDate.toDateString()] \r\n//         ? [...prev[selectedDate.toDateString()], task] \r\n//         : [task]\r\n//     }));\r\n//     setSelectedDate(null);\r\n//   };\r\n\r\n//   const handleRemoveTask = (e, date) => {\r\n//     e.stopPropagation(); // Prevents click on button from triggering calendar day selection\r\n//     setDateTasks(prev => {\r\n//       const updatedTasks = { ...prev };\r\n//       delete updatedTasks[date.toDateString()];\r\n//       return updatedTasks;\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"calendar-container\">\r\n//         <div className=\"calendar\">\r\n//           <div className=\"calendar-header\">\r\n//             <button onClick={() => setCurrentDate(prevMonth(currentDate))}>&lt;</button>\r\n//             <span>{getMonthName(currentDate.getMonth())} {currentDate.getFullYear()}</span>\r\n//             <button onClick={() => setCurrentDate(nextMonth(currentDate))}>&gt;</button>\r\n//           </div>\r\n//           <div className=\"calendar-grid\">\r\n//             {generateCalendar()}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       {selectedDate && (\r\n//         <Popup\r\n//           tasks={Tasks}\r\n//           selectedDate={selectedDate}\r\n//           onSelectTask={handleTaskSelect}\r\n//           onClose={() => setSelectedDate(null)}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Helper functions to navigate months\r\n// const prevMonth = (date) => new Date(date.getFullYear(), date.getMonth() - 1, 1);\r\n// const nextMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 1);\r\n// const getMonthName = (month) => {\r\n//   const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n//   return months[month];\r\n// };\r\n\r\n// export default Calendar;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}