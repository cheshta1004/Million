{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst Aggregate = require('./aggregate');\nconst ChangeStream = require('./cursor/changeStream');\nconst Document = require('./document');\nconst DocumentNotFoundError = require('./error/notFound');\nconst DivergentArrayError = require('./error/divergentArray');\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseBuffer = require('./types/buffer');\nconst MongooseError = require('./error/index');\nconst ObjectParameterError = require('./error/objectParameter');\nconst OverwriteModelError = require('./error/overwriteModel');\nconst Query = require('./query');\nconst SaveOptions = require('./options/saveOptions');\nconst Schema = require('./schema');\nconst ValidationError = require('./error/validation');\nconst VersionError = require('./error/version');\nconst ParallelSaveError = require('./error/parallelSave');\nconst applyDefaultsHelper = require('./helpers/document/applyDefaults');\nconst applyDefaultsToPOJO = require('./helpers/model/applyDefaultsToPOJO');\nconst applyEmbeddedDiscriminators = require('./helpers/discriminator/applyEmbeddedDiscriminators');\nconst applyHooks = require('./helpers/model/applyHooks');\nconst applyMethods = require('./helpers/model/applyMethods');\nconst applyProjection = require('./helpers/projection/applyProjection');\nconst applyReadConcern = require('./helpers/schema/applyReadConcern');\nconst applySchemaCollation = require('./helpers/indexes/applySchemaCollation');\nconst applyStaticHooks = require('./helpers/model/applyStaticHooks');\nconst applyStatics = require('./helpers/model/applyStatics');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst assignVals = require('./helpers/populate/assignVals');\nconst castBulkWrite = require('./helpers/model/castBulkWrite');\nconst clone = require('./helpers/clone');\nconst createPopulateQueryFilter = require('./helpers/populate/createPopulateQueryFilter');\nconst decorateUpdateWithVersionKey = require('./helpers/update/decorateUpdateWithVersionKey');\nconst getDefaultBulkwriteResult = require('./helpers/getDefaultBulkwriteResult');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst discriminator = require('./helpers/model/discriminator');\nconst firstKey = require('./helpers/firstKey');\nconst each = require('./helpers/each');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst getModelsMapForPopulate = require('./helpers/populate/getModelsMapForPopulate');\nconst immediate = require('./helpers/immediate');\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst isDefaultIdIndex = require('./helpers/indexes/isDefaultIdIndex');\nconst isIndexEqual = require('./helpers/indexes/isIndexEqual');\nconst {\n  getRelatedDBIndexes,\n  getRelatedSchemaIndexes\n} = require('./helpers/indexes/getRelatedIndexes');\nconst isPathExcluded = require('./helpers/projection/isPathExcluded');\nconst decorateDiscriminatorIndexOptions = require('./helpers/indexes/decorateDiscriminatorIndexOptions');\nconst isPathSelectedInclusive = require('./helpers/projection/isPathSelectedInclusive');\nconst leanPopulateMap = require('./helpers/populate/leanPopulateMap');\nconst parallelLimit = require('./helpers/parallelLimit');\nconst parentPaths = require('./helpers/path/parentPaths');\nconst prepareDiscriminatorPipeline = require('./helpers/aggregate/prepareDiscriminatorPipeline');\nconst pushNestedArrayPaths = require('./helpers/model/pushNestedArrayPaths');\nconst removeDeselectedForeignField = require('./helpers/populate/removeDeselectedForeignField');\nconst setDottedPath = require('./helpers/path/setDottedPath');\nconst STATES = require('./connectionState');\nconst util = require('util');\nconst utils = require('./utils');\nconst MongooseBulkWriteError = require('./error/bulkWriteError');\nconst minimize = require('./helpers/minimize');\nconst VERSION_WHERE = 1;\nconst VERSION_INC = 2;\nconst VERSION_ALL = VERSION_WHERE | VERSION_INC;\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst modelCollectionSymbol = Symbol('mongoose#Model#collection');\nconst modelDbSymbol = Symbol('mongoose#Model#db');\nconst modelSymbol = require('./helpers/symbols').modelSymbol;\nconst subclassedSymbol = Symbol('mongoose#Model#subclassed');\nconst saveToObjectOptions = Object.assign({}, internalToObjectOptions, {\n  bson: true,\n  flattenObjectIds: false\n});\n\n/**\n * A Model is a class that's your primary tool for interacting with MongoDB.\n * An instance of a Model is called a [Document](https://mongoosejs.com/docs/api/document.html#Document).\n *\n * In Mongoose, the term \"Model\" refers to subclasses of the `mongoose.Model`\n * class. You should not use the `mongoose.Model` class directly. The\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) and\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()) functions\n * create subclasses of `mongoose.Model` as shown below.\n *\n * #### Example:\n *\n *     // `UserModel` is a \"Model\", a subclass of `mongoose.Model`.\n *     const UserModel = mongoose.model('User', new Schema({ name: String }));\n *\n *     // You can use a Model to create new documents using `new`:\n *     const userDoc = new UserModel({ name: 'Foo' });\n *     await userDoc.save();\n *\n *     // You also use a model to create queries:\n *     const userFromDb = await UserModel.findOne({ name: 'Foo' });\n *\n * @param {Object} doc values for initial set\n * @param {Object} [fields] optional object containing the fields that were selected in the query which returned this document. You do **not** need to set this parameter to ensure Mongoose handles your [query projection](https://mongoosejs.com/docs/api/query.html#Query.prototype.select()).\n * @param {Boolean} [skipId=false] optional boolean. If true, mongoose doesn't add an `_id` field to the document.\n * @inherits Document https://mongoosejs.com/docs/api/document.html\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` constructor must be a POJO or string, ' + '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' + '`mongoose.Model()`.');\n  }\n  if (typeof doc === 'string') {\n    throw new TypeError('First argument to `Model` constructor must be an object, ' + '**not** a string. Make sure you\\'re calling `mongoose.model()`, not ' + '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId);\n}\n\n/**\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n * @api private\n */\n\nObject.setPrototypeOf(Model.prototype, Document.prototype);\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.db;\n\n/**\n * The collection instance this model uses.\n * A Mongoose collection is a thin wrapper around a [MongoDB Node.js driver collection]([MongoDB Node.js driver collection](https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html)).\n * Using `Model.collection` means you bypass Mongoose middleware, validation, and casting.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api public\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.collection;\n\n/**\n * Internal collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api private\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.baseModelName;\n\n/**\n * Event emitter that reports any errors that occurred. Useful for global error\n * handling.\n *\n * #### Example:\n *\n *     MyModel.events.on('error', err => console.log(err.message));\n *\n *     // Prints a 'CastError' because of the above handler\n *     await MyModel.findOne({ _id: 'Not a valid ObjectId' }).catch(noop);\n *\n * @api public\n * @property events\n * @fires error whenever any query or model function errors\n * @memberOf Model\n * @static\n */\n\nModel.events;\n\n/**\n * Compiled middleware for this model. Set in `applyHooks()`.\n *\n * @api private\n * @property _middleware\n * @memberOf Model\n * @static\n */\n\nModel._middleware;\n\n/*!\n * ignore\n */\n\nfunction _applyCustomWhere(doc, where) {\n  if (doc.$where == null) {\n    return;\n  }\n  for (const key of Object.keys(doc.$where)) {\n    where[key] = doc.$where[key];\n  }\n}\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function (options, callback) {\n  const saveOptions = {};\n  applyWriteConcern(this.$__schema, options);\n  if (typeof options.writeConcern !== 'undefined') {\n    saveOptions.writeConcern = {};\n    if ('w' in options.writeConcern) {\n      saveOptions.writeConcern.w = options.writeConcern.w;\n    }\n    if ('j' in options.writeConcern) {\n      saveOptions.writeConcern.j = options.writeConcern.j;\n    }\n    if ('wtimeout' in options.writeConcern) {\n      saveOptions.writeConcern.wtimeout = options.writeConcern.wtimeout;\n    }\n  } else {\n    if ('w' in options) {\n      saveOptions.w = options.w;\n    }\n    if ('j' in options) {\n      saveOptions.j = options.j;\n    }\n    if ('wtimeout' in options) {\n      saveOptions.wtimeout = options.wtimeout;\n    }\n  }\n  if ('checkKeys' in options) {\n    saveOptions.checkKeys = options.checkKeys;\n  }\n  const session = this.$session();\n  const asyncLocalStorage = this[modelDbSymbol].base.transactionAsyncLocalStorage?.getStore();\n  if (!saveOptions.hasOwnProperty('session') && session != null) {\n    saveOptions.session = session;\n  } else if (asyncLocalStorage?.session != null) {\n    saveOptions.session = asyncLocalStorage.session;\n  }\n  if (this.$isNew) {\n    // send entire doc\n    const obj = this.toObject(saveToObjectOptions);\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated by mongodb necessarily\n      // match the schema definition.\n      immediate(function () {\n        callback(new MongooseError('document must have an _id before saving'));\n      });\n      return;\n    }\n    this.$__version(true, obj);\n    this[modelCollectionSymbol].insertOne(obj, saveOptions).then(ret => callback(null, ret), err => {\n      _setIsNew(this, true);\n      callback(err, null);\n    });\n    this.$__reset();\n    _setIsNew(this, false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n    return;\n  }\n\n  // Make sure we don't treat it as a new object on error,\n  // since it already exists\n  this.$__.inserting = false;\n  const delta = this.$__delta();\n  if (options.pathsToSave) {\n    for (const key in delta[1]['$set']) {\n      if (options.pathsToSave.includes(key)) {\n        continue;\n      } else if (options.pathsToSave.some(pathToSave => key.slice(0, pathToSave.length) === pathToSave && key.charAt(pathToSave.length) === '.')) {\n        continue;\n      } else {\n        delete delta[1]['$set'][key];\n      }\n    }\n  }\n  if (delta) {\n    if (delta instanceof MongooseError) {\n      callback(delta);\n      return;\n    }\n    const where = this.$__where(delta[0]);\n    if (where instanceof MongooseError) {\n      callback(where);\n      return;\n    }\n    _applyCustomWhere(this, where);\n    const update = delta[1];\n    if (this.$__schema.options.minimize) {\n      for (const updateOp of Object.values(update)) {\n        if (updateOp == null) {\n          continue;\n        }\n        for (const key of Object.keys(updateOp)) {\n          if (updateOp[key] == null || typeof updateOp[key] !== 'object') {\n            continue;\n          }\n          if (!utils.isPOJO(updateOp[key])) {\n            continue;\n          }\n          minimize(updateOp[key]);\n          if (Object.keys(updateOp[key]).length === 0) {\n            delete updateOp[key];\n            update.$unset = update.$unset || {};\n            update.$unset[key] = 1;\n          }\n        }\n      }\n    }\n    this[modelCollectionSymbol].updateOne(where, update, saveOptions).then(ret => {\n      ret.$where = where;\n      callback(null, ret);\n    }, err => {\n      this.$__undoReset();\n      callback(err);\n    });\n  } else {\n    handleEmptyUpdate.call(this);\n    return;\n  }\n\n  // store the modified paths before the document is reset\n  this.$__.modifiedPaths = this.modifiedPaths();\n  this.$__reset();\n  _setIsNew(this, false);\n  function handleEmptyUpdate() {\n    const optionsWithCustomValues = Object.assign({}, options, saveOptions);\n    const where = this.$__where();\n    const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n    if (optimisticConcurrency && !Array.isArray(optimisticConcurrency)) {\n      const key = this.$__schema.options.versionKey;\n      const val = this.$__getValue(key);\n      if (val != null) {\n        where[key] = val;\n      }\n    }\n    applyReadConcern(this.$__schema, optionsWithCustomValues);\n    this.constructor.collection.findOne(where, optionsWithCustomValues).then(documentExists => {\n      const matchedCount = !documentExists ? 0 : 1;\n      callback(null, {\n        $where: where,\n        matchedCount\n      });\n    }).catch(callback);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function (options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    if (error) {\n      const hooks = this.$__schema.s.hooks;\n      return hooks.execPost('save:error', this, [this], {\n        error: error\n      }, error => {\n        callback(error, this);\n      });\n    }\n    let numAffected = 0;\n    const writeConcern = options != null ? options.writeConcern != null ? options.writeConcern.w : options.w : 0;\n    if (writeConcern !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result != null) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.matchedCount != null) {\n          numAffected = result.matchedCount;\n        } else {\n          numAffected = result;\n        }\n      }\n      const versionBump = this.$__.version;\n      // was this an update that required a version bump?\n      if (versionBump && !this.$__.inserting) {\n        const doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n        const key = this.$__schema.options.versionKey;\n        const version = this.$__getValue(key) || 0;\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          this.$__undoReset();\n          const err = this.$__.$versionError || new VersionError(this, version, this.$__.modifiedPaths);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          this.$__setValue(key, version + 1);\n        }\n      }\n      if (result != null && numAffected <= 0) {\n        this.$__undoReset();\n        error = new DocumentNotFoundError(result.$where, this.constructor.modelName, numAffected, result);\n        const hooks = this.$__schema.s.hooks;\n        return hooks.execPost('save:error', this, [this], {\n          error: error\n        }, error => {\n          callback(error, this);\n        });\n      }\n    }\n    this.$__.saving = undefined;\n    this.$__.savedState = {};\n    this.$emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction generateVersionError(doc, modifiedPaths) {\n  const key = doc.$__schema.options.versionKey;\n  if (!key) {\n    return null;\n  }\n  const version = doc.$__getValue(key) || 0;\n  return new VersionError(doc, version, modifiedPaths);\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation with just the modified paths if `isNew` is `false`.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] if `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Array} [options.pathsToSave] An array of paths that tell mongoose to only validate and save the paths in `pathsToSave`.\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise}\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = async function save(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.save() no longer accepts a callback');\n  }\n  let parallelSave;\n  this.$op = 'save';\n  if (this.$__.saving) {\n    parallelSave = new ParallelSaveError(this);\n  } else {\n    this.$__.saving = new ParallelSaveError(this);\n  }\n  options = new SaveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  if (this.$__.timestamps != null) {\n    options.timestamps = this.$__.timestamps;\n  }\n  this.$__.$versionError = generateVersionError(this, this.modifiedPaths());\n  if (parallelSave) {\n    this.$__handleReject(parallelSave);\n    throw parallelSave;\n  }\n  this.$__.saveOptions = options;\n  await new Promise((resolve, reject) => {\n    this.$__save(options, error => {\n      this.$__.saving = null;\n      this.$__.saveOptions = null;\n      this.$__.$versionError = null;\n      this.$op = null;\n      if (error != null) {\n        this.$__handleReject(error);\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n  return this;\n};\nModel.prototype.$save = Model.prototype.save;\n\n/**\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n * @api private\n */\nfunction shouldSkipVersioning(self, path) {\n  const skipVersioning = self.$__schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n  return skipVersioning[path];\n}\n\n/**\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where Unused\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [op]\n * @api private\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n  // disabled versioning?\n  if (self.$__schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n  if (self.$__schema.options.optimisticConcurrency) {\n    return;\n  }\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n    case '$inc':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n  if (op === '$push' || op === '$addToSet' || op === '$pullAll' || op === '$pull') {\n    if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n      increment.call(self);\n    } else {\n      self.$__.version = VERSION_INC;\n    }\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    increment.call(self);\n  } else if (Array.isArray(val)) {\n    // $set an array\n    increment.call(self);\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/**\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n * @api private\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function (atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  const atomics = value[arrayAtomicsSymbol];\n  const ops = Object.keys(atomics);\n  let i = ops.length;\n  let val;\n  let op;\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({\n        depopulate: 1,\n        _isNested: true\n      });\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n    return operand(self, where, delta, data, value);\n  }\n  function iter(mem) {\n    return utils.isMongooseObject(mem) ? mem.toObject({\n      depopulate: 1,\n      _isNested: true\n    }) : mem;\n  }\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({\n        depopulate: true,\n        transform: false,\n        _isNested: true\n      });\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n    if (op === '$addToSet') {\n      val = {\n        $each: val\n      };\n    }\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__delta = function () {\n  const dirty = this.$__dirty();\n  const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n  if (optimisticConcurrency) {\n    if (Array.isArray(optimisticConcurrency)) {\n      const optCon = new Set(optimisticConcurrency);\n      const modPaths = this.modifiedPaths();\n      if (modPaths.find(path => optCon.has(path))) {\n        this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n      }\n    } else {\n      this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n    }\n  }\n  if (!dirty.length && VERSION_ALL !== this.$__.version) {\n    return;\n  }\n  const where = {};\n  const delta = {};\n  const len = dirty.length;\n  const divergent = [];\n  let d = 0;\n  where._id = this._doc._id;\n  // If `_id` is an object, need to depopulate, but also need to be careful\n  // because `_id` can technically be null (see gh-6406)\n  if ((where && where._id && where._id.$__ || null) != null) {\n    where._id = where._id.toObject({\n      transform: false,\n      depopulate: true\n    });\n  }\n  for (; d < len; ++d) {\n    const data = dirty[d];\n    let value = data.value;\n    const match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n    const pop = this.$populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      const pathSplit = data.path.split('.');\n      const top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    // If this path is set to default, and either this path or one of\n    // its parents is excluded, don't treat this path as dirty.\n    if (this.$isDefault(data.path) && this.$__.selected) {\n      if (data.path.indexOf('.') === -1 && isPathExcluded(this.$__.selected, data.path)) {\n        continue;\n      }\n      const pathsToCheck = parentPaths(data.path);\n      if (pathsToCheck.find(path => isPathExcluded(this.$__.isSelected, path))) {\n        continue;\n      }\n    }\n    if (divergent.length) continue;\n    if (value === undefined) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (utils.isMongooseArray(value) && value.$path() && value[arrayAtomicsSymbol]) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value[MongooseBuffer.pathSymbol] && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[data.path] != null) {\n        const val = this.$__.primitiveAtomics[data.path];\n        const op = firstKey(val);\n        operand(this, where, delta, data, val[op], op);\n      } else {\n        value = clone(value, {\n          depopulate: true,\n          transform: false,\n          virtuals: false,\n          getters: false,\n          omitUndefined: true,\n          _isNested: true\n        });\n        operand(this, where, delta, data, value);\n      }\n    }\n  }\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n  if (Object.keys(delta).length === 0) {\n    return [where, null];\n  }\n  return [where, delta];\n};\n\n/**\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @param {Any} array\n * @return {String|undefined}\n * @api private\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  const pop = doc.$populated(path, true);\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    const top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n  if (!(pop && utils.isMongooseArray(array))) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarly destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  const check = pop.options.match || pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') ||\n  // 0 is not permitted\n  pop.options.options && pop.options.options.skip ||\n  // 0 is permitted\n  pop.options.select && (\n  // deselected _id?\n  pop.options.select._id === 0 || /\\s?-_id\\s?/.test(pop.options.select));\n  if (check) {\n    const atomics = array[arrayAtomicsSymbol];\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__version = function (where, delta) {\n  const key = this.$__schema.options.versionKey;\n  if (where === true) {\n    // this is an insert\n    if (key) {\n      setDottedPath(delta, key, 0);\n      this.$__setValue(key, 0);\n    }\n    return;\n  }\n  if (key === false) {\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n\n  if (!this.$__isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    const value = this.$__getValue(key);\n    if (value != null) where[key] = value;\n  }\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n}\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * #### Example:\n *\n *     const doc = await Model.findById(id);\n *     doc.increment();\n *     await doc.save();\n *\n * @see versionKeys https://mongoosejs.com/docs/guide.html#versionKey\n * @memberOf Model\n * @method increment\n * @api public\n */\n\nModel.prototype.increment = increment;\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n  if (this._doc._id === void 0) {\n    return new MongooseError('No _id found on document!');\n  }\n  return where;\n};\n\n/**\n * Delete this document from the db.\n *\n * #### Example:\n *\n *     await product.deleteOne();\n *     await Product.findById(product._id); // null\n *\n * @return {Query} Query\n * @api public\n */\n\nModel.prototype.deleteOne = function deleteOne(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n  if (!options) {\n    options = {};\n  }\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  const self = this;\n  const where = this.$__where();\n  if (where instanceof Error) {\n    throw where;\n  }\n  const query = self.constructor.deleteOne(where, options);\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n  query.pre(function queryPreDeleteOne(cb) {\n    self.constructor._middleware.execPre('deleteOne', self, [self], cb);\n  });\n  query.pre(function callSubdocPreHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPre('deleteOne', subdoc, [subdoc], cb);\n    }, cb);\n  });\n  query.pre(function skipIfAlreadyDeleted(cb) {\n    if (self.$__.isDeleted) {\n      return cb(Kareem.skipWrappedFunction());\n    }\n    return cb();\n  });\n  query.post(function callSubdocPostHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPost('deleteOne', subdoc, [subdoc], {}, cb);\n    }, cb);\n  });\n  query.post(function queryPostDeleteOne(cb) {\n    self.constructor._middleware.execPost('deleteOne', self, [self], {}, cb);\n  });\n  return query;\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method $model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.$model = function $model(name) {\n  if (arguments.length === 0) {\n    return this.constructor;\n  }\n  return this[modelDbSymbol].model(name);\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.model = Model.prototype.$model;\n\n/**\n * Returns a document with `_id` only if at least one document exists in the database that matches\n * the given `filter`, and `null` otherwise.\n *\n * Under the hood, `MyModel.exists({ answer: 42 })` is equivalent to\n * `MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean()`\n *\n * #### Example:\n *\n *     await Character.deleteMany({});\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     await Character.exists({ name: /picard/i }); // { _id: ... }\n *     await Character.exists({ name: /riker/i }); // null\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * @param {Object} filter\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n */\n\nModel.exists = function exists(filter, options) {\n  _checkContext(this, 'exists');\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.exists() no longer accepts a callback');\n  }\n  const query = this.findOne(filter).select({\n    _id: 1\n  }).lean().setOptions(options);\n  return query;\n};\n\n/**\n * Adds a discriminator type.\n *\n * #### Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     const PersonSchema = new BaseSchema();\n *     const BossSchema = new BaseSchema({ department: String });\n *\n *     const Person = mongoose.model('Person', PersonSchema);\n *     const Boss = Person.discriminator('Boss', BossSchema);\n *     new Boss().__t; // \"Boss\". `__t` is the default `discriminatorKey`\n *\n *     const employeeSchema = new Schema({ boss: ObjectId });\n *     const Employee = Person.discriminator('Employee', employeeSchema, 'staff');\n *     new Employee().__t; // \"staff\" because of 3rd argument above\n *\n * @param {String} name discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {Object|String} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @param {Boolean} [options.overwriteModels=false] by default, Mongoose does not allow you to define a discriminator with the same name as another discriminator. Set this to allow overwriting discriminators with the same name.\n * @param {Boolean} [options.mergeHooks=true] By default, Mongoose merges the base schema's hooks with the discriminator schema's hooks. Set this option to `false` to make Mongoose use the discriminator schema's hooks instead.\n * @param {Boolean} [options.mergePlugins=true] By default, Mongoose merges the base schema's plugins with the discriminator schema's plugins. Set this option to `false` to make Mongoose use the discriminator schema's plugins instead.\n * @return {Model} The newly created discriminator model\n * @api public\n */\n\nModel.discriminator = function (name, schema, options) {\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new MongooseError('The provided class ' + name + ' must extend Model');\n    }\n  }\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean' ? options.clone : true;\n  const mergePlugins = typeof options.mergePlugins === 'boolean' ? options.mergePlugins : true;\n  _checkContext(this, 'discriminator');\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema instanceof Schema && clone) {\n    schema = schema.clone();\n  }\n  schema = discriminator(this, name, schema, value, mergePlugins, options.mergeHooks);\n  if (this.db.models[name] && !schema.options.overwriteModels) {\n    throw new OverwriteModelError(name);\n  }\n  schema.$isRootDiscriminator = true;\n  schema.$globalPluginsApplied = true;\n  model = this.db.model(model || name, schema, this.$__collection.name);\n  this.discriminators[name] = model;\n  const d = this.discriminators[name];\n  Object.setPrototypeOf(d.prototype, this.prototype);\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n  if (this[subclassedSymbol] != null) {\n    for (const submodel of this[subclassedSymbol]) {\n      submodel.discriminators = submodel.discriminators || {};\n      submodel.discriminators[name] = model.__subclass(model.db, schema, submodel.collection.name);\n    }\n  }\n  return d;\n};\n\n/**\n * Make sure `this` is a model\n * @api private\n */\n\nfunction _checkContext(ctx, fnName) {\n  // Check context, because it is easy to mistakenly type\n  // `new Model.discriminator()` and get an incomprehensible error\n  if (ctx == null || ctx === global) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' + 'model as `this`. Make sure you are calling `MyModel.' + fnName + '()` ' + 'where `MyModel` is a Mongoose model.');\n  } else if (ctx[modelSymbol] == null) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' + 'model as `this`. Make sure you are not calling ' + '`new Model.' + fnName + '()`');\n  }\n}\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (const i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * This function is responsible for initializing the underlying connection in MongoDB based on schema options.\n * This function performs the following operations:\n *\n * - `createCollection()` unless [`autoCreate`](https://mongoosejs.com/docs/guide.html#autoCreate) option is turned off\n * - `ensureIndexes()` unless [`autoIndex`](https://mongoosejs.com/docs/guide.html#autoIndex) option is turned off\n * - `createSearchIndex()` on all schema search indexes if `autoSearchIndex` is enabled.\n *\n * Mongoose calls this function automatically when a model is a created using\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) or\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()), so you\n * don't need to call `init()` to trigger index builds.\n *\n * However, you _may_ need to call `init()`  to get back a promise that will resolve when your indexes are finished.\n * Calling `await Model.init()` is helpful if you need to wait for indexes to build before continuing.\n * For example, if you want to wait for unique indexes to build before continuing with a test case.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     await Event.init();\n *     console.log('Indexes are done building!');\n *\n * @api public\n * @returns {Promise}\n */\n\nModel.init = function init() {\n  _checkContext(this, 'init');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.init() no longer accepts a callback');\n  }\n  this.schema.emit('init', this);\n  if (this.$init != null) {\n    return this.$init;\n  }\n  const conn = this.db;\n  const _ensureIndexes = async () => {\n    const autoIndex = utils.getOption('autoIndex', this.schema.options, conn.config, conn.base.options);\n    if (!autoIndex) {\n      return;\n    }\n    return await this.ensureIndexes({\n      _automatic: true\n    });\n  };\n  const _createSearchIndexes = async () => {\n    const autoSearchIndex = utils.getOption('autoSearchIndex', this.schema.options, conn.config, conn.base.options);\n    if (!autoSearchIndex) {\n      return;\n    }\n    const results = [];\n    for (const searchIndex of this.schema._searchIndexes) {\n      results.push(await this.createSearchIndex(searchIndex));\n    }\n    return results;\n  };\n  const _createCollection = async () => {\n    if ((conn.readyState === STATES.connecting || conn.readyState === STATES.disconnected) && conn._shouldBufferCommands()) {\n      await new Promise(resolve => {\n        conn._queue.push({\n          fn: resolve\n        });\n      });\n    }\n    const autoCreate = utils.getOption('autoCreate', this.schema.options, conn.config, conn.base.options);\n    if (!autoCreate) {\n      return;\n    }\n    return await this.createCollection();\n  };\n  this.$init = _createCollection().then(() => _ensureIndexes()).then(() => _createSearchIndexes());\n  const _catch = this.$init.catch;\n  const _this = this;\n  this.$init.catch = function () {\n    _this.$caught = true;\n    return _catch.apply(_this.$init, arguments);\n  };\n  return this.$init;\n};\n\n/**\n * Create the collection for this model. By default, if no indexes are specified,\n * mongoose will not create the collection for the model until any documents are\n * created. Use this method to create the collection explicitly.\n *\n * Note 1: You may need to call this before starting a transaction\n * See https://www.mongodb.com/docs/manual/core/transactions/#transactions-and-operations\n *\n * Note 2: You don't have to call this if your schema contains index or unique field.\n * In that case, just use `Model.init()`\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String })\n *     const User = mongoose.model('User', userSchema);\n *\n *     User.createCollection().then(function(collection) {\n *       console.log('Collection is created!');\n *     });\n *\n * @api public\n * @param {Object} [options] see [MongoDB driver docs](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n * @returns {Promise}\n */\n\nModel.createCollection = async function createCollection(options) {\n  _checkContext(this, 'createCollection');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createCollection() no longer accepts a callback');\n  }\n  const shouldSkip = await new Promise((resolve, reject) => {\n    this.hooks.execPre('createCollection', this, [options], err => {\n      if (err != null) {\n        if (err instanceof Kareem.skipWrappedFunction) {\n          return resolve(true);\n        }\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  const collectionOptions = this && this.schema && this.schema.options && this.schema.options.collectionOptions;\n  if (collectionOptions != null) {\n    options = Object.assign({}, collectionOptions, options);\n  }\n  const schemaCollation = this && this.schema && this.schema.options && this.schema.options.collation;\n  if (schemaCollation != null) {\n    options = Object.assign({\n      collation: schemaCollation\n    }, options);\n  }\n  const capped = this && this.schema && this.schema.options && this.schema.options.capped;\n  if (capped != null) {\n    if (typeof capped === 'number') {\n      options = Object.assign({\n        capped: true,\n        size: capped\n      }, options);\n    } else if (typeof capped === 'object') {\n      options = Object.assign({\n        capped: true\n      }, capped, options);\n    }\n  }\n  const timeseries = this && this.schema && this.schema.options && this.schema.options.timeseries;\n  if (timeseries != null) {\n    options = Object.assign({\n      timeseries\n    }, options);\n    if (options.expireAfterSeconds != null) {\n      // do nothing\n    } else if (options.expires != null) {\n      utils.expires(options);\n    } else if (this.schema.options.expireAfterSeconds != null) {\n      options.expireAfterSeconds = this.schema.options.expireAfterSeconds;\n    } else if (this.schema.options.expires != null) {\n      options.expires = this.schema.options.expires;\n      utils.expires(options);\n    }\n  }\n  const clusteredIndex = this && this.schema && this.schema.options && this.schema.options.clusteredIndex;\n  if (clusteredIndex != null) {\n    options = Object.assign({\n      clusteredIndex: {\n        ...clusteredIndex,\n        unique: true\n      }\n    }, options);\n  }\n  try {\n    if (!shouldSkip) {\n      await this.db.createCollection(this.$__collection.collectionName, options);\n    }\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      await new Promise((resolve, reject) => {\n        const _opts = {\n          error: err\n        };\n        this.hooks.execPost('createCollection', this, [null], _opts, err => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n  }\n  await new Promise((resolve, reject) => {\n    this.hooks.execPost('createCollection', this, [this.$__collection], err => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  return this.$__collection;\n};\n\n/**\n * Makes the indexes in MongoDB match the indexes defined in this model's\n * schema. This function will drop any indexes that are not defined in\n * the model's schema except the `_id` index, and build any indexes that\n * are in your schema but not in MongoDB.\n *\n * See the [introductory blog post](https://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes)\n * for more information.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.collection.createIndex({ age: 1 }); // Index is not in schema\n *     // Will drop the 'age' index and create an index on `name`\n *     await Customer.syncIndexes();\n *\n * You should be careful about running `syncIndexes()` on production applications under heavy load,\n * because index builds are expensive operations, and unexpected index drops can lead to degraded\n * performance. Before running `syncIndexes()`, you can use the [`diffIndexes()` function](#Model.diffIndexes())\n * to check what indexes `syncIndexes()` will drop and create.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options] options to pass to `ensureIndexes()`\n * @param {Boolean} [options.background=null] if specified, overrides each index's `background` property\n * @return {Promise}\n * @api public\n */\n\nModel.syncIndexes = async function syncIndexes(options) {\n  _checkContext(this, 'syncIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n  const model = this;\n  try {\n    await model.createCollection();\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n  const diffIndexesResult = await model.diffIndexes();\n  const dropped = await model.cleanIndexes({\n    ...options,\n    toDrop: diffIndexesResult.toDrop\n  });\n  await model.createIndexes({\n    ...options,\n    toCreate: diffIndexesResult.toCreate\n  });\n  return dropped;\n};\n\n/**\n * Create an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/).\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.createSearchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *\n * @param {Object} description index options, including `name` and `definition`\n * @param {String} description.name\n * @param {Object} description.definition\n * @return {Promise}\n * @api public\n */\n\nModel.createSearchIndex = async function createSearchIndex(description) {\n  _checkContext(this, 'createSearchIndex');\n  return await this.$__collection.createSearchIndex(description);\n};\n\n/**\n * Update an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/).\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.updateSearchIndex('test', { mappings: { dynamic: true } });\n *\n * @param {String} name\n * @param {Object} definition\n * @return {Promise}\n * @api public\n */\n\nModel.updateSearchIndex = async function updateSearchIndex(name, definition) {\n  _checkContext(this, 'updateSearchIndex');\n  return await this.$__collection.updateSearchIndex(name, definition);\n};\n\n/**\n * Delete an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) by name.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.dropSearchIndex('test');\n *\n * @param {String} name\n * @return {Promise}\n * @api public\n */\n\nModel.dropSearchIndex = async function dropSearchIndex(name) {\n  _checkContext(this, 'dropSearchIndex');\n  return await this.$__collection.dropSearchIndex(name);\n};\n\n/**\n * List all [Atlas search indexes](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) on this model's collection.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *\n *     await Customer.createSearchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *     const res = await Customer.listSearchIndexes(); // Includes `[{ name: 'test' }]`\n *\n * @param {Object} [options]\n * @return {Promise<Array>}\n * @api public\n */\n\nModel.listSearchIndexes = async function listSearchIndexes(options) {\n  _checkContext(this, 'listSearchIndexes');\n  const cursor = await this.$__collection.listSearchIndexes(options);\n  return await cursor.toArray();\n};\n\n/**\n * Does a dry-run of `Model.syncIndexes()`, returning the indexes that `syncIndexes()` would drop and create if you were to run `syncIndexes()`.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options]\n * @return {Promise<Object>} contains the indexes that would be dropped in MongoDB and indexes that would be created in MongoDB as `{ toDrop: string[], toCreate: string[] }`.\n */\n\nModel.diffIndexes = async function diffIndexes() {\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n  const model = this;\n  let dbIndexes = await model.listIndexes().catch(err => {\n    if (err.codeName == 'NamespaceNotFound') {\n      return undefined;\n    }\n    throw err;\n  });\n  if (dbIndexes === undefined) {\n    dbIndexes = [];\n  }\n  dbIndexes = getRelatedDBIndexes(model, dbIndexes);\n  const schema = model.schema;\n  const schemaIndexes = getRelatedSchemaIndexes(model, schema.indexes());\n  const toDrop = getIndexesToDrop(schema, schemaIndexes, dbIndexes);\n  const toCreate = getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop);\n  return {\n    toDrop,\n    toCreate\n  };\n};\nfunction getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop) {\n  const toCreate = [];\n  for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n    let found = false;\n    const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n    for (const index of dbIndexes) {\n      if (isDefaultIdIndex(index)) {\n        continue;\n      }\n      if (isIndexEqual(schemaIndexKeysObject, options, index) && !toDrop.includes(index.name)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      toCreate.push(schemaIndexKeysObject);\n    }\n  }\n  return toCreate;\n}\nfunction getIndexesToDrop(schema, schemaIndexes, dbIndexes) {\n  const toDrop = [];\n  for (const dbIndex of dbIndexes) {\n    let found = false;\n    // Never try to drop `_id` index, MongoDB server doesn't allow it\n    if (isDefaultIdIndex(dbIndex)) {\n      continue;\n    }\n    for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n      const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n      applySchemaCollation(schemaIndexKeysObject, options, schema.options);\n      if (isIndexEqual(schemaIndexKeysObject, options, dbIndex)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      toDrop.push(dbIndex.name);\n    }\n  }\n  return toDrop;\n}\n/**\n * Deletes all indexes that aren't defined in this model's schema. Used by\n * `syncIndexes()`.\n *\n * The returned promise resolves to a list of the dropped indexes' names as an array\n *\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.cleanIndexes = async function cleanIndexes(options) {\n  _checkContext(this, 'cleanIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.cleanIndexes() no longer accepts a callback');\n  }\n  const model = this;\n  const collection = model.$__collection;\n  if (Array.isArray(options && options.toDrop)) {\n    const res = await _dropIndexes(options.toDrop, collection);\n    return res;\n  }\n  const res = await model.diffIndexes();\n  return await _dropIndexes(res.toDrop, collection);\n};\nasync function _dropIndexes(toDrop, collection) {\n  if (toDrop.length === 0) {\n    return [];\n  }\n  await Promise.all(toDrop.map(indexName => collection.dropIndex(indexName)));\n  return toDrop;\n}\n\n/**\n * Lists the indexes currently defined in MongoDB. This may or may not be\n * the same as the indexes defined in your schema depending on whether you\n * use the [`autoIndex` option](https://mongoosejs.com/docs/guide.html#autoIndex) and if you\n * build indexes manually.\n *\n * @return {Promise}\n * @api public\n */\n\nModel.listIndexes = async function listIndexes() {\n  _checkContext(this, 'listIndexes');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.listIndexes() no longer accepts a callback');\n  }\n  if (this.$__collection.buffer) {\n    await new Promise(resolve => {\n      this.$__collection.addQueue(resolve);\n    });\n  }\n  return this.$__collection.listIndexes().toArray();\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * #### Example:\n *\n *     await Event.ensureIndexes();\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     });\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = async function ensureIndexes(options) {\n  _checkContext(this, 'ensureIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.ensureIndexes() no longer accepts a callback');\n  }\n  await new Promise((resolve, reject) => {\n    _ensureIndexes(this, options, err => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createIndex)\n * function.\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = async function createIndexes(options) {\n  _checkContext(this, 'createIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createIndexes() no longer accepts a callback');\n  }\n  return this.ensureIndexes(options);\n};\n\n/*!\n * ignore\n */\n\nfunction _ensureIndexes(model, options, callback) {\n  const indexes = model.schema.indexes();\n  let indexError;\n  options = options || {};\n  const done = function (err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err || indexError);\n    callback && callback(err || indexError);\n  };\n  for (const index of indexes) {\n    if (isDefaultIdIndex(index)) {\n      utils.warn('mongoose: Cannot specify a custom index on `_id` for ' + 'model name \"' + model.modelName + '\", ' + 'MongoDB does not allow overwriting the default `_id` index. See ' + 'https://bit.ly/mongodb-id-index');\n    }\n  }\n  if (!indexes.length) {\n    immediate(function () {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  const indexSingleDone = function (err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  const indexSingleStart = function (fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n  const baseSchema = model.schema._baseSchema;\n  const baseSchemaIndexes = baseSchema ? baseSchema.indexes() : [];\n  immediate(function () {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n  function create() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false || model.schema.options.autoIndex == null && model.db.config.autoIndex === false) {\n        return done();\n      }\n    }\n    const index = indexes.shift();\n    if (!index) {\n      return done();\n    }\n    if (options._automatic && index[1]._autoIndex === false) {\n      return create();\n    }\n    if (baseSchemaIndexes.find(i => utils.deepEqual(i, index))) {\n      return create();\n    }\n    const indexFields = clone(index[0]);\n    const indexOptions = clone(index[1]);\n    delete indexOptions._autoIndex;\n    decorateDiscriminatorIndexOptions(model.schema, indexOptions);\n    applyWriteConcern(model.schema, indexOptions);\n    applySchemaCollation(indexFields, indexOptions, model.schema.options);\n    indexSingleStart(indexFields, options);\n    if ('background' in options) {\n      indexOptions.background = options.background;\n    }\n    if ('toCreate' in options) {\n      if (options.toCreate.length === 0) {\n        return done();\n      }\n    }\n    model.collection.createIndex(indexFields, indexOptions).then(name => {\n      indexSingleDone(null, indexFields, indexOptions, name);\n      create();\n    }, err => {\n      if (!indexError) {\n        indexError = err;\n      }\n      if (!model.$caught) {\n        model.emit('error', err);\n      }\n      indexSingleDone(err, indexFields, indexOptions);\n      create();\n    });\n  }\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/**\n * Connection instance the model uses.\n *\n * @property db\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/**\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Internal collection the model uses.\n *\n * @property collection\n * @api private\n * @memberOf Model\n */\nModel.$__collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * #### Example:\n *\n *     await Character.find(Character.translateAliases({\n *        '名': 'Eddard Stark' // Alias for 'name'\n *     });\n *\n * By default, `translateAliases()` overwrites raw fields with aliased fields.\n * So if `n` is an alias for `name`, `{ n: 'alias', name: 'raw' }` will resolve to `{ name: 'alias' }`.\n * However, you can set the `errorOnDuplicates` option to throw an error if there are potentially conflicting paths.\n * The `translateAliases` option for queries uses `errorOnDuplicates`.\n *\n * #### Note:\n *\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} fields fields/conditions that may contain aliased keys\n * @param {Boolean} [errorOnDuplicates] if true, throw an error if there's both a key and an alias for that key in `fields`\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields, errorOnDuplicates) {\n  _checkContext(this, 'translateAliases');\n  const translate = (key, value) => {\n    let alias;\n    const translated = [];\n    const fieldKeys = key.split('.');\n    let currentSchema = this.schema;\n    for (const i in fieldKeys) {\n      const name = fieldKeys[i];\n      if (currentSchema && currentSchema.aliases[name]) {\n        alias = currentSchema.aliases[name];\n        if (errorOnDuplicates && alias in fields) {\n          throw new MongooseError(`Provided object has both field \"${name}\" and its alias \"${alias}\"`);\n        }\n        // Alias found,\n        translated.push(alias);\n      } else {\n        alias = name;\n        // Alias not found, so treat as un-aliased key\n        translated.push(name);\n      }\n\n      // Check if aliased path is a schema\n      if (currentSchema && currentSchema.paths[alias]) {\n        currentSchema = currentSchema.paths[alias].schema;\n      } else currentSchema = null;\n    }\n    const translatedKey = translated.join('.');\n    if (fields instanceof Map) fields.set(translatedKey, value);else fields[translatedKey] = value;\n    if (translatedKey !== key) {\n      // We'll be using the translated key instead\n      if (fields instanceof Map) {\n        // Delete from map\n        fields.delete(key);\n      } else {\n        // Delete from object\n        delete fields[key]; // We'll be using the translated key instead\n      }\n    }\n    return fields;\n  };\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    if (fields instanceof Map) {\n      // A Map was supplied\n      for (const field of new Map(fields)) {\n        fields = translate(field[0], field[1]);\n      }\n    } else {\n      // Infer a regular object was supplied\n      for (const key of Object.keys(fields)) {\n        fields = translate(key, fields[key]);\n        if (key[0] === '$') {\n          if (Array.isArray(fields[key])) {\n            for (const i in fields[key]) {\n              // Recursively translate nested queries\n              fields[key][i] = this.translateAliases(fields[key][i]);\n            }\n          } else {\n            this.translateAliases(fields[key]);\n          }\n        }\n      }\n    }\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * It returns an object with the property `deletedCount` indicating how many documents were deleted.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' }); // returns {deletedCount: 1}\n *\n * #### Note:\n *\n * This function triggers `deleteOne` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, options) {\n  _checkContext(this, 'deleteOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n  return mq.deleteOne(conditions);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * It returns an object with the property `deletedCount` containing the number of documents deleted.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }); // returns {deletedCount: x} where x is the number of documents deleted.\n *\n * #### Note:\n *\n * This function triggers `deleteMany` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, options) {\n  _checkContext(this, 'deleteMany');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.deleteMany() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n  return mq.deleteMany(conditions);\n};\n\n/**\n * Finds documents.\n *\n * Mongoose casts the `filter` to match the model's schema before the command is sent.\n * See our [query casting tutorial](https://mongoosejs.com/docs/tutorials/query_casting.html) for\n * more information on how Mongoose casts `filter`.\n *\n * #### Example:\n *\n *     // find all documents\n *     await MyModel.find({});\n *\n *     // find all documents named john and at least 18\n *     await MyModel.find({ name: 'john', age: { $gte: 18 } }).exec();\n *\n *     // executes, name LIKE john and only selecting the \"name\" and \"friends\" fields\n *     await MyModel.find({ name: /john/i }, 'name friends').exec();\n *\n *     // passing options\n *     await MyModel.find({ name: /john/i }, null, { skip: 10 }).exec();\n *\n * @param {Object|ObjectId} filter\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see query casting https://mongoosejs.com/docs/tutorials/query_casting.html\n * @api public\n */\n\nModel.find = function find(conditions, projection, options) {\n  _checkContext(this, 'find');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.find() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  return mq.find(conditions);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * #### Example:\n *\n *     // Find the adventure with the given `id`, or `null` if not found\n *     await Adventure.findById(id).exec();\n *\n *     // select only the adventures name and length\n *     await Adventure.findById(id, 'name length').exec();\n *\n * @param {Any} id value of `_id` to query by\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @see findById in Mongoose https://masteringjs.io/tutorials/mongoose/find-by-id\n * @api public\n */\n\nModel.findById = function findById(id, projection, options) {\n  _checkContext(this, 'findById');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findById() no longer accepts a callback');\n  }\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n  return this.findOne({\n    _id: id\n  }, projection, options);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * #### Example:\n *\n *     // Find one adventure whose `country` is 'Croatia', otherwise `null`\n *     await Adventure.findOne({ country: 'Croatia' }).exec();\n *\n *     // Model.findOne() no longer accepts a callback\n *\n *     // Select only the adventures name and length\n *     await Adventure.findOne({ country: 'Croatia' }, 'name length').exec();\n *\n * @param {Object} [conditions]\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options) {\n  _checkContext(this, 'findOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOne() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  return mq.findOne(conditions);\n};\n\n/**\n * Estimates the number of documents in the MongoDB collection. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * #### Example:\n *\n *     const numAdventures = await Adventure.estimatedDocumentCount();\n *\n * @param {Object} [options]\n * @return {Query}\n * @api public\n */\n\nModel.estimatedDocumentCount = function estimatedDocumentCount(options) {\n  _checkContext(this, 'estimatedDocumentCount');\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  return mq.estimatedDocumentCount(options);\n};\n\n/**\n * Counts number of documents matching `filter` in a database collection.\n *\n * #### Example:\n *\n *     Adventure.countDocuments({ type: 'jungle' }, function (err, count) {\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * If you want to count all documents in a large collection,\n * use the [`estimatedDocumentCount()` function](https://mongoosejs.com/docs/api/model.html#Model.estimatedDocumentCount())\n * instead. If you call `countDocuments({})`, MongoDB will always execute\n * a full collection scan and **not** use any indexes.\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} filter\n * @return {Query}\n * @api public\n */\n\nModel.countDocuments = function countDocuments(conditions, options) {\n  _checkContext(this, 'countDocuments');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.countDocuments() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  if (options != null) {\n    mq.setOptions(options);\n  }\n  return mq.countDocuments(conditions);\n};\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * #### Example:\n *\n *     const query = Link.distinct('url');\n *     query.exec();\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions) {\n  _checkContext(this, 'distinct');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.distinct() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  return mq.distinct(field, conditions);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({ age: { $gte: 21, $lte: 65 } });\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec();\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  _checkContext(this, 'where');\n  void val; // eslint\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where https://mongoosejs.com/docs/api/query.html#Query.prototype.$where\n * @api public\n */\n\nModel.$where = function $where() {\n  _checkContext(this, '$where');\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes if `callback` is passed else a Query object is returned.\n *\n * #### Example:\n *\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     const query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation that\n * you can enable by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id);\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.fields] Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Tutorial https://mongoosejs.com/docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findOneAndUpdate = function (conditions, update, options) {\n  _checkContext(this, 'findOneAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndUpdate() no longer accepts a callback');\n  }\n  if (arguments.length === 1) {\n    update = conditions;\n    conditions = null;\n    options = null;\n  }\n  let fields;\n  if (options) {\n    fields = options.fields || options.projection;\n  }\n  update = clone(update, {\n    depopulate: true,\n    _isNested: true\n  });\n  decorateUpdateWithVersionKey(update, options, this.schema.options.versionKey);\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n  return mq.findOneAndUpdate(conditions, update, options);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Example:\n *\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Model.findOneAndUpdate https://mongoosejs.com/docs/api/model.html#Model.findOneAndUpdate()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findByIdAndUpdate = function (id, update, options) {\n  _checkContext(this, 'findByIdAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findByIdAndUpdate() no longer accepts a callback');\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n  return this.findOneAndUpdate.call(this, {\n    _id: id\n  }, update, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * #### Example:\n *\n *     A.findOneAndDelete(conditions, options)  // return Query\n *     A.findOneAndDelete(conditions) // returns Query\n *     A.findOneAndDelete()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndDelete = function (conditions, options) {\n  _checkContext(this, 'findOneAndDelete');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOneAndDelete() no longer accepts a callback');\n  }\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n  return mq.findOneAndDelete(conditions, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command by a document's _id field.\n * In other words, `findByIdAndDelete(id)` is a shorthand for\n * `findOneAndDelete({ _id: id })`.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndDelete https://mongoosejs.com/docs/api/model.html#Model.findOneAndDelete()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n */\n\nModel.findByIdAndDelete = function (id, options) {\n  _checkContext(this, 'findByIdAndDelete');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findByIdAndDelete() no longer accepts a callback');\n  }\n  return this.findOneAndDelete({\n    _id: id\n  }, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndReplace()` command.\n *\n * Finds a matching document, replaces it with the provided doc, and returns the document.\n *\n * This function triggers the following query middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Example:\n *\n *     A.findOneAndReplace(filter, replacement, options)  // return Query\n *     A.findOneAndReplace(filter, replacement) // returns Query\n *     A.findOneAndReplace()                    // returns Query\n *\n * @param {Object} filter Replace the first document that matches this filter\n * @param {Object} [replacement] Replace with this document\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndReplace = function (filter, replacement, options) {\n  _checkContext(this, 'findOneAndReplace');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndReplace() no longer accepts a callback');\n  }\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n  return mq.findOneAndReplace(filter, replacement, options);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * #### Example:\n *\n *     // Insert one new `Character` document\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     // Insert multiple new `Character` documents\n *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);\n *\n *     // Create a new character within a transaction. Note that you **must**\n *     // pass an array as the first parameter to `create()` if you want to\n *     // specify options.\n *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });\n *\n * @param {Array|Object} docs Documents to insert, as a spread or array\n * @param {Object} [options] Options passed down to `save()`. To specify `options`, `docs` **must** be an array, not a spread. See [Model.save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) for available options.\n * @param {Boolean} [options.ordered] saves the docs in series rather than parallel.\n * @param {Boolean} [options.aggregateErrors] Aggregate Errors instead of throwing the first one that occurs. Default: false\n * @return {Promise}\n * @api public\n */\n\nModel.create = async function create(doc, options) {\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.create() no longer accepts a callback');\n  }\n  _checkContext(this, 'create');\n  let args;\n  const discriminatorKey = this.schema.options.discriminatorKey;\n  if (Array.isArray(doc)) {\n    args = doc;\n    options = options != null && typeof options === 'object' ? options : {};\n  } else {\n    const last = arguments[arguments.length - 1];\n    options = {};\n    const hasCallback = typeof last === 'function' || typeof options === 'function' || typeof arguments[2] === 'function';\n    if (hasCallback) {\n      throw new MongooseError('Model.create() no longer accepts a callback');\n    } else {\n      args = [...arguments];\n      // For backwards compatibility with 6.x, because of gh-5061 Mongoose 6.x and\n      // older would treat a falsy last arg as a callback. We don't want to throw\n      // an error here, because it would look strange if `Test.create({}, void 0)`\n      // threw a callback error. But we also don't want to create an unnecessary document.\n      if (args.length > 1 && !last) {\n        args.pop();\n      }\n    }\n    if (args.length === 2 && args[0] != null && args[1] != null && args[0].session == null && last && getConstructorName(last.session) === 'ClientSession' && !this.schema.path('session')) {\n      // Probably means the user is running into the common mistake of trying\n      // to use a spread to specify options, see gh-7535\n      utils.warn('WARNING: to pass a `session` to `Model.create()` in ' + 'Mongoose, you **must** pass an array as the first argument. See: ' + 'https://mongoosejs.com/docs/api/model.html#Model.create()');\n    }\n  }\n  if (args.length === 0) {\n    return Array.isArray(doc) ? [] : null;\n  }\n  let res = [];\n  const immediateError = typeof options.aggregateErrors === 'boolean' ? !options.aggregateErrors : true;\n  delete options.aggregateErrors; // dont pass on the option to \"$save\"\n\n  if (options.ordered) {\n    for (let i = 0; i < args.length; i++) {\n      try {\n        const doc = args[i];\n        const Model = this.discriminators && doc[discriminatorKey] != null ? this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) : this;\n        if (Model == null) {\n          throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` + `found for model \"${this.modelName}\"`);\n        }\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n        await toSave.$save(options);\n        res.push(toSave);\n      } catch (err) {\n        if (!immediateError) {\n          res.push(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return res;\n  } else if (!immediateError) {\n    res = await Promise.allSettled(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ? this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) : this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` + `found for model \"${this.modelName}\"`);\n      }\n      let toSave = doc;\n      if (!(toSave instanceof Model)) {\n        toSave = new Model(toSave);\n      }\n      await toSave.$save(options);\n      return toSave;\n    }));\n    res = res.map(result => result.status === 'fulfilled' ? result.value : result.reason);\n  } else {\n    let firstError = null;\n    res = await Promise.all(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ? this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) : this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` + `found for model \"${this.modelName}\"`);\n      }\n      try {\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n        await toSave.$save(options);\n        return toSave;\n      } catch (err) {\n        if (!firstError) {\n          firstError = err;\n        }\n      }\n    }));\n    if (firstError) {\n      throw firstError;\n    }\n  }\n  if (!Array.isArray(doc) && args.length === 1) {\n    return res[0];\n  }\n  return res;\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://www.mongodb.com/docs/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * #### Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     const changeStream = Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#watch)\n * @param {Boolean} [options.hydrate=false] if true and `fullDocument: 'updateLookup'` is set, Mongoose will automatically hydrate `fullDocument` into a fully fledged Mongoose document\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n * @api public\n */\n\nModel.watch = function (pipeline, options) {\n  _checkContext(this, 'watch');\n  const changeStreamThunk = cb => {\n    pipeline = pipeline || [];\n    prepareDiscriminatorPipeline(pipeline, this.schema, 'fullDocument');\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(() => {\n        if (this.closed) {\n          return;\n        }\n        const driverChangeStream = this.$__collection.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      });\n    } else {\n      const driverChangeStream = this.$__collection.watch(pipeline, options);\n      cb(null, driverChangeStream);\n    }\n  };\n  options = options || {};\n  options.model = this;\n  return new ChangeStream(changeStreamThunk, pipeline, options);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `MyModel.startSession()` is equivalent to calling `MyModel.db.startSession()`.\n *\n * This function does not trigger any middleware.\n *\n * #### Example:\n *\n *     const session = await Person.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nModel.startSession = function () {\n  _checkContext(this, 'startSession');\n  return this.db.startSession.apply(this.db, arguments);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * #### Example:\n *\n *     await Movies.insertMany([\n *       { name: 'Star Wars' },\n *       { name: 'The Empire Strikes Back' }\n *     ]);\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#insertMany)\n * @param {Boolean} [options.ordered=true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult=false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `true`, will return the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/InsertManyResult.html) with a `mongoose` property that contains `validationErrors` and `results` if this is an unordered `insertMany`.\n * @param {Boolean} [options.lean=false] if `true`, skips hydrating the documents. This means Mongoose will **not** cast or validate any of the documents passed to `insertMany()`. This option is useful if you need the extra performance, but comes with data integrity risk. Consider using with [`castObject()`](https://mongoosejs.com/docs/api/model.html#Model.castObject()).\n * @param {Number} [options.limit=null] this limits the number of documents being processed (validation/casting) by mongoose in parallel, this does **NOT** send the documents in batches to MongoDB. Use this option if you're processing a large number of documents and your app is running out of memory.\n * @param {String|Object|Array} [options.populate=null] populates the result documents. This option is a no-op if `rawResult` is set.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @return {Promise} resolving to the raw result from the MongoDB driver if `options.rawResult` was `true`, or the documents that passed validation, otherwise\n * @api public\n */\n\nModel.insertMany = async function insertMany(arr, options) {\n  _checkContext(this, 'insertMany');\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.insertMany() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    this.$__insertMany(arr, options, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * ignore\n *\n * @param {Array} arr\n * @param {Object} options\n * @param {Function} callback\n * @api private\n * @memberOf Model\n * @method $__insertMany\n * @static\n */\n\nModel.$__insertMany = function (arr, options, callback) {\n  const _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  callback = callback || utils.noop;\n  options = options || {};\n  const limit = options.limit || 1000;\n  const rawResult = !!options.rawResult;\n  const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  const throwOnValidationError = typeof options.throwOnValidationError === 'boolean' ? options.throwOnValidationError : false;\n  const lean = !!options.lean;\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n  const validationErrors = [];\n  const validationErrorsToOriginalOrder = new Map();\n  const results = ordered ? null : new Array(arr.length);\n  const toExecute = arr.map((doc, index) => callback => {\n    // If option `lean` is set to true bypass validation and hydration\n    if (lean) {\n      // we have to execute callback at the nextTick to be compatible\n      // with parallelLimit, as `results` variable has TDZ issue if we\n      // execute the callback synchronously\n      return immediate(() => callback(null, doc));\n    }\n    if (!(doc instanceof _this)) {\n      if (doc != null && typeof doc !== 'object') {\n        return callback(new ObjectParameterError(doc, 'arr.' + index, 'insertMany'));\n      }\n      try {\n        doc = new _this(doc);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n    if (options.session != null) {\n      doc.$session(options.session);\n    }\n    // If option `lean` is set to true bypass validation\n    if (lean) {\n      // we have to execute callback at the nextTick to be compatible\n      // with parallelLimit, as `results` variable has TDZ issue if we\n      // execute the callback synchronously\n      return immediate(() => callback(null, doc));\n    }\n    doc.$validate().then(() => {\n      callback(null, doc);\n    }, error => {\n      if (ordered === false) {\n        validationErrors.push(error);\n        validationErrorsToOriginalOrder.set(error, index);\n        results[index] = error;\n        return callback(null, null);\n      }\n      callback(error);\n    });\n  });\n  parallelLimit(toExecute, limit, function (error, docs) {\n    if (error) {\n      callback(error, null);\n      return;\n    }\n    const originalDocIndex = new Map();\n    const validDocIndexToOriginalIndex = new Map();\n    for (let i = 0; i < docs.length; ++i) {\n      originalDocIndex.set(docs[i], i);\n    }\n\n    // We filter all failed pre-validations by removing nulls\n    const docAttributes = docs.filter(function (doc) {\n      return doc != null;\n    });\n    for (let i = 0; i < docAttributes.length; ++i) {\n      validDocIndexToOriginalIndex.set(i, originalDocIndex.get(docAttributes[i]));\n    }\n\n    // Make sure validation errors are in the same order as the\n    // original documents, so if both doc1 and doc2 both fail validation,\n    // `Model.insertMany([doc1, doc2])` will always have doc1's validation\n    // error before doc2's. Re: gh-12791.\n    if (validationErrors.length > 0) {\n      validationErrors.sort((err1, err2) => {\n        return validationErrorsToOriginalOrder.get(err1) - validationErrorsToOriginalOrder.get(err2);\n      });\n    }\n\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length === 0) {\n      if (throwOnValidationError) {\n        return callback(new MongooseBulkWriteError(validationErrors, results, null, 'insertMany'));\n      }\n      if (rawResult) {\n        const res = {\n          acknowledged: true,\n          insertedCount: 0,\n          insertedIds: {},\n          mongoose: {\n            validationErrors: validationErrors\n          }\n        };\n        return callback(null, res);\n      }\n      callback(null, []);\n      return;\n    }\n    const docObjects = lean ? docAttributes : docAttributes.map(function (doc) {\n      if (doc.$__schema.options.versionKey) {\n        doc[doc.$__schema.options.versionKey] = 0;\n      }\n      const shouldSetTimestamps = (!options || options.timestamps !== false) && doc.initializeTimestamps && (!doc.$__ || doc.$__.timestamps !== false);\n      if (shouldSetTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n    _this.$__collection.insertMany(docObjects, options).then(res => {\n      if (!lean) {\n        for (const attribute of docAttributes) {\n          attribute.$__reset();\n          _setIsNew(attribute, false);\n        }\n      }\n      if (ordered === false && throwOnValidationError && validationErrors.length > 0) {\n        for (let i = 0; i < results.length; ++i) {\n          if (results[i] === void 0) {\n            results[i] = docs[i];\n          }\n        }\n        return callback(new MongooseBulkWriteError(validationErrors, results, res, 'insertMany'));\n      }\n      if (rawResult) {\n        if (ordered === false) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n\n          // Decorate with mongoose validation errors in case of unordered,\n          // because then still do `insertMany()`\n          res.mongoose = {\n            validationErrors: validationErrors,\n            results: results\n          };\n        }\n        return callback(null, res);\n      }\n      if (options.populate != null) {\n        return _this.populate(docAttributes, options.populate).then(docs => {\n          callback(null, docs);\n        }, err => {\n          if (err != null) {\n            err.insertedDocs = docAttributes;\n          }\n          throw err;\n        });\n      }\n      callback(null, docAttributes);\n    }, error => {\n      // `writeErrors` is a property reported by the MongoDB driver,\n      // just not if there's only 1 error.\n      if (error.writeErrors == null && (error.result && error.result.result && error.result.result.writeErrors) != null) {\n        error.writeErrors = error.result.result.writeErrors;\n      }\n\n      // `insertedDocs` is a Mongoose-specific property\n      const hasWriteErrors = error && error.writeErrors;\n      const erroredIndexes = new Set((error && error.writeErrors || []).map(err => err.index));\n      if (error.writeErrors != null) {\n        for (let i = 0; i < error.writeErrors.length; ++i) {\n          const originalIndex = validDocIndexToOriginalIndex.get(error.writeErrors[i].index);\n          error.writeErrors[i] = {\n            ...error.writeErrors[i],\n            index: originalIndex\n          };\n          if (!ordered) {\n            results[originalIndex] = error.writeErrors[i];\n          }\n        }\n      }\n      if (!ordered) {\n        for (let i = 0; i < results.length; ++i) {\n          if (results[i] === void 0) {\n            results[i] = docs[i];\n          }\n        }\n        error.results = results;\n      }\n      let firstErroredIndex = -1;\n      error.insertedDocs = docAttributes.filter((doc, i) => {\n        const isErrored = !hasWriteErrors || erroredIndexes.has(i);\n        if (ordered) {\n          if (firstErroredIndex > -1) {\n            return i < firstErroredIndex;\n          }\n          if (isErrored) {\n            firstErroredIndex = i;\n          }\n        }\n        return !isErrored;\n      }).map(function setIsNewForInsertedDoc(doc) {\n        if (lean) {\n          return doc;\n        }\n        doc.$__reset();\n        _setIsNew(doc, false);\n        return doc;\n      });\n      if (rawResult && ordered === false) {\n        error.mongoose = {\n          validationErrors: validationErrors,\n          results: results\n        };\n      }\n      callback(error, null);\n    });\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction _setIsNew(doc, val) {\n  doc.$isNew = val;\n  doc.$emit('isNew', val);\n  doc.constructor.emit('isNew', val);\n  const subdocs = doc.$getAllSubdocs();\n  for (const subdoc of subdocs) {\n    subdoc.$isNew = val;\n    subdoc.$emit('isNew', val);\n  }\n}\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (e.g.\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n * The only exception is [setting the `update` operator for `updateOne` or `updateMany` to a pipeline](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#updateone-and-updatemany): Mongoose does **not** cast update pipelines.\n *\n * This function does **not** trigger any middleware, neither `save()`, nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](https://mongoosejs.com/docs/api/model.html#Model.create()) instead.\n *\n * #### Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           filter: { name: 'Eddard Stark' }\n *         }\n *       }\n *     ]).then(res => {\n *      // Prints \"1 1 1\"\n *      console.log(res.insertedCount, res.modifiedCount, res.deletedCount);\n *     });\n *\n *     // Mongoose does **not** cast update pipelines, so no casting for the `update` option below.\n *     // Mongoose does still cast `filter`\n *     await Character.bulkWrite([{\n *       updateOne: {\n *         filter: { name: 'Annika Hansen' },\n *         update: [{ $set: { name: 7 } }] // Array means update pipeline, so Mongoose skips casting\n *       }\n *     }]);\n *\n * The [supported operations](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite) are:\n *\n * - `insertOne`\n * - `updateOne`\n * - `updateMany`\n * - `deleteOne`\n * - `deleteMany`\n * - `replaceOne`\n *\n * @param {Array} ops\n * @param {Object} [ops.insertOne.document] The document to insert\n * @param {Object} [ops.insertOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.filter] Update the first document that matches this filter\n * @param {Object} [ops.updateOne.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateOne.upsert=false] If true, insert a doc if none match\n * @param {Boolean} [ops.updateOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateOne.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.updateMany.filter] Update all the documents that match this filter\n * @param {Object} [ops.updateMany.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateMany.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Boolean} [ops.updateMany.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateMany.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateMany.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.deleteOne.filter] Delete the first document that matches this filter\n * @param {Object} [ops.deleteMany.filter] Delete all documents that match this filter\n * @param {Object} [ops.replaceOne.filter] Replace the first document that matches this filter\n * @param {Object} [ops.replaceOne.replacement] The replacement document\n * @param {Boolean} [ops.replaceOne.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Object} [ops.replaceOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [options]\n * @param {Boolean} [options.ordered=true] If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.\n * @param {Boolean} [options.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to any operations. Can be overridden at the operation-level.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n * @param {Boolean} [options.skipValidation=false] Set to true to skip Mongoose schema validation on bulk write operations. Mongoose currently runs validation on `insertOne` and `replaceOne` operations by default.\n * @param {Boolean} [options.bypassDocumentValidation=false] If true, disable [MongoDB server-side schema validation](https://www.mongodb.com/docs/manual/core/schema-validation/) for all writes in this bulk.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @param {Boolean} [options.strict=null] Overwrites the [`strict` option](https://mongoosejs.com/docs/guide.html#strict) on schema. If false, allows filtering and writing fields not defined in the schema for all writes in this bulk.\n * @return {Promise} resolves to a [`BulkWriteOpResult`](https://mongodb.github.io/node-mongodb-native/4.9/classes/BulkWriteResult.html) if the operation succeeds\n * @api public\n */\n\nModel.bulkWrite = async function bulkWrite(ops, options) {\n  _checkContext(this, 'bulkWrite');\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.bulkWrite() no longer accepts a callback');\n  }\n  options = options || {};\n  const shouldSkip = await new Promise((resolve, reject) => {\n    this.hooks.execPre('bulkWrite', this, [ops, options], err => {\n      if (err != null) {\n        if (err instanceof Kareem.skipWrappedFunction) {\n          return resolve(err);\n        }\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  if (shouldSkip) {\n    return shouldSkip.args[0];\n  }\n  const ordered = options.ordered == null ? true : options.ordered;\n  if (ops.length === 0) {\n    return getDefaultBulkwriteResult();\n  }\n  const validations = ops.map(op => castBulkWrite(this, op, options));\n  const asyncLocalStorage = this.db.base.transactionAsyncLocalStorage?.getStore();\n  if ((!options || !options.hasOwnProperty('session')) && asyncLocalStorage?.session != null) {\n    options = {\n      ...options,\n      session: asyncLocalStorage.session\n    };\n  }\n  let res = null;\n  if (ordered) {\n    await new Promise((resolve, reject) => {\n      each(validations, (fn, cb) => fn(cb), error => {\n        if (error) {\n          return reject(error);\n        }\n        resolve();\n      });\n    });\n    try {\n      res = await this.$__collection.bulkWrite(ops, options);\n    } catch (error) {\n      await new Promise((resolve, reject) => {\n        const _opts = {\n          error: error\n        };\n        this.hooks.execPost('bulkWrite', this, [null], _opts, err => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n  } else {\n    let remaining = validations.length;\n    let validOps = [];\n    let validationErrors = [];\n    const results = [];\n    await new Promise(resolve => {\n      for (let i = 0; i < validations.length; ++i) {\n        validations[i](err => {\n          if (err == null) {\n            validOps.push(i);\n          } else {\n            validationErrors.push({\n              index: i,\n              error: err\n            });\n            results[i] = err;\n          }\n          if (--remaining <= 0) {\n            resolve();\n          }\n        });\n      }\n    });\n    validationErrors = validationErrors.sort((v1, v2) => v1.index - v2.index).map(v => v.error);\n    const validOpIndexes = validOps;\n    validOps = validOps.sort().map(index => ops[index]);\n    if (validOps.length === 0) {\n      if (options.throwOnValidationError && validationErrors.length) {\n        throw new MongooseBulkWriteError(validationErrors, results, res, 'bulkWrite');\n      }\n      return getDefaultBulkwriteResult();\n    }\n    let error;\n    [res, error] = await this.$__collection.bulkWrite(validOps, options).then(res => [res, null]).catch(err => [null, err]);\n    if (error) {\n      if (validationErrors.length > 0) {\n        error.mongoose = error.mongoose || {};\n        error.mongoose.validationErrors = validationErrors;\n      }\n      await new Promise((resolve, reject) => {\n        const _opts = {\n          error: error\n        };\n        this.hooks.execPost('bulkWrite', this, [null], _opts, err => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n    for (let i = 0; i < validOpIndexes.length; ++i) {\n      results[validOpIndexes[i]] = null;\n    }\n    if (validationErrors.length > 0) {\n      if (options.throwOnValidationError) {\n        throw new MongooseBulkWriteError(validationErrors, results, res, 'bulkWrite');\n      } else {\n        res.mongoose = res.mongoose || {};\n        res.mongoose.validationErrors = validationErrors;\n        res.mongoose.results = results;\n      }\n    }\n  }\n  await new Promise((resolve, reject) => {\n    this.hooks.execPost('bulkWrite', this, [res], err => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  return res;\n};\n\n/**\n *  takes an array of documents, gets the changes and inserts/updates documents in the database\n *  according to whether or not the document is new, or whether it has changes or not.\n *\n * `bulkSave` uses `bulkWrite` under the hood, so it's mostly useful when dealing with many documents (10K+)\n *\n * @param {Array<Document>} documents\n * @param {Object} [options] options passed to the underlying `bulkWrite()`\n * @param {Boolean} [options.timestamps] defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n *\n */\nModel.bulkSave = async function bulkSave(documents, options) {\n  options = options || {};\n  if (options.timestamps != null) {\n    for (const document of documents) {\n      document.$__.saveOptions = document.$__.saveOptions || {};\n      document.$__.saveOptions.timestamps = options.timestamps;\n    }\n  } else {\n    for (const document of documents) {\n      if (document.$__.timestamps != null) {\n        document.$__.saveOptions = document.$__.saveOptions || {};\n        document.$__.saveOptions.timestamps = document.$__.timestamps;\n      }\n    }\n  }\n  await Promise.all(documents.map(buildPreSavePromise));\n  const writeOperations = this.buildBulkWriteOperations(documents, {\n    skipValidation: true,\n    timestamps: options.timestamps\n  });\n  const {\n    bulkWriteResult,\n    bulkWriteError\n  } = await this.bulkWrite(writeOperations, options).then(res => ({\n    bulkWriteResult: res,\n    bulkWriteError: null\n  }), err => ({\n    bulkWriteResult: null,\n    bulkWriteError: err\n  }));\n  await Promise.all(documents.map(async document => {\n    const documentError = bulkWriteError && bulkWriteError.writeErrors.find(writeError => {\n      const writeErrorDocumentId = writeError.err.op._id || writeError.err.op.q._id;\n      return writeErrorDocumentId.toString() === document._id.toString();\n    });\n    if (documentError == null) {\n      await handleSuccessfulWrite(document);\n    }\n  }));\n  if (bulkWriteError && bulkWriteError.writeErrors && bulkWriteError.writeErrors.length) {\n    throw bulkWriteError;\n  }\n  return bulkWriteResult;\n};\nfunction buildPreSavePromise(document) {\n  return new Promise((resolve, reject) => {\n    document.schema.s.hooks.execPre('save', document, err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\nfunction handleSuccessfulWrite(document) {\n  return new Promise((resolve, reject) => {\n    if (document.$isNew) {\n      _setIsNew(document, false);\n    }\n    document.$__reset();\n    document.schema.s.hooks.execPost('save', document, [document], {}, err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\n/**\n * Apply defaults to the given document or POJO.\n *\n * @param {Object|Document} obj object or document to apply defaults on\n * @returns {Object|Document}\n * @api public\n */\n\nModel.applyDefaults = function applyDefaults(doc) {\n  if (doc.$__ != null) {\n    applyDefaultsHelper(doc, doc.$__.fields, doc.$__.exclude);\n    for (const subdoc of doc.$getAllSubdocs()) {\n      applyDefaults(subdoc, subdoc.$__.fields, subdoc.$__.exclude);\n    }\n    return doc;\n  }\n  applyDefaultsToPOJO(doc, this.schema);\n  return doc;\n};\n\n/**\n * Cast the given POJO to the model's schema\n *\n * #### Example:\n *\n *     const Test = mongoose.model('Test', Schema({ num: Number }));\n *\n *     const obj = Test.castObject({ num: '42' });\n *     obj.num; // 42 as a number\n *\n *     Test.castObject({ num: 'not a number' }); // Throws a ValidationError\n *\n * @param {Object} obj object or document to cast\n * @param {Object} options options passed to castObject\n * @param {Boolean} options.ignoreCastErrors If set to `true` will not throw a ValidationError and only return values that were successfully cast.\n * @returns {Object} POJO casted to the model's schema\n * @throws {ValidationError} if casting failed for at least one path\n * @api public\n */\n\nModel.castObject = function castObject(obj, options) {\n  options = options || {};\n  const ret = {};\n  const schema = this.schema;\n  const paths = Object.keys(schema.paths);\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray) {\n      continue;\n    }\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n  let error = null;\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (schemaType == null) {\n      continue;\n    }\n    let val = get(obj, path, void 0);\n    if (val == null) {\n      continue;\n    }\n    const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = ret;\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      if (cur[pieces[i]] == null) {\n        cur[pieces[i]] = isNaN(pieces[i + 1]) ? {} : [];\n      }\n      cur = cur[pieces[i]];\n    }\n    if (schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    if (schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) {\n      try {\n        val = Model.castObject.call(schemaType.caster, val);\n      } catch (err) {\n        if (!options.ignoreCastErrors) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        continue;\n      }\n      cur[pieces[pieces.length - 1]] = val;\n      continue;\n    }\n    try {\n      val = schemaType.cast(val);\n      cur[pieces[pieces.length - 1]] = val;\n    } catch (err) {\n      if (!options.ignoreCastErrors) {\n        error = error || new ValidationError();\n        error.addError(path, err);\n      }\n      continue;\n    }\n  }\n  if (error != null) {\n    throw error;\n  }\n  return ret;\n};\n\n/**\n * Build bulk write operations for `bulkSave()`.\n *\n * @param {Array<Document>} documents The array of documents to build write operations of\n * @param {Object} options\n * @param {Boolean} options.skipValidation defaults to `false`, when set to true, building the write operations will bypass validating the documents.\n * @param {Boolean} options.timestamps defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @return {Array<Promise>} Returns a array of all Promises the function executes to be awaited.\n * @api private\n */\n\nModel.buildBulkWriteOperations = function buildBulkWriteOperations(documents, options) {\n  if (!Array.isArray(documents)) {\n    throw new Error(`bulkSave expects an array of documents to be passed, received \\`${documents}\\` instead`);\n  }\n  setDefaultOptions();\n  const discriminatorKey = this.schema.options.discriminatorKey;\n  const writeOperations = documents.reduce((accumulator, document, i) => {\n    if (!options.skipValidation) {\n      if (!(document instanceof Document)) {\n        throw new Error(`documents.${i} was not a mongoose document, documents must be an array of mongoose documents (instanceof mongoose.Document).`);\n      }\n      const validationError = document.validateSync();\n      if (validationError) {\n        throw validationError;\n      }\n    }\n    const isANewDocument = document.isNew;\n    if (isANewDocument) {\n      const writeOperation = {\n        insertOne: {\n          document\n        }\n      };\n      utils.injectTimestampsOption(writeOperation.insertOne, options.timestamps);\n      accumulator.push(writeOperation);\n      return accumulator;\n    }\n    const delta = document.$__delta();\n    const isDocumentWithChanges = delta != null && !utils.isEmptyObject(delta[0]);\n    if (isDocumentWithChanges) {\n      const where = document.$__where(delta[0]);\n      const changes = delta[1];\n      _applyCustomWhere(document, where);\n\n      // Set the discriminator key, so bulk write casting knows which\n      // schema to use re: gh-13907\n      if (document[discriminatorKey] != null && !(discriminatorKey in where)) {\n        where[discriminatorKey] = document[discriminatorKey];\n      }\n      document.$__version(where, delta);\n      const writeOperation = {\n        updateOne: {\n          filter: where,\n          update: changes\n        }\n      };\n      utils.injectTimestampsOption(writeOperation.updateOne, options.timestamps);\n      accumulator.push(writeOperation);\n      return accumulator;\n    }\n    return accumulator;\n  }, []);\n  return writeOperations;\n  function setDefaultOptions() {\n    options = options || {};\n    if (options.skipValidation == null) {\n      options.skipValidation = false;\n    }\n  }\n};\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * #### Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     const mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @param {Object|String|String[]} [projection] optional projection containing which fields should be selected for this document\n * @param {Object} [options] optional options\n * @param {Boolean} [options.setters=false] if true, apply schema setters when hydrating\n * @param {Boolean} [options.hydratedPopulatedDocs=false] if true, populates the docs if passing pre-populated data\n * @return {Document} document instance\n * @api public\n */\n\nModel.hydrate = function (obj, projection, options) {\n  _checkContext(this, 'hydrate');\n  if (projection != null) {\n    if (obj != null && obj.$__ != null) {\n      obj = obj.toObject(internalToObjectOptions);\n    }\n    obj = applyProjection(obj, projection);\n  }\n  const document = require('./queryHelpers').createModel(this, obj, projection);\n  document.$init(obj, options);\n  return document;\n};\n\n/**\n * Same as `updateOne()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} filter\n * @param {Object|Array} update. If array, this update will be treated as an update pipeline and not casted.\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options) {\n  _checkContext(this, 'updateMany');\n  return _update(this, 'updateMany', conditions, doc, options);\n};\n\n/**\n * Update _only_ the first document that matches `filter`.\n *\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using atomic operators like `$set`.\n *\n * #### Example:\n *\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} filter\n * @param {Object|Array} update. If array, this update will be treated as an update pipeline and not casted.\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options) {\n  _checkContext(this, 'updateOne');\n  return _update(this, 'updateOne', conditions, doc, options);\n};\n\n/**\n * Replace the existing document with the given document (no atomic operators like `$set`).\n *\n * #### Example:\n *\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options) {\n  _checkContext(this, 'replaceOne');\n  const versionKey = this && this.schema && this.schema.options && this.schema.options.versionKey || null;\n  if (versionKey && !doc[versionKey]) {\n    doc[versionKey] = 0;\n  }\n  return _update(this, 'replaceOne', conditions, doc, options);\n};\n\n/**\n * Common code for `updateOne()`, `updateMany()`, `replaceOne()`, and `update()`\n * because they need to do the same thing\n * @api private\n */\n\nfunction _update(model, op, conditions, doc, options) {\n  const mq = new model.Query({}, {}, model, model.collection);\n\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = clone(conditions);\n  }\n  options = typeof options === 'function' ? options : clone(options);\n  const versionKey = model && model.schema && model.schema.options && model.schema.options.versionKey || null;\n  decorateUpdateWithVersionKey(doc, options, versionKey);\n  return mq[op](conditions, doc, options);\n}\n\n/**\n * Performs [aggregations](https://www.mongodb.com/docs/manual/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function triggers the following middleware.\n *\n * - `aggregate()`\n *\n * #### Example:\n *\n *     // Find the max balance of all accounts\n *     const res = await Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]);\n *\n *     console.log(res); // [ { maxBalance: 98000 } ]\n *\n *     // Or use the aggregation pipeline builder.\n *     const res = await Users.aggregate().\n *       group({ _id: null, maxBalance: { $max: '$balance' } }).\n *       project('-id maxBalance').\n *       exec();\n *     console.log(res); // [ { maxBalance: 98 } ]\n *\n * #### Note:\n *\n * - Mongoose does **not** cast aggregation pipelines to the model's schema because `$project` and `$group` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the [mongoose-cast-aggregation plugin](https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation) to enable minimal casting for aggregation pipelines.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n *\n * #### More About Aggregations:\n *\n * - [Mongoose `Aggregate`](https://mongoosejs.com/docs/api/aggregate.html)\n * - [An Introduction to Mongoose Aggregate](https://masteringjs.io/tutorials/mongoose/aggregate)\n * - [MongoDB Aggregation docs](https://www.mongodb.com/docs/manual/applications/aggregation/)\n *\n * @see Aggregate https://mongoosejs.com/docs/api/aggregate.html#Aggregate()\n * @see MongoDB https://www.mongodb.com/docs/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Object} [options] aggregation options\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, options) {\n  _checkContext(this, 'aggregate');\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.aggregate() no longer accepts a callback');\n  }\n  const aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n  if (options != null) {\n    aggregate.option(options);\n  }\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n  return aggregate;\n};\n\n/**\n * Casts and validates the given object against this model's schema, passing the\n * given `context` to custom validators.\n *\n * #### Example:\n *\n *     const Model = mongoose.model('Test', Schema({\n *       name: { type: String, required: true },\n *       age: { type: Number, required: true }\n *     });\n *\n *     try {\n *       await Model.validate({ name: null }, ['name'])\n *     } catch (err) {\n *       err instanceof mongoose.Error.ValidationError; // true\n *       Object.keys(err.errors); // ['name']\n *     }\n *\n * @param {Object} obj\n * @param {Object|Array|String} pathsOrOptions\n * @param {Object} [context]\n * @return {Promise<Object>} casted and validated copy of `obj` if validation succeeded\n * @api public\n */\n\nModel.validate = async function validate(obj, pathsOrOptions, context) {\n  if (arguments.length < 3 || arguments.length === 3 && typeof arguments[2] === 'function') {\n    // For convenience, if we're validating a document or an object, make `context` default to\n    // the model so users don't have to always pass `context`, re: gh-10132, gh-10346\n    context = obj;\n  }\n  if (typeof context === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.validate() no longer accepts a callback');\n  }\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  if (schema.discriminators != null && obj != null && obj[discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[discriminatorKey]) || schema;\n  }\n  let paths = Object.keys(schema.paths);\n  if (pathsOrOptions != null) {\n    const _pathsToValidate = typeof pathsOrOptions === 'string' ? new Set(pathsOrOptions.split(' ')) : Array.isArray(pathsOrOptions) ? new Set(pathsOrOptions) : new Set(paths);\n    paths = paths.filter(p => {\n      if (pathsOrOptions.pathsToSkip) {\n        if (Array.isArray(pathsOrOptions.pathsToSkip)) {\n          if (pathsOrOptions.pathsToSkip.find(x => x == p)) {\n            return false;\n          }\n        } else if (typeof pathsOrOptions.pathsToSkip == 'string') {\n          if (pathsOrOptions.pathsToSkip.includes(p)) {\n            return false;\n          }\n        }\n      }\n      const pieces = p.split('.');\n      let cur = pieces[0];\n      for (const piece of pieces) {\n        if (_pathsToValidate.has(cur)) {\n          return true;\n        }\n        cur += '.' + piece;\n      }\n      return _pathsToValidate.has(p);\n    });\n  }\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray || schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n  let error = null;\n  paths = new Set(paths);\n  try {\n    obj = this.castObject(obj);\n  } catch (err) {\n    error = err;\n    for (const key of Object.keys(error.errors || {})) {\n      paths.delete(key);\n    }\n  }\n  let remaining = paths.size;\n  return new Promise((resolve, reject) => {\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (schemaType == null) {\n        _checkDone();\n        continue;\n      }\n      const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n      let cur = obj;\n      for (let i = 0; i < pieces.length - 1; ++i) {\n        cur = cur[pieces[i]];\n      }\n      const val = get(obj, path, void 0);\n      schemaType.doValidate(val, err => {\n        if (err) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        _checkDone();\n      }, context, {\n        path: path\n      });\n    }\n    function _checkDone() {\n      if (--remaining <= 0) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(obj);\n        }\n      }\n    }\n  });\n};\n\n/**\n * Populates document references.\n *\n * Changed in Mongoose 6: the model you call `populate()` on should be the\n * \"local field\" model, **not** the \"foreign field\" model.\n *\n * #### Available top-level options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n * - justOne: optional boolean, if true Mongoose will always set `path` to a document, or `null` if no document was found. If false, Mongoose will always set `path` to an array, which will be empty if no documents are found. Inferred from schema by default.\n * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.\n *\n * #### Example:\n *\n *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));\n *     const Person = mongoose.model('Person', new Schema({\n *       name: String,\n *       pet: { type: mongoose.ObjectId, ref: 'Dog' }\n *     }));\n *\n *     const pets = await Pet.create([\n *       { name: 'Daisy', breed: 'Beagle' },\n *       { name: 'Einstein', breed: 'Catalan Sheepdog' }\n *     ]);\n *\n *     // populate many plain objects\n *     const users = [\n *       { name: 'John Wick', dog: pets[0]._id },\n *       { name: 'Doc Brown', dog: pets[1]._id }\n *     ];\n *     await User.populate(users, { path: 'dog', select: 'name' });\n *     users[0].dog.name; // 'Daisy'\n *     users[0].dog.breed; // undefined because of `select`\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object|String} options Either the paths to populate or an object specifying all parameters\n * @param {string} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] By default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] If true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Boolean} [options.skipInvalidIds=false] By default, Mongoose throws a cast error if `localField` and `foreignField` schemas don't line up. If you enable this option, Mongoose will instead filter out any `localField` properties that cannot be casted to `foreignField`'s schema type.\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Boolean} [options.strictPopulate=true] Set to false to allow populating paths that aren't defined in the given model's schema.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = async function populate(docs, paths) {\n  _checkContext(this, 'populate');\n  if (typeof paths === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.populate() no longer accepts a callback');\n  }\n  const _this = this;\n  // normalized paths\n  paths = utils.populate(paths);\n  // data that should persist across subPopulate calls\n  const cache = {};\n  return new Promise((resolve, reject) => {\n    _populate(_this, docs, paths, cache, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {never} cache Unused\n * @param {Function} [callback] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  let pending = paths.length;\n  if (paths.length === 0) {\n    return callback(null, docs);\n  }\n  // each path has its own query options and must be executed separately\n  for (const path of paths) {\n    populate(model, docs, path, next);\n  }\n  function next(err) {\n    if (err) {\n      return callback(err, null);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nconst excludeIdReg = /\\s?-_id\\s?/;\nconst excludeIdRegGlobal = /\\s?-_id\\s?/g;\nfunction populate(model, docs, options, callback) {\n  const populateOptions = options;\n  if (options.strictPopulate == null) {\n    if (options._localModel != null && options._localModel.schema._userProvidedOptions.strictPopulate != null) {\n      populateOptions.strictPopulate = options._localModel.schema._userProvidedOptions.strictPopulate;\n    } else if (options._localModel != null && model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    } else if (model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    }\n  }\n\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n  const modelsMap = getModelsMapForPopulate(model, docs, populateOptions);\n  if (modelsMap instanceof MongooseError) {\n    return immediate(function () {\n      callback(modelsMap);\n    });\n  }\n  const len = modelsMap.length;\n  let vals = [];\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n  let _remaining = len;\n  let hasOne = false;\n  const params = [];\n  for (let i = 0; i < len; ++i) {\n    const mod = modelsMap[i];\n    let select = mod.options.select;\n    let ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n    const assignmentOpts = {};\n    assignmentOpts.sort = mod && mod.options && mod.options.options && mod.options.options.sort || void 0;\n    assignmentOpts.excludeId = excludeIdReg.test(select) || select && select._id === 0;\n\n    // Lean transform may delete `_id`, which would cause assignment\n    // to fail. So delay running lean transform until _after_\n    // `_assign()`\n    if (mod.options && mod.options.options && mod.options.options.lean && mod.options.options.lean.transform) {\n      mod.options.options._leanTransform = mod.options.options.lean.transform;\n      mod.options.options.lean = true;\n    }\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      // Ensure that we set to 0 or empty array even\n      // if we don't actually execute a query to make sure there's a value\n      // and we know this path was populated for future sets. See gh-7731, gh-8230\n      --_remaining;\n      _assign(model, [], mod, assignmentOpts);\n      continue;\n    }\n    hasOne = true;\n    if (typeof populateOptions.foreignField === 'string') {\n      mod.foreignField.clear();\n      mod.foreignField.add(populateOptions.foreignField);\n    }\n    const match = createPopulateQueryFilter(ids, mod.match, mod.foreignField, mod.model, mod.options.skipInvalidIds);\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else if (Array.isArray(select)) {\n        select = select.filter(field => field !== '-_id');\n      } else {\n        // preserve original select conditions by copying\n        select = {\n          ...select\n        };\n        delete select._id;\n      }\n    }\n    if (mod.options.options && mod.options.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n    } else if (mod.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.limit;\n    }\n    params.push([mod, match, select, assignmentOpts, _next]);\n  }\n  if (!hasOne) {\n    // If models but no docs, skip further deep populate.\n    if (modelsMap.length !== 0) {\n      return callback();\n    }\n    // If no models to populate but we have a nested populate,\n    // keep trying, re: gh-8946\n    if (populateOptions.populate != null) {\n      const opts = utils.populate(populateOptions.populate).map(pop => Object.assign({}, pop, {\n        path: populateOptions.path + '.' + pop.path\n      }));\n      model.populate(docs, opts).then(res => {\n        callback(null, res);\n      }, err => {\n        callback(err);\n      });\n      return;\n    }\n    return callback();\n  }\n  for (const arr of params) {\n    _execPopulateQuery.apply(null, arr);\n  }\n  function _next(err, valsFromDb) {\n    if (err != null) {\n      return callback(err, null);\n    }\n    vals = vals.concat(valsFromDb);\n    if (--_remaining === 0) {\n      _done();\n    }\n  }\n  function _done() {\n    for (const arr of params) {\n      const mod = arr[0];\n      const assignmentOpts = arr[3];\n      for (const val of vals) {\n        mod.options._childDocs.push(val);\n      }\n      try {\n        _assign(model, vals, mod, assignmentOpts);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n    for (const arr of params) {\n      removeDeselectedForeignField(arr[0].foreignField, arr[0].options, vals);\n    }\n    for (const arr of params) {\n      const mod = arr[0];\n      if (mod.options && mod.options.options && mod.options.options._leanTransform) {\n        for (const doc of vals) {\n          mod.options.options._leanTransform(doc);\n        }\n      }\n    }\n    callback();\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _execPopulateQuery(mod, match, select, assignmentOpts, callback) {\n  let subPopulate = clone(mod.options.populate);\n  const queryOptions = Object.assign({\n    skip: mod.options.skip,\n    limit: mod.options.limit,\n    perDocumentLimit: mod.options.perDocumentLimit\n  }, mod.options.options);\n  if (mod.count) {\n    delete queryOptions.skip;\n  }\n  if (queryOptions.perDocumentLimit != null) {\n    queryOptions.limit = queryOptions.perDocumentLimit;\n    delete queryOptions.perDocumentLimit;\n  } else if (queryOptions.limit != null) {\n    queryOptions.limit = queryOptions.limit * mod.ids.length;\n  }\n  const query = mod.model.find(match, select, queryOptions);\n  // If we're doing virtual populate and projection is inclusive and foreign\n  // field is not selected, automatically select it because mongoose needs it.\n  // If projection is exclusive and client explicitly unselected the foreign\n  // field, that's the client's fault.\n  for (const foreignField of mod.foreignField) {\n    if (foreignField !== '_id' && query.selectedInclusively() && !isPathSelectedInclusive(query._fields, foreignField)) {\n      query.select(foreignField);\n    }\n  }\n\n  // If using count, still need the `foreignField` so we can match counts\n  // to documents, otherwise we would need a separate `count()` for every doc.\n  if (mod.count) {\n    for (const foreignField of mod.foreignField) {\n      query.select(foreignField);\n    }\n  }\n\n  // If we need to sub-populate, call populate recursively\n  if (subPopulate) {\n    // If subpopulating on a discriminator, skip check for non-existent\n    // paths. Because the discriminator may not have the path defined.\n    if (mod.model.baseModelName != null) {\n      if (Array.isArray(subPopulate)) {\n        subPopulate.forEach(pop => {\n          pop.strictPopulate = false;\n        });\n      } else if (typeof subPopulate === 'string') {\n        subPopulate = {\n          path: subPopulate,\n          strictPopulate: false\n        };\n      } else {\n        subPopulate.strictPopulate = false;\n      }\n    }\n    const basePath = mod.options._fullPath || mod.options.path;\n    if (Array.isArray(subPopulate)) {\n      for (const pop of subPopulate) {\n        pop._fullPath = basePath + '.' + pop.path;\n      }\n    } else if (typeof subPopulate === 'object') {\n      subPopulate._fullPath = basePath + '.' + subPopulate.path;\n    }\n    query.populate(subPopulate);\n  }\n  query.exec().then(docs => {\n    for (const val of docs) {\n      leanPopulateMap.set(val, mod.model);\n    }\n    callback(null, docs);\n  }, err => {\n    callback(err);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _assign(model, vals, mod, assignmentOpts) {\n  const options = mod.options;\n  const isVirtual = mod.isVirtual;\n  const justOne = mod.justOne;\n  let _val;\n  const lean = options && options.options && options.options.lean || false;\n  const len = vals.length;\n  const rawOrder = {};\n  const rawDocs = {};\n  let key;\n  let val;\n\n  // Clone because `assignRawDocsToIdStructure` will mutate the array\n  const allIds = clone(mod.allIds);\n  // optimization:\n  // record the document positions as returned by\n  // the query result.\n  for (let i = 0; i < len; i++) {\n    val = vals[i];\n    if (val == null) {\n      continue;\n    }\n    for (const foreignField of mod.foreignField) {\n      _val = utils.getValue(foreignField, val);\n      if (Array.isArray(_val)) {\n        _val = utils.array.unique(utils.array.flatten(_val));\n        for (let __val of _val) {\n          if (__val instanceof Document) {\n            __val = __val._id;\n          }\n          key = String(__val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            if (isVirtual && !justOne) {\n              rawDocs[key] = [val];\n              rawOrder[key] = [i];\n            } else {\n              rawDocs[key] = val;\n              rawOrder[key] = i;\n            }\n          }\n        }\n      } else {\n        if (_val instanceof Document) {\n          _val = _val._id;\n        }\n        key = String(_val);\n        if (rawDocs[key]) {\n          if (Array.isArray(rawDocs[key])) {\n            rawDocs[key].push(val);\n            rawOrder[key].push(i);\n          } else if (isVirtual || rawDocs[key].constructor !== val.constructor || String(rawDocs[key]._id) !== String(val._id)) {\n            // May need to store multiple docs with the same id if there's multiple models\n            // if we have discriminators or a ref function. But avoid converting to an array\n            // if we have multiple queries on the same model because of `perDocumentLimit` re: gh-9906\n            rawDocs[key] = [rawDocs[key], val];\n            rawOrder[key] = [rawOrder[key], i];\n          }\n        } else {\n          rawDocs[key] = val;\n          rawOrder[key] = i;\n        }\n      }\n      // flag each as result of population\n      if (!lean) {\n        val.$__.wasPopulated = val.$__.wasPopulated || {\n          value: _val\n        };\n      }\n    }\n  }\n  assignVals({\n    originalModel: model,\n    // If virtual, make sure to not mutate original field\n    rawIds: mod.isVirtual ? allIds : mod.allIds,\n    allIds: allIds,\n    unpopulatedValues: mod.unpopulatedValues,\n    foreignField: mod.foreignField,\n    rawDocs: rawDocs,\n    rawOrder: rawOrder,\n    docs: mod.docs,\n    path: options.path,\n    options: assignmentOpts,\n    justOne: mod.justOne,\n    isVirtual: mod.isVirtual,\n    allOptions: mod,\n    populatedModel: mod.model,\n    lean: lean,\n    virtual: mod.virtual,\n    count: mod.count,\n    match: mod.match\n  });\n}\n\n/**\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n * @api private\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  const versioningEnabled = schema.options.versionKey !== false;\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    const o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n  let model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n  if (!(model.prototype instanceof Model)) {\n    Object.setPrototypeOf(model, Model);\n    Object.setPrototypeOf(model.prototype, Model.prototype);\n  }\n  model.model = function model(name) {\n    return this.db.model(name);\n  };\n  model.db = connection;\n  model.prototype.db = connection;\n  model.prototype[modelDbSymbol] = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n  model[modelSymbol] = true;\n  model.events = new EventEmitter();\n  schema._preCompile();\n  const _userProvidedOptions = schema._userProvidedOptions || {};\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: schema.options.capped,\n    Promise: model.base.Promise,\n    modelName: name\n  };\n  if (schema.options.autoCreate !== void 0) {\n    collectionOptions.autoCreate = schema.options.autoCreate;\n  }\n  const collection = connection.collection(collectionName, collectionOptions);\n  model.prototype.collection = collection;\n  model.prototype.$collection = collection;\n  model.prototype[modelCollectionSymbol] = collection;\n  model.prototype.$__setSchema(schema);\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n  applyStaticHooks(model, schema.s.hooks, schema.statics);\n  model.schema = model.prototype.$__schema;\n  model.collection = collection;\n  model.$__collection = collection;\n\n  // Create custom query constructor\n  model.Query = function () {\n    Query.apply(this, arguments);\n  };\n  Object.setPrototypeOf(model.Query.prototype, Query.prototype);\n  model.Query.base = Query.base;\n  model.Query.prototype.constructor = Query;\n  model._applyQueryMiddleware();\n  applyQueryMethods(model, schema.query);\n  return model;\n};\n\n/**\n * Update this model to use the new connection, including updating all internal\n * references and creating a new `Collection` instance using the new connection.\n * Not for external use, only used by `setDriver()` to ensure that you can still\n * call `setDriver()` after creating a model using `mongoose.model()`.\n *\n * @param {Connection} newConnection the new connection to use\n * @api private\n */\n\nModel.$__updateConnection = function $__updateConnection(newConnection) {\n  this.db = newConnection;\n  this.prototype.db = newConnection;\n  this.prototype[modelDbSymbol] = newConnection;\n  const collection = newConnection.collection(this.collection.collectionName, this.collection.opts);\n  this.prototype.collection = collection;\n  this.prototype.$collection = collection;\n  this.prototype[modelCollectionSymbol] = collection;\n  this.collection = collection;\n  this.$__collection = collection;\n};\n\n/**\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (const i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/**\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n * @api private\n * @memberOf Model\n * @static\n * @method __subclass\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  const _this = this;\n  const Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n  Object.setPrototypeOf(Model, _this);\n  Object.setPrototypeOf(Model.prototype, _this.prototype);\n  Model.db = conn;\n  Model.prototype.db = conn;\n  Model.prototype[modelDbSymbol] = conn;\n  _this[subclassedSymbol] = _this[subclassedSymbol] || [];\n  _this[subclassedSymbol].push(Model);\n  if (_this.discriminators != null) {\n    Model.discriminators = {};\n    for (const key of Object.keys(_this.discriminators)) {\n      Model.discriminators[key] = _this.discriminators[key].__subclass(_this.db, _this.discriminators[key].schema, collection);\n    }\n  }\n  const s = schema && typeof schema !== 'string' ? schema : _this.prototype.$__schema;\n  const options = s.options || {};\n  const _userProvidedOptions = s._userProvidedOptions || {};\n  if (!collection) {\n    collection = _this.prototype.$__schema.get('collection') || utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: s && options.capped\n  };\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.prototype.$collection = Model.prototype.collection;\n  Model.prototype[modelCollectionSymbol] = Model.prototype.collection;\n  Model.collection = Model.prototype.collection;\n  Model.$__collection = Model.collection;\n  // Errors handled internally, so ignore\n  Model.init().catch(() => {});\n  return Model;\n};\n\n/**\n * Apply changes made to this model's schema after this model was compiled.\n * By default, adding virtuals and other properties to a schema after the model is compiled does nothing.\n * Call this function to apply virtuals and properties that were added later.\n *\n * #### Example:\n *\n *     const schema = new mongoose.Schema({ field: String });\n *     const TestModel = mongoose.model('Test', schema);\n *     TestModel.schema.virtual('myVirtual').get(function() {\n *       return this.field + ' from myVirtual';\n *     });\n *     const doc = new TestModel({ field: 'Hello' });\n *     doc.myVirtual; // undefined\n *\n *     TestModel.recompileSchema();\n *     doc.myVirtual; // 'Hello from myVirtual'\n *\n * @return {undefined}\n * @api public\n * @memberOf Model\n * @static\n * @method recompileSchema\n */\n\nModel.recompileSchema = function recompileSchema() {\n  this.prototype.$__setSchema(this.schema);\n  if (this.schema._applyDiscriminators != null) {\n    for (const disc of this.schema._applyDiscriminators.keys()) {\n      this.discriminator(disc, this.schema._applyDiscriminators.get(disc));\n    }\n  }\n  applyEmbeddedDiscriminators(this.schema, new WeakSet(), true);\n};\n\n/**\n * Helper for console.log. Given a model named 'MyModel', returns the string\n * `'Model { MyModel }'`.\n *\n * #### Example:\n *\n *     const MyModel = mongoose.model('Test', Schema({ name: String }));\n *     MyModel.inspect(); // 'Model { Test }'\n *     console.log(MyModel); // Prints 'Model { Test }'\n *\n * @api public\n */\n\nModel.inspect = function () {\n  return `Model { ${this.modelName} }`;\n};\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Model[util.inspect.custom] = Model.inspect;\n}\n\n/*!\n * Applies query middleware from this model's schema to this model's\n * Query constructor.\n */\n\nModel._applyQueryMiddleware = function _applyQueryMiddleware() {\n  const Query = this.Query;\n  const queryMiddleware = this.schema.s.hooks.filter(hook => {\n    const contexts = _getContexts(hook);\n    if (hook.name === 'validate') {\n      return !!contexts.query;\n    }\n    if (hook.name === 'deleteOne' || hook.name === 'updateOne') {\n      return !!contexts.query || Object.keys(contexts).length === 0;\n    }\n    if (hook.query != null || hook.document != null) {\n      return !!hook.query;\n    }\n    return true;\n  });\n  Query.prototype._queryMiddleware = queryMiddleware;\n};\nfunction _getContexts(hook) {\n  const ret = {};\n  if (hook.hasOwnProperty('query')) {\n    ret.query = hook.query;\n  }\n  if (hook.hasOwnProperty('document')) {\n    ret.document = hook.document;\n  }\n  return ret;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;","map":{"version":3,"names":["Aggregate","require","ChangeStream","Document","DocumentNotFoundError","DivergentArrayError","EventEmitter","Kareem","MongooseBuffer","MongooseError","ObjectParameterError","OverwriteModelError","Query","SaveOptions","Schema","ValidationError","VersionError","ParallelSaveError","applyDefaultsHelper","applyDefaultsToPOJO","applyEmbeddedDiscriminators","applyHooks","applyMethods","applyProjection","applyReadConcern","applySchemaCollation","applyStaticHooks","applyStatics","applyWriteConcern","assignVals","castBulkWrite","clone","createPopulateQueryFilter","decorateUpdateWithVersionKey","getDefaultBulkwriteResult","getSchemaDiscriminatorByValue","discriminator","firstKey","each","get","getConstructorName","getDiscriminatorByValue","getModelsMapForPopulate","immediate","internalToObjectOptions","isDefaultIdIndex","isIndexEqual","getRelatedDBIndexes","getRelatedSchemaIndexes","isPathExcluded","decorateDiscriminatorIndexOptions","isPathSelectedInclusive","leanPopulateMap","parallelLimit","parentPaths","prepareDiscriminatorPipeline","pushNestedArrayPaths","removeDeselectedForeignField","setDottedPath","STATES","util","utils","MongooseBulkWriteError","minimize","VERSION_WHERE","VERSION_INC","VERSION_ALL","arrayAtomicsSymbol","modelCollectionSymbol","Symbol","modelDbSymbol","modelSymbol","subclassedSymbol","saveToObjectOptions","Object","assign","bson","flattenObjectIds","Model","doc","fields","skipId","TypeError","call","setPrototypeOf","prototype","$isMongooseModelPrototype","db","collection","$__collection","modelName","$where","baseModelName","events","_middleware","_applyCustomWhere","where","key","keys","$__handleSave","options","callback","saveOptions","$__schema","writeConcern","w","j","wtimeout","checkKeys","session","$session","asyncLocalStorage","base","transactionAsyncLocalStorage","getStore","hasOwnProperty","$isNew","obj","toObject","_id","$__version","insertOne","then","ret","err","_setIsNew","$__reset","$__","inserting","delta","$__delta","pathsToSave","includes","some","pathToSave","slice","length","charAt","$__where","update","updateOp","values","isPOJO","$unset","updateOne","$__undoReset","handleEmptyUpdate","modifiedPaths","optionsWithCustomValues","optimisticConcurrency","Array","isArray","versionKey","val","$__getValue","constructor","findOne","documentExists","matchedCount","catch","$__save","error","result","hooks","s","execPost","numAffected","versionBump","version","doIncrement","undefined","$versionError","$__setValue","saving","savedState","$emit","emit","generateVersionError","save","arguments","parallelSave","$op","timestamps","$__handleReject","Promise","resolve","reject","$save","shouldSkipVersioning","self","path","skipVersioning","replace","operand","data","op","test","increment","handleAtomics","value","$set","$__getAtomics","forEach","atomic","atomics","ops","i","isMongooseObject","depopulate","_isNested","valueOf","iter","mem","transform","map","$each","dirty","$__dirty","optCon","Set","modPaths","find","has","len","divergent","d","_doc","match","checkDivergentArray","push","pop","$populated","selected","pathSplit","split","top","$elemMatch","join","$isDefault","indexOf","pathsToCheck","isSelected","isMongooseArray","$path","pathSymbol","Buffer","isBuffer","primitiveAtomics","virtuals","getters","omitUndefined","array","check","object","skip","select","$pop","$__isSelected","$inc","_where","deleteOne","Error","query","pre","queryPreDeleteOne","cb","execPre","callSubdocPreHooks","$getAllSubdocs","subdoc","skipIfAlreadyDeleted","isDeleted","skipWrappedFunction","post","callSubdocPostHooks","queryPostDeleteOne","$model","name","model","exists","filter","_checkContext","lean","setOptions","schema","getFunctionName","mergePlugins","isObject","instanceOfSchema","mergeHooks","models","overwriteModels","$isRootDiscriminator","$globalPluginsApplied","discriminators","defineProperty","configurable","writable","submodel","__subclass","ctx","fnName","global","init","$init","conn","_ensureIndexes","autoIndex","getOption","config","ensureIndexes","_automatic","_createSearchIndexes","autoSearchIndex","results","searchIndex","_searchIndexes","createSearchIndex","_createCollection","readyState","connecting","disconnected","_shouldBufferCommands","_queue","fn","autoCreate","createCollection","_catch","_this","$caught","apply","shouldSkip","collectionOptions","schemaCollation","collation","capped","size","timeseries","expireAfterSeconds","expires","clusteredIndex","unique","collectionName","code","_opts","syncIndexes","diffIndexesResult","diffIndexes","dropped","cleanIndexes","toDrop","createIndexes","toCreate","description","updateSearchIndex","definition","dropSearchIndex","listSearchIndexes","cursor","toArray","dbIndexes","listIndexes","codeName","schemaIndexes","indexes","getIndexesToDrop","getIndexesToCreate","schemaIndexKeysObject","schemaIndexOptions","found","index","dbIndex","res","_dropIndexes","all","indexName","dropIndex","buffer","addQueue","indexError","done","warn","indexSingleDone","indexSingleStart","baseSchema","_baseSchema","baseSchemaIndexes","create","shift","_autoIndex","deepEqual","indexFields","indexOptions","background","createIndex","translateAliases","errorOnDuplicates","translate","alias","translated","fieldKeys","currentSchema","aliases","paths","translatedKey","Map","set","delete","field","conditions","mq","deleteMany","projection","findById","id","estimatedDocumentCount","countDocuments","distinct","findOneAndUpdate","findByIdAndUpdate","findOneAndDelete","findByIdAndDelete","findOneAndReplace","replacement","args","discriminatorKey","last","hasCallback","immediateError","aggregateErrors","ordered","toSave","allSettled","status","reason","firstError","watch","pipeline","changeStreamThunk","closed","driverChangeStream","startSession","insertMany","arr","$__insertMany","noop","limit","rawResult","throwOnValidationError","validationErrors","validationErrorsToOriginalOrder","toExecute","$validate","docs","originalDocIndex","validDocIndexToOriginalIndex","docAttributes","sort","err1","err2","acknowledged","insertedCount","insertedIds","mongoose","docObjects","shouldSetTimestamps","initializeTimestamps","attribute","populate","insertedDocs","writeErrors","hasWriteErrors","erroredIndexes","originalIndex","firstErroredIndex","isErrored","setIsNewForInsertedDoc","subdocs","bulkWrite","validations","remaining","validOps","v1","v2","v","validOpIndexes","bulkSave","documents","document","buildPreSavePromise","writeOperations","buildBulkWriteOperations","skipValidation","bulkWriteResult","bulkWriteError","documentError","writeError","writeErrorDocumentId","q","toString","handleSuccessfulWrite","applyDefaults","exclude","castObject","schemaType","$isMongooseArray","pieces","cur","isNaN","$isMongooseDocumentArray","$isSingleNested","$isMongooseDocumentArrayElement","caster","ignoreCastErrors","addError","cast","setDefaultOptions","reduce","accumulator","validationError","validateSync","isANewDocument","isNew","writeOperation","injectTimestampsOption","isDocumentWithChanges","isEmptyObject","changes","hydrate","createModel","updateMany","_update","replaceOne","aggregate","option","validate","pathsOrOptions","context","_pathsToValidate","p","pathsToSkip","x","piece","errors","_checkDone","doValidate","cache","_populate","pending","next","excludeIdReg","excludeIdRegGlobal","populateOptions","strictPopulate","_localModel","_userProvidedOptions","every","isNullOrUndefined","modelsMap","vals","flatten","item","_remaining","hasOne","params","mod","ids","assignmentOpts","excludeId","_leanTransform","_assign","foreignField","clear","add","skipInvalidIds","originalLimit","_next","opts","_execPopulateQuery","valsFromDb","concat","_done","_childDocs","subPopulate","queryOptions","perDocumentLimit","count","selectedInclusively","_fields","basePath","_fullPath","exec","isVirtual","justOne","_val","rawOrder","rawDocs","allIds","getValue","__val","String","wasPopulated","originalModel","rawIds","unpopulatedValues","allOptions","populatedModel","virtual","compile","connection","versioningEnabled","o","Number","loadClass","execPreSync","Discriminator","_preCompile","schemaUserProvidedOptions","$collection","$__setSchema","statics","_applyQueryMiddleware","applyQueryMethods","$__updateConnection","newConnection","methods","subclass","toCollectionName","pluralize","recompileSchema","_applyDiscriminators","disc","WeakSet","inspect","custom","queryMiddleware","hook","contexts","_getContexts","_queryMiddleware","module","exports"],"sources":["C:/Users/chesh/OneDrive/Desktop/4 sem/FEE/Final project/node_modules/mongoose/lib/model.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Aggregate = require('./aggregate');\nconst ChangeStream = require('./cursor/changeStream');\nconst Document = require('./document');\nconst DocumentNotFoundError = require('./error/notFound');\nconst DivergentArrayError = require('./error/divergentArray');\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseBuffer = require('./types/buffer');\nconst MongooseError = require('./error/index');\nconst ObjectParameterError = require('./error/objectParameter');\nconst OverwriteModelError = require('./error/overwriteModel');\nconst Query = require('./query');\nconst SaveOptions = require('./options/saveOptions');\nconst Schema = require('./schema');\nconst ValidationError = require('./error/validation');\nconst VersionError = require('./error/version');\nconst ParallelSaveError = require('./error/parallelSave');\nconst applyDefaultsHelper = require('./helpers/document/applyDefaults');\nconst applyDefaultsToPOJO = require('./helpers/model/applyDefaultsToPOJO');\nconst applyEmbeddedDiscriminators = require('./helpers/discriminator/applyEmbeddedDiscriminators');\nconst applyHooks = require('./helpers/model/applyHooks');\nconst applyMethods = require('./helpers/model/applyMethods');\nconst applyProjection = require('./helpers/projection/applyProjection');\nconst applyReadConcern = require('./helpers/schema/applyReadConcern');\nconst applySchemaCollation = require('./helpers/indexes/applySchemaCollation');\nconst applyStaticHooks = require('./helpers/model/applyStaticHooks');\nconst applyStatics = require('./helpers/model/applyStatics');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst assignVals = require('./helpers/populate/assignVals');\nconst castBulkWrite = require('./helpers/model/castBulkWrite');\nconst clone = require('./helpers/clone');\nconst createPopulateQueryFilter = require('./helpers/populate/createPopulateQueryFilter');\nconst decorateUpdateWithVersionKey = require('./helpers/update/decorateUpdateWithVersionKey');\nconst getDefaultBulkwriteResult = require('./helpers/getDefaultBulkwriteResult');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst discriminator = require('./helpers/model/discriminator');\nconst firstKey = require('./helpers/firstKey');\nconst each = require('./helpers/each');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst getModelsMapForPopulate = require('./helpers/populate/getModelsMapForPopulate');\nconst immediate = require('./helpers/immediate');\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst isDefaultIdIndex = require('./helpers/indexes/isDefaultIdIndex');\nconst isIndexEqual = require('./helpers/indexes/isIndexEqual');\nconst {\n  getRelatedDBIndexes,\n  getRelatedSchemaIndexes\n} = require('./helpers/indexes/getRelatedIndexes');\nconst isPathExcluded = require('./helpers/projection/isPathExcluded');\nconst decorateDiscriminatorIndexOptions = require('./helpers/indexes/decorateDiscriminatorIndexOptions');\nconst isPathSelectedInclusive = require('./helpers/projection/isPathSelectedInclusive');\nconst leanPopulateMap = require('./helpers/populate/leanPopulateMap');\nconst parallelLimit = require('./helpers/parallelLimit');\nconst parentPaths = require('./helpers/path/parentPaths');\nconst prepareDiscriminatorPipeline = require('./helpers/aggregate/prepareDiscriminatorPipeline');\nconst pushNestedArrayPaths = require('./helpers/model/pushNestedArrayPaths');\nconst removeDeselectedForeignField = require('./helpers/populate/removeDeselectedForeignField');\nconst setDottedPath = require('./helpers/path/setDottedPath');\nconst STATES = require('./connectionState');\nconst util = require('util');\nconst utils = require('./utils');\nconst MongooseBulkWriteError = require('./error/bulkWriteError');\nconst minimize = require('./helpers/minimize');\n\nconst VERSION_WHERE = 1;\nconst VERSION_INC = 2;\nconst VERSION_ALL = VERSION_WHERE | VERSION_INC;\n\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst modelCollectionSymbol = Symbol('mongoose#Model#collection');\nconst modelDbSymbol = Symbol('mongoose#Model#db');\nconst modelSymbol = require('./helpers/symbols').modelSymbol;\nconst subclassedSymbol = Symbol('mongoose#Model#subclassed');\n\nconst saveToObjectOptions = Object.assign({}, internalToObjectOptions, {\n  bson: true,\n  flattenObjectIds: false\n});\n\n/**\n * A Model is a class that's your primary tool for interacting with MongoDB.\n * An instance of a Model is called a [Document](https://mongoosejs.com/docs/api/document.html#Document).\n *\n * In Mongoose, the term \"Model\" refers to subclasses of the `mongoose.Model`\n * class. You should not use the `mongoose.Model` class directly. The\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) and\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()) functions\n * create subclasses of `mongoose.Model` as shown below.\n *\n * #### Example:\n *\n *     // `UserModel` is a \"Model\", a subclass of `mongoose.Model`.\n *     const UserModel = mongoose.model('User', new Schema({ name: String }));\n *\n *     // You can use a Model to create new documents using `new`:\n *     const userDoc = new UserModel({ name: 'Foo' });\n *     await userDoc.save();\n *\n *     // You also use a model to create queries:\n *     const userFromDb = await UserModel.findOne({ name: 'Foo' });\n *\n * @param {Object} doc values for initial set\n * @param {Object} [fields] optional object containing the fields that were selected in the query which returned this document. You do **not** need to set this parameter to ensure Mongoose handles your [query projection](https://mongoosejs.com/docs/api/query.html#Query.prototype.select()).\n * @param {Boolean} [skipId=false] optional boolean. If true, mongoose doesn't add an `_id` field to the document.\n * @inherits Document https://mongoosejs.com/docs/api/document.html\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` constructor must be a POJO or string, ' +\n      '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  if (typeof doc === 'string') {\n    throw new TypeError('First argument to `Model` constructor must be an object, ' +\n      '**not** a string. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId);\n}\n\n/**\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n * @api private\n */\n\nObject.setPrototypeOf(Model.prototype, Document.prototype);\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.db;\n\n/**\n * The collection instance this model uses.\n * A Mongoose collection is a thin wrapper around a [MongoDB Node.js driver collection]([MongoDB Node.js driver collection](https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html)).\n * Using `Model.collection` means you bypass Mongoose middleware, validation, and casting.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api public\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.collection;\n\n/**\n * Internal collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api private\n * @property collection\n * @memberOf Model\n * @instance\n */\n\n\nModel.prototype.$__collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.baseModelName;\n\n/**\n * Event emitter that reports any errors that occurred. Useful for global error\n * handling.\n *\n * #### Example:\n *\n *     MyModel.events.on('error', err => console.log(err.message));\n *\n *     // Prints a 'CastError' because of the above handler\n *     await MyModel.findOne({ _id: 'Not a valid ObjectId' }).catch(noop);\n *\n * @api public\n * @property events\n * @fires error whenever any query or model function errors\n * @memberOf Model\n * @static\n */\n\nModel.events;\n\n/**\n * Compiled middleware for this model. Set in `applyHooks()`.\n *\n * @api private\n * @property _middleware\n * @memberOf Model\n * @static\n */\n\nModel._middleware;\n\n/*!\n * ignore\n */\n\nfunction _applyCustomWhere(doc, where) {\n  if (doc.$where == null) {\n    return;\n  }\n  for (const key of Object.keys(doc.$where)) {\n    where[key] = doc.$where[key];\n  }\n}\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function(options, callback) {\n  const saveOptions = {};\n\n  applyWriteConcern(this.$__schema, options);\n  if (typeof options.writeConcern !== 'undefined') {\n    saveOptions.writeConcern = {};\n    if ('w' in options.writeConcern) {\n      saveOptions.writeConcern.w = options.writeConcern.w;\n    }\n    if ('j' in options.writeConcern) {\n      saveOptions.writeConcern.j = options.writeConcern.j;\n    }\n    if ('wtimeout' in options.writeConcern) {\n      saveOptions.writeConcern.wtimeout = options.writeConcern.wtimeout;\n    }\n  } else {\n    if ('w' in options) {\n      saveOptions.w = options.w;\n    }\n    if ('j' in options) {\n      saveOptions.j = options.j;\n    }\n    if ('wtimeout' in options) {\n      saveOptions.wtimeout = options.wtimeout;\n    }\n  }\n  if ('checkKeys' in options) {\n    saveOptions.checkKeys = options.checkKeys;\n  }\n\n  const session = this.$session();\n  const asyncLocalStorage = this[modelDbSymbol].base.transactionAsyncLocalStorage?.getStore();\n  if (!saveOptions.hasOwnProperty('session') && session != null) {\n    saveOptions.session = session;\n  } else if (asyncLocalStorage?.session != null) {\n    saveOptions.session = asyncLocalStorage.session;\n  }\n  if (this.$isNew) {\n    // send entire doc\n    const obj = this.toObject(saveToObjectOptions);\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated by mongodb necessarily\n      // match the schema definition.\n      immediate(function() {\n        callback(new MongooseError('document must have an _id before saving'));\n      });\n      return;\n    }\n\n    this.$__version(true, obj);\n    this[modelCollectionSymbol].insertOne(obj, saveOptions).then(\n      ret => callback(null, ret),\n      err => {\n        _setIsNew(this, true);\n\n        callback(err, null);\n      }\n    );\n\n    this.$__reset();\n    _setIsNew(this, false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n    return;\n  }\n\n  // Make sure we don't treat it as a new object on error,\n  // since it already exists\n  this.$__.inserting = false;\n  const delta = this.$__delta();\n\n  if (options.pathsToSave) {\n    for (const key in delta[1]['$set']) {\n      if (options.pathsToSave.includes(key)) {\n        continue;\n      } else if (options.pathsToSave.some(pathToSave => key.slice(0, pathToSave.length) === pathToSave && key.charAt(pathToSave.length) === '.')) {\n        continue;\n      } else {\n        delete delta[1]['$set'][key];\n      }\n    }\n  }\n  if (delta) {\n    if (delta instanceof MongooseError) {\n      callback(delta);\n      return;\n    }\n\n    const where = this.$__where(delta[0]);\n    if (where instanceof MongooseError) {\n      callback(where);\n      return;\n    }\n\n    _applyCustomWhere(this, where);\n\n    const update = delta[1];\n    if (this.$__schema.options.minimize) {\n      for (const updateOp of Object.values(update)) {\n        if (updateOp == null) {\n          continue;\n        }\n        for (const key of Object.keys(updateOp)) {\n          if (updateOp[key] == null || typeof updateOp[key] !== 'object') {\n            continue;\n          }\n          if (!utils.isPOJO(updateOp[key])) {\n            continue;\n          }\n          minimize(updateOp[key]);\n          if (Object.keys(updateOp[key]).length === 0) {\n            delete updateOp[key];\n            update.$unset = update.$unset || {};\n            update.$unset[key] = 1;\n          }\n        }\n      }\n    }\n\n    this[modelCollectionSymbol].updateOne(where, update, saveOptions).then(\n      ret => {\n        ret.$where = where;\n        callback(null, ret);\n      },\n      err => {\n        this.$__undoReset();\n\n        callback(err);\n      }\n    );\n  } else {\n    handleEmptyUpdate.call(this);\n    return;\n  }\n\n  // store the modified paths before the document is reset\n  this.$__.modifiedPaths = this.modifiedPaths();\n  this.$__reset();\n\n  _setIsNew(this, false);\n\n  function handleEmptyUpdate() {\n    const optionsWithCustomValues = Object.assign({}, options, saveOptions);\n    const where = this.$__where();\n    const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n    if (optimisticConcurrency && !Array.isArray(optimisticConcurrency)) {\n      const key = this.$__schema.options.versionKey;\n      const val = this.$__getValue(key);\n      if (val != null) {\n        where[key] = val;\n      }\n    }\n\n    applyReadConcern(this.$__schema, optionsWithCustomValues);\n    this.constructor.collection.findOne(where, optionsWithCustomValues)\n      .then(documentExists => {\n        const matchedCount = !documentExists ? 0 : 1;\n        callback(null, { $where: where, matchedCount });\n      })\n      .catch(callback);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function(options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    if (error) {\n      const hooks = this.$__schema.s.hooks;\n      return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n        callback(error, this);\n      });\n    }\n    let numAffected = 0;\n    const writeConcern = options != null ?\n      options.writeConcern != null ?\n        options.writeConcern.w :\n        options.w :\n      0;\n    if (writeConcern !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result != null) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.matchedCount != null) {\n          numAffected = result.matchedCount;\n        } else {\n          numAffected = result;\n        }\n      }\n\n      const versionBump = this.$__.version;\n      // was this an update that required a version bump?\n      if (versionBump && !this.$__.inserting) {\n        const doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n        const key = this.$__schema.options.versionKey;\n        const version = this.$__getValue(key) || 0;\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          this.$__undoReset();\n          const err = this.$__.$versionError ||\n            new VersionError(this, version, this.$__.modifiedPaths);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          this.$__setValue(key, version + 1);\n        }\n      }\n      if (result != null && numAffected <= 0) {\n        this.$__undoReset();\n        error = new DocumentNotFoundError(result.$where,\n          this.constructor.modelName, numAffected, result);\n        const hooks = this.$__schema.s.hooks;\n        return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n          callback(error, this);\n        });\n      }\n    }\n    this.$__.saving = undefined;\n    this.$__.savedState = {};\n    this.$emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction generateVersionError(doc, modifiedPaths) {\n  const key = doc.$__schema.options.versionKey;\n  if (!key) {\n    return null;\n  }\n  const version = doc.$__getValue(key) || 0;\n  return new VersionError(doc, version, modifiedPaths);\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation with just the modified paths if `isNew` is `false`.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] if `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Array} [options.pathsToSave] An array of paths that tell mongoose to only validate and save the paths in `pathsToSave`.\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise}\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = async function save(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.save() no longer accepts a callback');\n  }\n\n  let parallelSave;\n  this.$op = 'save';\n\n  if (this.$__.saving) {\n    parallelSave = new ParallelSaveError(this);\n  } else {\n    this.$__.saving = new ParallelSaveError(this);\n  }\n\n  options = new SaveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  if (this.$__.timestamps != null) {\n    options.timestamps = this.$__.timestamps;\n  }\n  this.$__.$versionError = generateVersionError(this, this.modifiedPaths());\n\n  if (parallelSave) {\n    this.$__handleReject(parallelSave);\n    throw parallelSave;\n  }\n\n  this.$__.saveOptions = options;\n\n  await new Promise((resolve, reject) => {\n    this.$__save(options, error => {\n      this.$__.saving = null;\n      this.$__.saveOptions = null;\n      this.$__.$versionError = null;\n      this.$op = null;\n      if (error != null) {\n        this.$__handleReject(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n\n  return this;\n};\n\nModel.prototype.$save = Model.prototype.save;\n\n/**\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n * @api private\n */\nfunction shouldSkipVersioning(self, path) {\n  const skipVersioning = self.$__schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n\n  return skipVersioning[path];\n}\n\n/**\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where Unused\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [op]\n * @api private\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n  // disabled versioning?\n  if (self.$__schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n\n  if (self.$__schema.options.optimisticConcurrency) {\n    return;\n  }\n\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n    case '$inc':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n  if (op === '$push' || op === '$addToSet' || op === '$pullAll' || op === '$pull') {\n    if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n      increment.call(self);\n    } else {\n      self.$__.version = VERSION_INC;\n    }\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    increment.call(self);\n  } else if (Array.isArray(val)) {\n    // $set an array\n    increment.call(self);\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/**\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n * @api private\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function(atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  const atomics = value[arrayAtomicsSymbol];\n  const ops = Object.keys(atomics);\n  let i = ops.length;\n  let val;\n  let op;\n\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({ depopulate: 1, _isNested: true });\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n\n    return operand(self, where, delta, data, value);\n  }\n\n  function iter(mem) {\n    return utils.isMongooseObject(mem)\n      ? mem.toObject({ depopulate: 1, _isNested: true })\n      : mem;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({ depopulate: true, transform: false, _isNested: true });\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n\n    if (op === '$addToSet') {\n      val = { $each: val };\n    }\n\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__delta = function() {\n  const dirty = this.$__dirty();\n  const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n  if (optimisticConcurrency) {\n    if (Array.isArray(optimisticConcurrency)) {\n      const optCon = new Set(optimisticConcurrency);\n      const modPaths = this.modifiedPaths();\n      if (modPaths.find(path => optCon.has(path))) {\n        this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n      }\n    } else {\n      this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n    }\n  }\n\n  if (!dirty.length && VERSION_ALL !== this.$__.version) {\n    return;\n  }\n  const where = {};\n  const delta = {};\n  const len = dirty.length;\n  const divergent = [];\n  let d = 0;\n\n  where._id = this._doc._id;\n  // If `_id` is an object, need to depopulate, but also need to be careful\n  // because `_id` can technically be null (see gh-6406)\n  if ((where && where._id && where._id.$__ || null) != null) {\n    where._id = where._id.toObject({ transform: false, depopulate: true });\n  }\n  for (; d < len; ++d) {\n    const data = dirty[d];\n    let value = data.value;\n    const match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n\n    const pop = this.$populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      const pathSplit = data.path.split('.');\n      const top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    // If this path is set to default, and either this path or one of\n    // its parents is excluded, don't treat this path as dirty.\n    if (this.$isDefault(data.path) && this.$__.selected) {\n      if (data.path.indexOf('.') === -1 && isPathExcluded(this.$__.selected, data.path)) {\n        continue;\n      }\n\n      const pathsToCheck = parentPaths(data.path);\n      if (pathsToCheck.find(path => isPathExcluded(this.$__.isSelected, path))) {\n        continue;\n      }\n    }\n\n    if (divergent.length) continue;\n    if (value === undefined) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (utils.isMongooseArray(value) && value.$path() && value[arrayAtomicsSymbol]) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value[MongooseBuffer.pathSymbol] && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[data.path] != null) {\n        const val = this.$__.primitiveAtomics[data.path];\n        const op = firstKey(val);\n        operand(this, where, delta, data, val[op], op);\n      } else {\n        value = clone(value, {\n          depopulate: true,\n          transform: false,\n          virtuals: false,\n          getters: false,\n          omitUndefined: true,\n          _isNested: true\n        });\n        operand(this, where, delta, data, value);\n      }\n    }\n  }\n\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n\n  if (Object.keys(delta).length === 0) {\n    return [where, null];\n  }\n\n  return [where, delta];\n};\n\n/**\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @param {Any} array\n * @return {String|undefined}\n * @api private\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  const pop = doc.$populated(path, true);\n\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    const top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n\n  if (!(pop && utils.isMongooseArray(array))) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarly destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  const check = pop.options.match ||\n      pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') || // 0 is not permitted\n      pop.options.options && pop.options.options.skip || // 0 is permitted\n      pop.options.select && // deselected _id?\n      (pop.options.select._id === 0 ||\n      /\\s?-_id\\s?/.test(pop.options.select));\n\n  if (check) {\n    const atomics = array[arrayAtomicsSymbol];\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__version = function(where, delta) {\n  const key = this.$__schema.options.versionKey;\n  if (where === true) {\n    // this is an insert\n    if (key) {\n      setDottedPath(delta, key, 0);\n      this.$__setValue(key, 0);\n    }\n    return;\n  }\n\n  if (key === false) {\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n\n  if (!this.$__isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    const value = this.$__getValue(key);\n    if (value != null) where[key] = value;\n  }\n\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n}\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * #### Example:\n *\n *     const doc = await Model.findById(id);\n *     doc.increment();\n *     await doc.save();\n *\n * @see versionKeys https://mongoosejs.com/docs/guide.html#versionKey\n * @memberOf Model\n * @method increment\n * @api public\n */\n\nModel.prototype.increment = increment;\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n\n  if (this._doc._id === void 0) {\n    return new MongooseError('No _id found on document!');\n  }\n\n  return where;\n};\n\n/**\n * Delete this document from the db.\n *\n * #### Example:\n *\n *     await product.deleteOne();\n *     await Product.findById(product._id); // null\n *\n * @return {Query} Query\n * @api public\n */\n\nModel.prototype.deleteOne = function deleteOne(options) {\n  if (typeof options === 'function' ||\n      typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n\n  const self = this;\n  const where = this.$__where();\n  if (where instanceof Error) {\n    throw where;\n  }\n  const query = self.constructor.deleteOne(where, options);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  query.pre(function queryPreDeleteOne(cb) {\n    self.constructor._middleware.execPre('deleteOne', self, [self], cb);\n  });\n  query.pre(function callSubdocPreHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPre('deleteOne', subdoc, [subdoc], cb);\n    }, cb);\n  });\n  query.pre(function skipIfAlreadyDeleted(cb) {\n    if (self.$__.isDeleted) {\n      return cb(Kareem.skipWrappedFunction());\n    }\n    return cb();\n  });\n  query.post(function callSubdocPostHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPost('deleteOne', subdoc, [subdoc], {}, cb);\n    }, cb);\n  });\n  query.post(function queryPostDeleteOne(cb) {\n    self.constructor._middleware.execPost('deleteOne', self, [self], {}, cb);\n  });\n\n  return query;\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method $model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.$model = function $model(name) {\n  if (arguments.length === 0) {\n    return this.constructor;\n  }\n  return this[modelDbSymbol].model(name);\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.model = Model.prototype.$model;\n\n/**\n * Returns a document with `_id` only if at least one document exists in the database that matches\n * the given `filter`, and `null` otherwise.\n *\n * Under the hood, `MyModel.exists({ answer: 42 })` is equivalent to\n * `MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean()`\n *\n * #### Example:\n *\n *     await Character.deleteMany({});\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     await Character.exists({ name: /picard/i }); // { _id: ... }\n *     await Character.exists({ name: /riker/i }); // null\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * @param {Object} filter\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n */\n\nModel.exists = function exists(filter, options) {\n  _checkContext(this, 'exists');\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.exists() no longer accepts a callback');\n  }\n\n  const query = this.findOne(filter).\n    select({ _id: 1 }).\n    lean().\n    setOptions(options);\n\n  return query;\n};\n\n/**\n * Adds a discriminator type.\n *\n * #### Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     const PersonSchema = new BaseSchema();\n *     const BossSchema = new BaseSchema({ department: String });\n *\n *     const Person = mongoose.model('Person', PersonSchema);\n *     const Boss = Person.discriminator('Boss', BossSchema);\n *     new Boss().__t; // \"Boss\". `__t` is the default `discriminatorKey`\n *\n *     const employeeSchema = new Schema({ boss: ObjectId });\n *     const Employee = Person.discriminator('Employee', employeeSchema, 'staff');\n *     new Employee().__t; // \"staff\" because of 3rd argument above\n *\n * @param {String} name discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {Object|String} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @param {Boolean} [options.overwriteModels=false] by default, Mongoose does not allow you to define a discriminator with the same name as another discriminator. Set this to allow overwriting discriminators with the same name.\n * @param {Boolean} [options.mergeHooks=true] By default, Mongoose merges the base schema's hooks with the discriminator schema's hooks. Set this option to `false` to make Mongoose use the discriminator schema's hooks instead.\n * @param {Boolean} [options.mergePlugins=true] By default, Mongoose merges the base schema's plugins with the discriminator schema's plugins. Set this option to `false` to make Mongoose use the discriminator schema's plugins instead.\n * @return {Model} The newly created discriminator model\n * @api public\n */\n\nModel.discriminator = function(name, schema, options) {\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new MongooseError('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean' ? options.clone : true;\n  const mergePlugins = typeof options.mergePlugins === 'boolean' ? options.mergePlugins : true;\n\n  _checkContext(this, 'discriminator');\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema instanceof Schema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this, name, schema, value, mergePlugins, options.mergeHooks);\n  if (this.db.models[name] && !schema.options.overwriteModels) {\n    throw new OverwriteModelError(name);\n  }\n\n  schema.$isRootDiscriminator = true;\n  schema.$globalPluginsApplied = true;\n\n  model = this.db.model(model || name, schema, this.$__collection.name);\n  this.discriminators[name] = model;\n  const d = this.discriminators[name];\n  Object.setPrototypeOf(d.prototype, this.prototype);\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n\n  if (this[subclassedSymbol] != null) {\n    for (const submodel of this[subclassedSymbol]) {\n      submodel.discriminators = submodel.discriminators || {};\n      submodel.discriminators[name] =\n        model.__subclass(model.db, schema, submodel.collection.name);\n    }\n  }\n\n  return d;\n};\n\n/**\n * Make sure `this` is a model\n * @api private\n */\n\nfunction _checkContext(ctx, fnName) {\n  // Check context, because it is easy to mistakenly type\n  // `new Model.discriminator()` and get an incomprehensible error\n  if (ctx == null || ctx === global) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are calling `MyModel.' + fnName + '()` ' +\n      'where `MyModel` is a Mongoose model.');\n  } else if (ctx[modelSymbol] == null) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are not calling ' +\n      '`new Model.' + fnName + '()`');\n  }\n}\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (const i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * This function is responsible for initializing the underlying connection in MongoDB based on schema options.\n * This function performs the following operations:\n *\n * - `createCollection()` unless [`autoCreate`](https://mongoosejs.com/docs/guide.html#autoCreate) option is turned off\n * - `ensureIndexes()` unless [`autoIndex`](https://mongoosejs.com/docs/guide.html#autoIndex) option is turned off\n * - `createSearchIndex()` on all schema search indexes if `autoSearchIndex` is enabled.\n *\n * Mongoose calls this function automatically when a model is a created using\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) or\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()), so you\n * don't need to call `init()` to trigger index builds.\n *\n * However, you _may_ need to call `init()`  to get back a promise that will resolve when your indexes are finished.\n * Calling `await Model.init()` is helpful if you need to wait for indexes to build before continuing.\n * For example, if you want to wait for unique indexes to build before continuing with a test case.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     await Event.init();\n *     console.log('Indexes are done building!');\n *\n * @api public\n * @returns {Promise}\n */\n\nModel.init = function init() {\n  _checkContext(this, 'init');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.init() no longer accepts a callback');\n  }\n\n  this.schema.emit('init', this);\n\n  if (this.$init != null) {\n    return this.$init;\n  }\n\n  const conn = this.db;\n  const _ensureIndexes = async() => {\n    const autoIndex = utils.getOption(\n      'autoIndex',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoIndex) {\n      return;\n    }\n    return await this.ensureIndexes({ _automatic: true });\n  };\n  const _createSearchIndexes = async() => {\n    const autoSearchIndex = utils.getOption(\n      'autoSearchIndex',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoSearchIndex) {\n      return;\n    }\n\n    const results = [];\n    for (const searchIndex of this.schema._searchIndexes) {\n      results.push(await this.createSearchIndex(searchIndex));\n    }\n    return results;\n  };\n  const _createCollection = async() => {\n    if ((conn.readyState === STATES.connecting || conn.readyState === STATES.disconnected) && conn._shouldBufferCommands()) {\n      await new Promise(resolve => {\n        conn._queue.push({ fn: resolve });\n      });\n    }\n    const autoCreate = utils.getOption(\n      'autoCreate',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoCreate) {\n      return;\n    }\n    return await this.createCollection();\n  };\n\n  this.$init = _createCollection().\n    then(() => _ensureIndexes()).\n    then(() => _createSearchIndexes());\n\n  const _catch = this.$init.catch;\n  const _this = this;\n  this.$init.catch = function() {\n    _this.$caught = true;\n    return _catch.apply(_this.$init, arguments);\n  };\n\n  return this.$init;\n};\n\n\n/**\n * Create the collection for this model. By default, if no indexes are specified,\n * mongoose will not create the collection for the model until any documents are\n * created. Use this method to create the collection explicitly.\n *\n * Note 1: You may need to call this before starting a transaction\n * See https://www.mongodb.com/docs/manual/core/transactions/#transactions-and-operations\n *\n * Note 2: You don't have to call this if your schema contains index or unique field.\n * In that case, just use `Model.init()`\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String })\n *     const User = mongoose.model('User', userSchema);\n *\n *     User.createCollection().then(function(collection) {\n *       console.log('Collection is created!');\n *     });\n *\n * @api public\n * @param {Object} [options] see [MongoDB driver docs](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n * @returns {Promise}\n */\n\nModel.createCollection = async function createCollection(options) {\n  _checkContext(this, 'createCollection');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createCollection() no longer accepts a callback');\n  }\n\n  const shouldSkip = await new Promise((resolve, reject) => {\n    this.hooks.execPre('createCollection', this, [options], (err) => {\n      if (err != null) {\n        if (err instanceof Kareem.skipWrappedFunction) {\n          return resolve(true);\n        }\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  const collectionOptions = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collectionOptions;\n  if (collectionOptions != null) {\n    options = Object.assign({}, collectionOptions, options);\n  }\n\n  const schemaCollation = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collation;\n  if (schemaCollation != null) {\n    options = Object.assign({ collation: schemaCollation }, options);\n  }\n  const capped = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.capped;\n  if (capped != null) {\n    if (typeof capped === 'number') {\n      options = Object.assign({ capped: true, size: capped }, options);\n    } else if (typeof capped === 'object') {\n      options = Object.assign({ capped: true }, capped, options);\n    }\n  }\n  const timeseries = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.timeseries;\n  if (timeseries != null) {\n    options = Object.assign({ timeseries }, options);\n    if (options.expireAfterSeconds != null) {\n      // do nothing\n    } else if (options.expires != null) {\n      utils.expires(options);\n    } else if (this.schema.options.expireAfterSeconds != null) {\n      options.expireAfterSeconds = this.schema.options.expireAfterSeconds;\n    } else if (this.schema.options.expires != null) {\n      options.expires = this.schema.options.expires;\n      utils.expires(options);\n    }\n  }\n\n  const clusteredIndex = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.clusteredIndex;\n  if (clusteredIndex != null) {\n    options = Object.assign({ clusteredIndex: { ...clusteredIndex, unique: true } }, options);\n  }\n\n  try {\n    if (!shouldSkip) {\n      await this.db.createCollection(this.$__collection.collectionName, options);\n    }\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      await new Promise((resolve, reject) => {\n        const _opts = { error: err };\n        this.hooks.execPost('createCollection', this, [null], _opts, (err) => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n  }\n\n  await new Promise((resolve, reject) => {\n    this.hooks.execPost('createCollection', this, [this.$__collection], (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  return this.$__collection;\n};\n\n/**\n * Makes the indexes in MongoDB match the indexes defined in this model's\n * schema. This function will drop any indexes that are not defined in\n * the model's schema except the `_id` index, and build any indexes that\n * are in your schema but not in MongoDB.\n *\n * See the [introductory blog post](https://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes)\n * for more information.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.collection.createIndex({ age: 1 }); // Index is not in schema\n *     // Will drop the 'age' index and create an index on `name`\n *     await Customer.syncIndexes();\n *\n * You should be careful about running `syncIndexes()` on production applications under heavy load,\n * because index builds are expensive operations, and unexpected index drops can lead to degraded\n * performance. Before running `syncIndexes()`, you can use the [`diffIndexes()` function](#Model.diffIndexes())\n * to check what indexes `syncIndexes()` will drop and create.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options] options to pass to `ensureIndexes()`\n * @param {Boolean} [options.background=null] if specified, overrides each index's `background` property\n * @return {Promise}\n * @api public\n */\n\nModel.syncIndexes = async function syncIndexes(options) {\n  _checkContext(this, 'syncIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n\n  const model = this;\n\n  try {\n    await model.createCollection();\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n\n  const diffIndexesResult = await model.diffIndexes();\n  const dropped = await model.cleanIndexes({ ...options, toDrop: diffIndexesResult.toDrop });\n  await model.createIndexes({ ...options, toCreate: diffIndexesResult.toCreate });\n\n  return dropped;\n};\n\n/**\n * Create an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/).\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.createSearchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *\n * @param {Object} description index options, including `name` and `definition`\n * @param {String} description.name\n * @param {Object} description.definition\n * @return {Promise}\n * @api public\n */\n\nModel.createSearchIndex = async function createSearchIndex(description) {\n  _checkContext(this, 'createSearchIndex');\n\n  return await this.$__collection.createSearchIndex(description);\n};\n\n/**\n * Update an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/).\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.updateSearchIndex('test', { mappings: { dynamic: true } });\n *\n * @param {String} name\n * @param {Object} definition\n * @return {Promise}\n * @api public\n */\n\nModel.updateSearchIndex = async function updateSearchIndex(name, definition) {\n  _checkContext(this, 'updateSearchIndex');\n\n  return await this.$__collection.updateSearchIndex(name, definition);\n};\n\n/**\n * Delete an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) by name.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.dropSearchIndex('test');\n *\n * @param {String} name\n * @return {Promise}\n * @api public\n */\n\nModel.dropSearchIndex = async function dropSearchIndex(name) {\n  _checkContext(this, 'dropSearchIndex');\n\n  return await this.$__collection.dropSearchIndex(name);\n};\n\n/**\n * List all [Atlas search indexes](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) on this model's collection.\n * This function only works when connected to MongoDB Atlas.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *\n *     await Customer.createSearchIndex({ name: 'test', definition: { mappings: { dynamic: true } } });\n *     const res = await Customer.listSearchIndexes(); // Includes `[{ name: 'test' }]`\n *\n * @param {Object} [options]\n * @return {Promise<Array>}\n * @api public\n */\n\nModel.listSearchIndexes = async function listSearchIndexes(options) {\n  _checkContext(this, 'listSearchIndexes');\n\n  const cursor = await this.$__collection.listSearchIndexes(options);\n\n  return await cursor.toArray();\n};\n\n/**\n * Does a dry-run of `Model.syncIndexes()`, returning the indexes that `syncIndexes()` would drop and create if you were to run `syncIndexes()`.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options]\n * @return {Promise<Object>} contains the indexes that would be dropped in MongoDB and indexes that would be created in MongoDB as `{ toDrop: string[], toCreate: string[] }`.\n */\n\nModel.diffIndexes = async function diffIndexes() {\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n\n  const model = this;\n\n  let dbIndexes = await model.listIndexes().catch(err => {\n    if (err.codeName == 'NamespaceNotFound') {\n      return undefined;\n    }\n    throw err;\n  });\n  if (dbIndexes === undefined) {\n    dbIndexes = [];\n  }\n  dbIndexes = getRelatedDBIndexes(model, dbIndexes);\n\n  const schema = model.schema;\n  const schemaIndexes = getRelatedSchemaIndexes(model, schema.indexes());\n\n  const toDrop = getIndexesToDrop(schema, schemaIndexes, dbIndexes);\n  const toCreate = getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop);\n\n  return { toDrop, toCreate };\n};\n\nfunction getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop) {\n  const toCreate = [];\n\n  for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n    let found = false;\n\n    const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n\n    for (const index of dbIndexes) {\n      if (isDefaultIdIndex(index)) {\n        continue;\n      }\n      if (\n        isIndexEqual(schemaIndexKeysObject, options, index) &&\n        !toDrop.includes(index.name)\n      ) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      toCreate.push(schemaIndexKeysObject);\n    }\n  }\n\n  return toCreate;\n}\n\nfunction getIndexesToDrop(schema, schemaIndexes, dbIndexes) {\n  const toDrop = [];\n\n  for (const dbIndex of dbIndexes) {\n    let found = false;\n    // Never try to drop `_id` index, MongoDB server doesn't allow it\n    if (isDefaultIdIndex(dbIndex)) {\n      continue;\n    }\n\n    for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n      const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n      applySchemaCollation(schemaIndexKeysObject, options, schema.options);\n\n      if (isIndexEqual(schemaIndexKeysObject, options, dbIndex)) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      toDrop.push(dbIndex.name);\n    }\n  }\n\n  return toDrop;\n}\n/**\n * Deletes all indexes that aren't defined in this model's schema. Used by\n * `syncIndexes()`.\n *\n * The returned promise resolves to a list of the dropped indexes' names as an array\n *\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.cleanIndexes = async function cleanIndexes(options) {\n  _checkContext(this, 'cleanIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.cleanIndexes() no longer accepts a callback');\n  }\n  const model = this;\n\n  const collection = model.$__collection;\n\n  if (Array.isArray(options && options.toDrop)) {\n    const res = await _dropIndexes(options.toDrop, collection);\n    return res;\n  }\n\n  const res = await model.diffIndexes();\n  return await _dropIndexes(res.toDrop, collection);\n};\n\nasync function _dropIndexes(toDrop, collection) {\n  if (toDrop.length === 0) {\n    return [];\n  }\n\n  await Promise.all(toDrop.map(indexName => collection.dropIndex(indexName)));\n  return toDrop;\n}\n\n/**\n * Lists the indexes currently defined in MongoDB. This may or may not be\n * the same as the indexes defined in your schema depending on whether you\n * use the [`autoIndex` option](https://mongoosejs.com/docs/guide.html#autoIndex) and if you\n * build indexes manually.\n *\n * @return {Promise}\n * @api public\n */\n\nModel.listIndexes = async function listIndexes() {\n  _checkContext(this, 'listIndexes');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.listIndexes() no longer accepts a callback');\n  }\n\n  if (this.$__collection.buffer) {\n    await new Promise(resolve => {\n      this.$__collection.addQueue(resolve);\n    });\n  }\n\n  return this.$__collection.listIndexes().toArray();\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * #### Example:\n *\n *     await Event.ensureIndexes();\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     });\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = async function ensureIndexes(options) {\n  _checkContext(this, 'ensureIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.ensureIndexes() no longer accepts a callback');\n  }\n\n  await new Promise((resolve, reject) => {\n    _ensureIndexes(this, options, (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createIndex)\n * function.\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = async function createIndexes(options) {\n  _checkContext(this, 'createIndexes');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createIndexes() no longer accepts a callback');\n  }\n\n  return this.ensureIndexes(options);\n};\n\n\n/*!\n * ignore\n */\n\nfunction _ensureIndexes(model, options, callback) {\n  const indexes = model.schema.indexes();\n  let indexError;\n\n  options = options || {};\n  const done = function(err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err || indexError);\n    callback && callback(err || indexError);\n  };\n\n  for (const index of indexes) {\n    if (isDefaultIdIndex(index)) {\n      utils.warn('mongoose: Cannot specify a custom index on `_id` for ' +\n        'model name \"' + model.modelName + '\", ' +\n        'MongoDB does not allow overwriting the default `_id` index. See ' +\n        'https://bit.ly/mongodb-id-index');\n    }\n  }\n\n  if (!indexes.length) {\n    immediate(function() {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  const indexSingleDone = function(err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  const indexSingleStart = function(fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n\n  const baseSchema = model.schema._baseSchema;\n  const baseSchemaIndexes = baseSchema ? baseSchema.indexes() : [];\n\n  immediate(function() {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n\n\n  function create() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false ||\n          (model.schema.options.autoIndex == null && model.db.config.autoIndex === false)) {\n        return done();\n      }\n    }\n\n    const index = indexes.shift();\n    if (!index) {\n      return done();\n    }\n    if (options._automatic && index[1]._autoIndex === false) {\n      return create();\n    }\n\n    if (baseSchemaIndexes.find(i => utils.deepEqual(i, index))) {\n      return create();\n    }\n\n    const indexFields = clone(index[0]);\n    const indexOptions = clone(index[1]);\n\n    delete indexOptions._autoIndex;\n    decorateDiscriminatorIndexOptions(model.schema, indexOptions);\n    applyWriteConcern(model.schema, indexOptions);\n    applySchemaCollation(indexFields, indexOptions, model.schema.options);\n\n    indexSingleStart(indexFields, options);\n\n    if ('background' in options) {\n      indexOptions.background = options.background;\n    }\n\n    if ('toCreate' in options) {\n      if (options.toCreate.length === 0) {\n        return done();\n      }\n    }\n\n    model.collection.createIndex(indexFields, indexOptions).then(\n      name => {\n        indexSingleDone(null, indexFields, indexOptions, name);\n        create();\n      },\n      err => {\n        if (!indexError) {\n          indexError = err;\n        }\n        if (!model.$caught) {\n          model.emit('error', err);\n        }\n\n        indexSingleDone(err, indexFields, indexOptions);\n        create();\n      }\n    );\n  }\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/**\n * Connection instance the model uses.\n *\n * @property db\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/**\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Internal collection the model uses.\n *\n * @property collection\n * @api private\n * @memberOf Model\n */\nModel.$__collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * #### Example:\n *\n *     await Character.find(Character.translateAliases({\n *        '名': 'Eddard Stark' // Alias for 'name'\n *     });\n *\n * By default, `translateAliases()` overwrites raw fields with aliased fields.\n * So if `n` is an alias for `name`, `{ n: 'alias', name: 'raw' }` will resolve to `{ name: 'alias' }`.\n * However, you can set the `errorOnDuplicates` option to throw an error if there are potentially conflicting paths.\n * The `translateAliases` option for queries uses `errorOnDuplicates`.\n *\n * #### Note:\n *\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} fields fields/conditions that may contain aliased keys\n * @param {Boolean} [errorOnDuplicates] if true, throw an error if there's both a key and an alias for that key in `fields`\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields, errorOnDuplicates) {\n  _checkContext(this, 'translateAliases');\n\n  const translate = (key, value) => {\n    let alias;\n    const translated = [];\n    const fieldKeys = key.split('.');\n    let currentSchema = this.schema;\n    for (const i in fieldKeys) {\n      const name = fieldKeys[i];\n      if (currentSchema && currentSchema.aliases[name]) {\n        alias = currentSchema.aliases[name];\n        if (errorOnDuplicates && alias in fields) {\n          throw new MongooseError(`Provided object has both field \"${name}\" and its alias \"${alias}\"`);\n        }\n        // Alias found,\n        translated.push(alias);\n      } else {\n        alias = name;\n        // Alias not found, so treat as un-aliased key\n        translated.push(name);\n      }\n\n      // Check if aliased path is a schema\n      if (currentSchema && currentSchema.paths[alias]) {\n        currentSchema = currentSchema.paths[alias].schema;\n      }\n      else\n        currentSchema = null;\n    }\n\n    const translatedKey = translated.join('.');\n    if (fields instanceof Map)\n      fields.set(translatedKey, value);\n    else\n      fields[translatedKey] = value;\n\n    if (translatedKey !== key) {\n      // We'll be using the translated key instead\n      if (fields instanceof Map) {\n        // Delete from map\n        fields.delete(key);\n      } else {\n        // Delete from object\n        delete fields[key]; // We'll be using the translated key instead\n      }\n    }\n    return fields;\n  };\n\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    if (fields instanceof Map) {\n      // A Map was supplied\n      for (const field of new Map(fields)) {\n        fields = translate(field[0], field[1]);\n      }\n    } else {\n      // Infer a regular object was supplied\n      for (const key of Object.keys(fields)) {\n        fields = translate(key, fields[key]);\n        if (key[0] === '$') {\n          if (Array.isArray(fields[key])) {\n            for (const i in fields[key]) {\n              // Recursively translate nested queries\n              fields[key][i] = this.translateAliases(fields[key][i]);\n            }\n          } else {\n            this.translateAliases(fields[key]);\n          }\n        }\n      }\n    }\n\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * It returns an object with the property `deletedCount` indicating how many documents were deleted.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' }); // returns {deletedCount: 1}\n *\n * #### Note:\n *\n * This function triggers `deleteOne` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, options) {\n  _checkContext(this, 'deleteOne');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  return mq.deleteOne(conditions);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * It returns an object with the property `deletedCount` containing the number of documents deleted.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }); // returns {deletedCount: x} where x is the number of documents deleted.\n *\n * #### Note:\n *\n * This function triggers `deleteMany` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, options) {\n  _checkContext(this, 'deleteMany');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.deleteMany() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  return mq.deleteMany(conditions);\n};\n\n/**\n * Finds documents.\n *\n * Mongoose casts the `filter` to match the model's schema before the command is sent.\n * See our [query casting tutorial](https://mongoosejs.com/docs/tutorials/query_casting.html) for\n * more information on how Mongoose casts `filter`.\n *\n * #### Example:\n *\n *     // find all documents\n *     await MyModel.find({});\n *\n *     // find all documents named john and at least 18\n *     await MyModel.find({ name: 'john', age: { $gte: 18 } }).exec();\n *\n *     // executes, name LIKE john and only selecting the \"name\" and \"friends\" fields\n *     await MyModel.find({ name: /john/i }, 'name friends').exec();\n *\n *     // passing options\n *     await MyModel.find({ name: /john/i }, null, { skip: 10 }).exec();\n *\n * @param {Object|ObjectId} filter\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see query casting https://mongoosejs.com/docs/tutorials/query_casting.html\n * @api public\n */\n\nModel.find = function find(conditions, projection, options) {\n  _checkContext(this, 'find');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.find() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n\n  return mq.find(conditions);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * #### Example:\n *\n *     // Find the adventure with the given `id`, or `null` if not found\n *     await Adventure.findById(id).exec();\n *\n *     // select only the adventures name and length\n *     await Adventure.findById(id, 'name length').exec();\n *\n * @param {Any} id value of `_id` to query by\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @see findById in Mongoose https://masteringjs.io/tutorials/mongoose/find-by-id\n * @api public\n */\n\nModel.findById = function findById(id, projection, options) {\n  _checkContext(this, 'findById');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findById() no longer accepts a callback');\n  }\n\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n\n  return this.findOne({ _id: id }, projection, options);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * #### Example:\n *\n *     // Find one adventure whose `country` is 'Croatia', otherwise `null`\n *     await Adventure.findOne({ country: 'Croatia' }).exec();\n *\n *     // Model.findOne() no longer accepts a callback\n *\n *     // Select only the adventures name and length\n *     await Adventure.findOne({ country: 'Croatia' }, 'name length').exec();\n *\n * @param {Object} [conditions]\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options) {\n  _checkContext(this, 'findOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOne() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n\n  return mq.findOne(conditions);\n};\n\n/**\n * Estimates the number of documents in the MongoDB collection. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * #### Example:\n *\n *     const numAdventures = await Adventure.estimatedDocumentCount();\n *\n * @param {Object} [options]\n * @return {Query}\n * @api public\n */\n\nModel.estimatedDocumentCount = function estimatedDocumentCount(options) {\n  _checkContext(this, 'estimatedDocumentCount');\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  return mq.estimatedDocumentCount(options);\n};\n\n/**\n * Counts number of documents matching `filter` in a database collection.\n *\n * #### Example:\n *\n *     Adventure.countDocuments({ type: 'jungle' }, function (err, count) {\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * If you want to count all documents in a large collection,\n * use the [`estimatedDocumentCount()` function](https://mongoosejs.com/docs/api/model.html#Model.estimatedDocumentCount())\n * instead. If you call `countDocuments({})`, MongoDB will always execute\n * a full collection scan and **not** use any indexes.\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} filter\n * @return {Query}\n * @api public\n */\n\nModel.countDocuments = function countDocuments(conditions, options) {\n  _checkContext(this, 'countDocuments');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.countDocuments() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  if (options != null) {\n    mq.setOptions(options);\n  }\n\n  return mq.countDocuments(conditions);\n};\n\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * #### Example:\n *\n *     const query = Link.distinct('url');\n *     query.exec();\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions) {\n  _checkContext(this, 'distinct');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.distinct() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  return mq.distinct(field, conditions);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({ age: { $gte: 21, $lte: 65 } });\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec();\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  _checkContext(this, 'where');\n\n  void val; // eslint\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where https://mongoosejs.com/docs/api/query.html#Query.prototype.$where\n * @api public\n */\n\nModel.$where = function $where() {\n  _checkContext(this, '$where');\n\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes if `callback` is passed else a Query object is returned.\n *\n * #### Example:\n *\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     const query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation that\n * you can enable by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id);\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.fields] Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Tutorial https://mongoosejs.com/docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findOneAndUpdate = function(conditions, update, options) {\n  _checkContext(this, 'findOneAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndUpdate() no longer accepts a callback');\n  }\n\n  if (arguments.length === 1) {\n    update = conditions;\n    conditions = null;\n    options = null;\n  }\n\n  let fields;\n  if (options) {\n    fields = options.fields || options.projection;\n  }\n\n  update = clone(update, {\n    depopulate: true,\n    _isNested: true\n  });\n\n  decorateUpdateWithVersionKey(update, options, this.schema.options.versionKey);\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndUpdate(conditions, update, options);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Example:\n *\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Model.findOneAndUpdate https://mongoosejs.com/docs/api/model.html#Model.findOneAndUpdate()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findByIdAndUpdate = function(id, update, options) {\n  _checkContext(this, 'findByIdAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findByIdAndUpdate() no longer accepts a callback');\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n\n  return this.findOneAndUpdate.call(this, { _id: id }, update, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * #### Example:\n *\n *     A.findOneAndDelete(conditions, options)  // return Query\n *     A.findOneAndDelete(conditions) // returns Query\n *     A.findOneAndDelete()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndDelete = function(conditions, options) {\n  _checkContext(this, 'findOneAndDelete');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOneAndDelete() no longer accepts a callback');\n  }\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndDelete(conditions, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command by a document's _id field.\n * In other words, `findByIdAndDelete(id)` is a shorthand for\n * `findOneAndDelete({ _id: id })`.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndDelete https://mongoosejs.com/docs/api/model.html#Model.findOneAndDelete()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n */\n\nModel.findByIdAndDelete = function(id, options) {\n  _checkContext(this, 'findByIdAndDelete');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findByIdAndDelete() no longer accepts a callback');\n  }\n\n  return this.findOneAndDelete({ _id: id }, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndReplace()` command.\n *\n * Finds a matching document, replaces it with the provided doc, and returns the document.\n *\n * This function triggers the following query middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Example:\n *\n *     A.findOneAndReplace(filter, replacement, options)  // return Query\n *     A.findOneAndReplace(filter, replacement) // returns Query\n *     A.findOneAndReplace()                    // returns Query\n *\n * @param {Object} filter Replace the first document that matches this filter\n * @param {Object} [replacement] Replace with this document\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndReplace = function(filter, replacement, options) {\n  _checkContext(this, 'findOneAndReplace');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndReplace() no longer accepts a callback');\n  }\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndReplace(filter, replacement, options);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * #### Example:\n *\n *     // Insert one new `Character` document\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     // Insert multiple new `Character` documents\n *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);\n *\n *     // Create a new character within a transaction. Note that you **must**\n *     // pass an array as the first parameter to `create()` if you want to\n *     // specify options.\n *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });\n *\n * @param {Array|Object} docs Documents to insert, as a spread or array\n * @param {Object} [options] Options passed down to `save()`. To specify `options`, `docs` **must** be an array, not a spread. See [Model.save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) for available options.\n * @param {Boolean} [options.ordered] saves the docs in series rather than parallel.\n * @param {Boolean} [options.aggregateErrors] Aggregate Errors instead of throwing the first one that occurs. Default: false\n * @return {Promise}\n * @api public\n */\n\nModel.create = async function create(doc, options) {\n  if (typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.create() no longer accepts a callback');\n  }\n\n  _checkContext(this, 'create');\n\n  let args;\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  if (Array.isArray(doc)) {\n    args = doc;\n    options = options != null && typeof options === 'object' ? options : {};\n  } else {\n    const last = arguments[arguments.length - 1];\n    options = {};\n    const hasCallback = typeof last === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[2] === 'function';\n    if (hasCallback) {\n      throw new MongooseError('Model.create() no longer accepts a callback');\n    } else {\n      args = [...arguments];\n      // For backwards compatibility with 6.x, because of gh-5061 Mongoose 6.x and\n      // older would treat a falsy last arg as a callback. We don't want to throw\n      // an error here, because it would look strange if `Test.create({}, void 0)`\n      // threw a callback error. But we also don't want to create an unnecessary document.\n      if (args.length > 1 && !last) {\n        args.pop();\n      }\n    }\n\n    if (args.length === 2 &&\n        args[0] != null &&\n        args[1] != null &&\n        args[0].session == null &&\n        last &&\n        getConstructorName(last.session) === 'ClientSession' &&\n        !this.schema.path('session')) {\n      // Probably means the user is running into the common mistake of trying\n      // to use a spread to specify options, see gh-7535\n      utils.warn('WARNING: to pass a `session` to `Model.create()` in ' +\n        'Mongoose, you **must** pass an array as the first argument. See: ' +\n        'https://mongoosejs.com/docs/api/model.html#Model.create()');\n    }\n  }\n\n  if (args.length === 0) {\n    return Array.isArray(doc) ? [] : null;\n  }\n  let res = [];\n  const immediateError = typeof options.aggregateErrors === 'boolean' ? !options.aggregateErrors : true;\n\n  delete options.aggregateErrors; // dont pass on the option to \"$save\"\n\n  if (options.ordered) {\n    for (let i = 0; i < args.length; i++) {\n      try {\n        const doc = args[i];\n        const Model = this.discriminators && doc[discriminatorKey] != null ?\n          this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n          this;\n        if (Model == null) {\n          throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n          `found for model \"${this.modelName}\"`);\n        }\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n\n        await toSave.$save(options);\n        res.push(toSave);\n      } catch (err) {\n        if (!immediateError) {\n          res.push(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return res;\n  } else if (!immediateError) {\n    res = await Promise.allSettled(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ?\n        this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n        this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n      }\n      let toSave = doc;\n\n      if (!(toSave instanceof Model)) {\n        toSave = new Model(toSave);\n      }\n\n      await toSave.$save(options);\n\n      return toSave;\n    }));\n    res = res.map(result => result.status === 'fulfilled' ? result.value : result.reason);\n  } else {\n    let firstError = null;\n    res = await Promise.all(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ?\n        this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n        this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n      }\n      try {\n        let toSave = doc;\n\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n\n        await toSave.$save(options);\n\n        return toSave;\n      } catch (err) {\n        if (!firstError) {\n          firstError = err;\n        }\n      }\n    }));\n    if (firstError) {\n      throw firstError;\n    }\n  }\n\n\n  if (!Array.isArray(doc) && args.length === 1) {\n    return res[0];\n  }\n\n  return res;\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://www.mongodb.com/docs/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * #### Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     const changeStream = Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#watch)\n * @param {Boolean} [options.hydrate=false] if true and `fullDocument: 'updateLookup'` is set, Mongoose will automatically hydrate `fullDocument` into a fully fledged Mongoose document\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n * @api public\n */\n\nModel.watch = function(pipeline, options) {\n  _checkContext(this, 'watch');\n\n  const changeStreamThunk = cb => {\n    pipeline = pipeline || [];\n    prepareDiscriminatorPipeline(pipeline, this.schema, 'fullDocument');\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(() => {\n        if (this.closed) {\n          return;\n        }\n        const driverChangeStream = this.$__collection.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      });\n    } else {\n      const driverChangeStream = this.$__collection.watch(pipeline, options);\n      cb(null, driverChangeStream);\n    }\n  };\n\n  options = options || {};\n  options.model = this;\n\n  return new ChangeStream(changeStreamThunk, pipeline, options);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `MyModel.startSession()` is equivalent to calling `MyModel.db.startSession()`.\n *\n * This function does not trigger any middleware.\n *\n * #### Example:\n *\n *     const session = await Person.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nModel.startSession = function() {\n  _checkContext(this, 'startSession');\n\n  return this.db.startSession.apply(this.db, arguments);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * #### Example:\n *\n *     await Movies.insertMany([\n *       { name: 'Star Wars' },\n *       { name: 'The Empire Strikes Back' }\n *     ]);\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#insertMany)\n * @param {Boolean} [options.ordered=true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult=false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `true`, will return the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/InsertManyResult.html) with a `mongoose` property that contains `validationErrors` and `results` if this is an unordered `insertMany`.\n * @param {Boolean} [options.lean=false] if `true`, skips hydrating the documents. This means Mongoose will **not** cast or validate any of the documents passed to `insertMany()`. This option is useful if you need the extra performance, but comes with data integrity risk. Consider using with [`castObject()`](https://mongoosejs.com/docs/api/model.html#Model.castObject()).\n * @param {Number} [options.limit=null] this limits the number of documents being processed (validation/casting) by mongoose in parallel, this does **NOT** send the documents in batches to MongoDB. Use this option if you're processing a large number of documents and your app is running out of memory.\n * @param {String|Object|Array} [options.populate=null] populates the result documents. This option is a no-op if `rawResult` is set.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @return {Promise} resolving to the raw result from the MongoDB driver if `options.rawResult` was `true`, or the documents that passed validation, otherwise\n * @api public\n */\n\nModel.insertMany = async function insertMany(arr, options) {\n  _checkContext(this, 'insertMany');\n  if (typeof options === 'function' ||\n    typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.insertMany() no longer accepts a callback');\n  }\n\n  return new Promise((resolve, reject) => {\n    this.$__insertMany(arr, options, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * ignore\n *\n * @param {Array} arr\n * @param {Object} options\n * @param {Function} callback\n * @api private\n * @memberOf Model\n * @method $__insertMany\n * @static\n */\n\nModel.$__insertMany = function(arr, options, callback) {\n  const _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  callback = callback || utils.noop;\n  options = options || {};\n  const limit = options.limit || 1000;\n  const rawResult = !!options.rawResult;\n  const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  const throwOnValidationError = typeof options.throwOnValidationError === 'boolean' ? options.throwOnValidationError : false;\n  const lean = !!options.lean;\n\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n\n  const validationErrors = [];\n  const validationErrorsToOriginalOrder = new Map();\n  const results = ordered ? null : new Array(arr.length);\n  const toExecute = arr.map((doc, index) =>\n    callback => {\n      // If option `lean` is set to true bypass validation and hydration\n      if (lean) {\n        // we have to execute callback at the nextTick to be compatible\n        // with parallelLimit, as `results` variable has TDZ issue if we\n        // execute the callback synchronously\n        return immediate(() => callback(null, doc));\n      }\n      if (!(doc instanceof _this)) {\n        if (doc != null && typeof doc !== 'object') {\n          return callback(new ObjectParameterError(doc, 'arr.' + index, 'insertMany'));\n        }\n        try {\n          doc = new _this(doc);\n        } catch (err) {\n          return callback(err);\n        }\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      // If option `lean` is set to true bypass validation\n      if (lean) {\n        // we have to execute callback at the nextTick to be compatible\n        // with parallelLimit, as `results` variable has TDZ issue if we\n        // execute the callback synchronously\n        return immediate(() => callback(null, doc));\n      }\n      doc.$validate().then(\n        () => { callback(null, doc); },\n        error => {\n          if (ordered === false) {\n            validationErrors.push(error);\n            validationErrorsToOriginalOrder.set(error, index);\n            results[index] = error;\n            return callback(null, null);\n          }\n          callback(error);\n        }\n      );\n    });\n\n  parallelLimit(toExecute, limit, function(error, docs) {\n    if (error) {\n      callback(error, null);\n      return;\n    }\n\n    const originalDocIndex = new Map();\n    const validDocIndexToOriginalIndex = new Map();\n    for (let i = 0; i < docs.length; ++i) {\n      originalDocIndex.set(docs[i], i);\n    }\n\n    // We filter all failed pre-validations by removing nulls\n    const docAttributes = docs.filter(function(doc) {\n      return doc != null;\n    });\n    for (let i = 0; i < docAttributes.length; ++i) {\n      validDocIndexToOriginalIndex.set(i, originalDocIndex.get(docAttributes[i]));\n    }\n\n    // Make sure validation errors are in the same order as the\n    // original documents, so if both doc1 and doc2 both fail validation,\n    // `Model.insertMany([doc1, doc2])` will always have doc1's validation\n    // error before doc2's. Re: gh-12791.\n    if (validationErrors.length > 0) {\n      validationErrors.sort((err1, err2) => {\n        return validationErrorsToOriginalOrder.get(err1) - validationErrorsToOriginalOrder.get(err2);\n      });\n    }\n\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length === 0) {\n      if (throwOnValidationError) {\n        return callback(new MongooseBulkWriteError(\n          validationErrors,\n          results,\n          null,\n          'insertMany'\n        ));\n      }\n      if (rawResult) {\n        const res = {\n          acknowledged: true,\n          insertedCount: 0,\n          insertedIds: {},\n          mongoose: {\n            validationErrors: validationErrors\n          }\n        };\n        return callback(null, res);\n      }\n      callback(null, []);\n      return;\n    }\n    const docObjects = lean ? docAttributes : docAttributes.map(function(doc) {\n      if (doc.$__schema.options.versionKey) {\n        doc[doc.$__schema.options.versionKey] = 0;\n      }\n      const shouldSetTimestamps = (!options || options.timestamps !== false) && doc.initializeTimestamps && (!doc.$__ || doc.$__.timestamps !== false);\n      if (shouldSetTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n\n    _this.$__collection.insertMany(docObjects, options).then(\n      res => {\n        if (!lean) {\n          for (const attribute of docAttributes) {\n            attribute.$__reset();\n            _setIsNew(attribute, false);\n          }\n        }\n\n        if (ordered === false && throwOnValidationError && validationErrors.length > 0) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n          return callback(new MongooseBulkWriteError(\n            validationErrors,\n            results,\n            res,\n            'insertMany'\n          ));\n        }\n\n        if (rawResult) {\n          if (ordered === false) {\n            for (let i = 0; i < results.length; ++i) {\n              if (results[i] === void 0) {\n                results[i] = docs[i];\n              }\n            }\n\n            // Decorate with mongoose validation errors in case of unordered,\n            // because then still do `insertMany()`\n            res.mongoose = {\n              validationErrors: validationErrors,\n              results: results\n            };\n          }\n          return callback(null, res);\n        }\n\n        if (options.populate != null) {\n          return _this.populate(docAttributes, options.populate).then(\n            docs => { callback(null, docs); },\n            err => {\n              if (err != null) {\n                err.insertedDocs = docAttributes;\n              }\n              throw err;\n            }\n          );\n        }\n\n        callback(null, docAttributes);\n      },\n      error => {\n        // `writeErrors` is a property reported by the MongoDB driver,\n        // just not if there's only 1 error.\n        if (error.writeErrors == null &&\n            (error.result && error.result.result && error.result.result.writeErrors) != null) {\n          error.writeErrors = error.result.result.writeErrors;\n        }\n\n        // `insertedDocs` is a Mongoose-specific property\n        const hasWriteErrors = error && error.writeErrors;\n        const erroredIndexes = new Set((error && error.writeErrors || []).map(err => err.index));\n\n        if (error.writeErrors != null) {\n          for (let i = 0; i < error.writeErrors.length; ++i) {\n            const originalIndex = validDocIndexToOriginalIndex.get(error.writeErrors[i].index);\n            error.writeErrors[i] = {\n              ...error.writeErrors[i],\n              index: originalIndex\n            };\n            if (!ordered) {\n              results[originalIndex] = error.writeErrors[i];\n            }\n          }\n        }\n\n        if (!ordered) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n\n          error.results = results;\n        }\n\n        let firstErroredIndex = -1;\n        error.insertedDocs = docAttributes.\n          filter((doc, i) => {\n            const isErrored = !hasWriteErrors || erroredIndexes.has(i);\n\n            if (ordered) {\n              if (firstErroredIndex > -1) {\n                return i < firstErroredIndex;\n              }\n\n              if (isErrored) {\n                firstErroredIndex = i;\n              }\n            }\n\n            return !isErrored;\n          }).\n          map(function setIsNewForInsertedDoc(doc) {\n            if (lean) {\n              return doc;\n            }\n            doc.$__reset();\n            _setIsNew(doc, false);\n            return doc;\n          });\n\n        if (rawResult && ordered === false) {\n          error.mongoose = {\n            validationErrors: validationErrors,\n            results: results\n          };\n        }\n\n        callback(error, null);\n      }\n    );\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction _setIsNew(doc, val) {\n  doc.$isNew = val;\n  doc.$emit('isNew', val);\n  doc.constructor.emit('isNew', val);\n\n  const subdocs = doc.$getAllSubdocs();\n  for (const subdoc of subdocs) {\n    subdoc.$isNew = val;\n    subdoc.$emit('isNew', val);\n  }\n}\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (e.g.\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n * The only exception is [setting the `update` operator for `updateOne` or `updateMany` to a pipeline](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#updateone-and-updatemany): Mongoose does **not** cast update pipelines.\n *\n * This function does **not** trigger any middleware, neither `save()`, nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](https://mongoosejs.com/docs/api/model.html#Model.create()) instead.\n *\n * #### Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           filter: { name: 'Eddard Stark' }\n *         }\n *       }\n *     ]).then(res => {\n *      // Prints \"1 1 1\"\n *      console.log(res.insertedCount, res.modifiedCount, res.deletedCount);\n *     });\n *\n *     // Mongoose does **not** cast update pipelines, so no casting for the `update` option below.\n *     // Mongoose does still cast `filter`\n *     await Character.bulkWrite([{\n *       updateOne: {\n *         filter: { name: 'Annika Hansen' },\n *         update: [{ $set: { name: 7 } }] // Array means update pipeline, so Mongoose skips casting\n *       }\n *     }]);\n *\n * The [supported operations](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite) are:\n *\n * - `insertOne`\n * - `updateOne`\n * - `updateMany`\n * - `deleteOne`\n * - `deleteMany`\n * - `replaceOne`\n *\n * @param {Array} ops\n * @param {Object} [ops.insertOne.document] The document to insert\n * @param {Object} [ops.insertOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.filter] Update the first document that matches this filter\n * @param {Object} [ops.updateOne.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateOne.upsert=false] If true, insert a doc if none match\n * @param {Boolean} [ops.updateOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateOne.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.updateMany.filter] Update all the documents that match this filter\n * @param {Object} [ops.updateMany.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateMany.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Boolean} [ops.updateMany.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateMany.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateMany.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.deleteOne.filter] Delete the first document that matches this filter\n * @param {Object} [ops.deleteMany.filter] Delete all documents that match this filter\n * @param {Object} [ops.replaceOne.filter] Replace the first document that matches this filter\n * @param {Object} [ops.replaceOne.replacement] The replacement document\n * @param {Boolean} [ops.replaceOne.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Object} [ops.replaceOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [options]\n * @param {Boolean} [options.ordered=true] If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.\n * @param {Boolean} [options.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to any operations. Can be overridden at the operation-level.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n * @param {Boolean} [options.skipValidation=false] Set to true to skip Mongoose schema validation on bulk write operations. Mongoose currently runs validation on `insertOne` and `replaceOne` operations by default.\n * @param {Boolean} [options.bypassDocumentValidation=false] If true, disable [MongoDB server-side schema validation](https://www.mongodb.com/docs/manual/core/schema-validation/) for all writes in this bulk.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @param {Boolean} [options.strict=null] Overwrites the [`strict` option](https://mongoosejs.com/docs/guide.html#strict) on schema. If false, allows filtering and writing fields not defined in the schema for all writes in this bulk.\n * @return {Promise} resolves to a [`BulkWriteOpResult`](https://mongodb.github.io/node-mongodb-native/4.9/classes/BulkWriteResult.html) if the operation succeeds\n * @api public\n */\n\nModel.bulkWrite = async function bulkWrite(ops, options) {\n  _checkContext(this, 'bulkWrite');\n\n  if (typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.bulkWrite() no longer accepts a callback');\n  }\n  options = options || {};\n\n  const shouldSkip = await new Promise((resolve, reject) => {\n    this.hooks.execPre('bulkWrite', this, [ops, options], (err) => {\n      if (err != null) {\n        if (err instanceof Kareem.skipWrappedFunction) {\n          return resolve(err);\n        }\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  if (shouldSkip) {\n    return shouldSkip.args[0];\n  }\n\n  const ordered = options.ordered == null ? true : options.ordered;\n\n  if (ops.length === 0) {\n    return getDefaultBulkwriteResult();\n  }\n\n  const validations = ops.map(op => castBulkWrite(this, op, options));\n  const asyncLocalStorage = this.db.base.transactionAsyncLocalStorage?.getStore();\n  if ((!options || !options.hasOwnProperty('session')) && asyncLocalStorage?.session != null) {\n    options = { ...options, session: asyncLocalStorage.session };\n  }\n\n  let res = null;\n  if (ordered) {\n    await new Promise((resolve, reject) => {\n      each(validations, (fn, cb) => fn(cb), error => {\n        if (error) {\n          return reject(error);\n        }\n\n        resolve();\n      });\n    });\n\n    try {\n      res = await this.$__collection.bulkWrite(ops, options);\n    } catch (error) {\n      await new Promise((resolve, reject) => {\n        const _opts = { error: error };\n        this.hooks.execPost('bulkWrite', this, [null], _opts, (err) => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n  } else {\n    let remaining = validations.length;\n    let validOps = [];\n    let validationErrors = [];\n    const results = [];\n    await new Promise((resolve) => {\n      for (let i = 0; i < validations.length; ++i) {\n        validations[i]((err) => {\n          if (err == null) {\n            validOps.push(i);\n          } else {\n            validationErrors.push({ index: i, error: err });\n            results[i] = err;\n          }\n          if (--remaining <= 0) {\n            resolve();\n          }\n        });\n      }\n    });\n\n    validationErrors = validationErrors.\n      sort((v1, v2) => v1.index - v2.index).\n      map(v => v.error);\n\n    const validOpIndexes = validOps;\n    validOps = validOps.sort().map(index => ops[index]);\n\n    if (validOps.length === 0) {\n      if (options.throwOnValidationError && validationErrors.length) {\n        throw new MongooseBulkWriteError(\n          validationErrors,\n          results,\n          res,\n          'bulkWrite'\n        );\n      }\n      return getDefaultBulkwriteResult();\n    }\n\n    let error;\n    [res, error] = await this.$__collection.bulkWrite(validOps, options).\n      then(res => ([res, null])).\n      catch(err => ([null, err]));\n\n    if (error) {\n      if (validationErrors.length > 0) {\n        error.mongoose = error.mongoose || {};\n        error.mongoose.validationErrors = validationErrors;\n      }\n\n      await new Promise((resolve, reject) => {\n        const _opts = { error: error };\n        this.hooks.execPost('bulkWrite', this, [null], _opts, (err) => {\n          if (err != null) {\n            return reject(err);\n          }\n          resolve();\n        });\n      });\n    }\n\n    for (let i = 0; i < validOpIndexes.length; ++i) {\n      results[validOpIndexes[i]] = null;\n    }\n    if (validationErrors.length > 0) {\n      if (options.throwOnValidationError) {\n        throw new MongooseBulkWriteError(\n          validationErrors,\n          results,\n          res,\n          'bulkWrite'\n        );\n      } else {\n        res.mongoose = res.mongoose || {};\n        res.mongoose.validationErrors = validationErrors;\n        res.mongoose.results = results;\n      }\n    }\n  }\n\n  await new Promise((resolve, reject) => {\n    this.hooks.execPost('bulkWrite', this, [res], (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n\n  return res;\n};\n\n/**\n *  takes an array of documents, gets the changes and inserts/updates documents in the database\n *  according to whether or not the document is new, or whether it has changes or not.\n *\n * `bulkSave` uses `bulkWrite` under the hood, so it's mostly useful when dealing with many documents (10K+)\n *\n * @param {Array<Document>} documents\n * @param {Object} [options] options passed to the underlying `bulkWrite()`\n * @param {Boolean} [options.timestamps] defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n *\n */\nModel.bulkSave = async function bulkSave(documents, options) {\n  options = options || {};\n\n  if (options.timestamps != null) {\n    for (const document of documents) {\n      document.$__.saveOptions = document.$__.saveOptions || {};\n      document.$__.saveOptions.timestamps = options.timestamps;\n    }\n  } else {\n    for (const document of documents) {\n      if (document.$__.timestamps != null) {\n        document.$__.saveOptions = document.$__.saveOptions || {};\n        document.$__.saveOptions.timestamps = document.$__.timestamps;\n      }\n    }\n  }\n\n  await Promise.all(documents.map(buildPreSavePromise));\n\n  const writeOperations = this.buildBulkWriteOperations(documents, { skipValidation: true, timestamps: options.timestamps });\n\n  const { bulkWriteResult, bulkWriteError } = await this.bulkWrite(writeOperations, options).then(\n    (res) => ({ bulkWriteResult: res, bulkWriteError: null }),\n    (err) => ({ bulkWriteResult: null, bulkWriteError: err })\n  );\n\n  await Promise.all(\n    documents.map(async(document) => {\n      const documentError = bulkWriteError && bulkWriteError.writeErrors.find(writeError => {\n        const writeErrorDocumentId = writeError.err.op._id || writeError.err.op.q._id;\n        return writeErrorDocumentId.toString() === document._id.toString();\n      });\n\n      if (documentError == null) {\n        await handleSuccessfulWrite(document);\n      }\n    })\n  );\n\n  if (bulkWriteError && bulkWriteError.writeErrors && bulkWriteError.writeErrors.length) {\n    throw bulkWriteError;\n  }\n\n  return bulkWriteResult;\n};\n\nfunction buildPreSavePromise(document) {\n  return new Promise((resolve, reject) => {\n    document.schema.s.hooks.execPre('save', document, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction handleSuccessfulWrite(document) {\n  return new Promise((resolve, reject) => {\n    if (document.$isNew) {\n      _setIsNew(document, false);\n    }\n\n    document.$__reset();\n    document.schema.s.hooks.execPost('save', document, [document], {}, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n\n  });\n}\n\n/**\n * Apply defaults to the given document or POJO.\n *\n * @param {Object|Document} obj object or document to apply defaults on\n * @returns {Object|Document}\n * @api public\n */\n\nModel.applyDefaults = function applyDefaults(doc) {\n  if (doc.$__ != null) {\n    applyDefaultsHelper(doc, doc.$__.fields, doc.$__.exclude);\n\n    for (const subdoc of doc.$getAllSubdocs()) {\n      applyDefaults(subdoc, subdoc.$__.fields, subdoc.$__.exclude);\n    }\n\n    return doc;\n  }\n\n  applyDefaultsToPOJO(doc, this.schema);\n\n  return doc;\n};\n\n/**\n * Cast the given POJO to the model's schema\n *\n * #### Example:\n *\n *     const Test = mongoose.model('Test', Schema({ num: Number }));\n *\n *     const obj = Test.castObject({ num: '42' });\n *     obj.num; // 42 as a number\n *\n *     Test.castObject({ num: 'not a number' }); // Throws a ValidationError\n *\n * @param {Object} obj object or document to cast\n * @param {Object} options options passed to castObject\n * @param {Boolean} options.ignoreCastErrors If set to `true` will not throw a ValidationError and only return values that were successfully cast.\n * @returns {Object} POJO casted to the model's schema\n * @throws {ValidationError} if casting failed for at least one path\n * @api public\n */\n\nModel.castObject = function castObject(obj, options) {\n  options = options || {};\n  const ret = {};\n\n  const schema = this.schema;\n  const paths = Object.keys(schema.paths);\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray) {\n      continue;\n    }\n\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n\n  let error = null;\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (schemaType == null) {\n      continue;\n    }\n\n    let val = get(obj, path, void 0);\n\n    if (val == null) {\n      continue;\n    }\n\n    const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = ret;\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      if (cur[pieces[i]] == null) {\n        cur[pieces[i]] = isNaN(pieces[i + 1]) ? {} : [];\n      }\n      cur = cur[pieces[i]];\n    }\n\n    if (schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    if (schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) {\n      try {\n        val = Model.castObject.call(schemaType.caster, val);\n      } catch (err) {\n        if (!options.ignoreCastErrors) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        continue;\n      }\n\n      cur[pieces[pieces.length - 1]] = val;\n      continue;\n    }\n\n    try {\n      val = schemaType.cast(val);\n      cur[pieces[pieces.length - 1]] = val;\n    } catch (err) {\n      if (!options.ignoreCastErrors) {\n        error = error || new ValidationError();\n        error.addError(path, err);\n      }\n\n      continue;\n    }\n  }\n\n  if (error != null) {\n    throw error;\n  }\n\n  return ret;\n};\n\n/**\n * Build bulk write operations for `bulkSave()`.\n *\n * @param {Array<Document>} documents The array of documents to build write operations of\n * @param {Object} options\n * @param {Boolean} options.skipValidation defaults to `false`, when set to true, building the write operations will bypass validating the documents.\n * @param {Boolean} options.timestamps defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @return {Array<Promise>} Returns a array of all Promises the function executes to be awaited.\n * @api private\n */\n\nModel.buildBulkWriteOperations = function buildBulkWriteOperations(documents, options) {\n  if (!Array.isArray(documents)) {\n    throw new Error(`bulkSave expects an array of documents to be passed, received \\`${documents}\\` instead`);\n  }\n\n  setDefaultOptions();\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  const writeOperations = documents.reduce((accumulator, document, i) => {\n    if (!options.skipValidation) {\n      if (!(document instanceof Document)) {\n        throw new Error(`documents.${i} was not a mongoose document, documents must be an array of mongoose documents (instanceof mongoose.Document).`);\n      }\n      const validationError = document.validateSync();\n      if (validationError) {\n        throw validationError;\n      }\n    }\n\n    const isANewDocument = document.isNew;\n    if (isANewDocument) {\n      const writeOperation = { insertOne: { document } };\n      utils.injectTimestampsOption(writeOperation.insertOne, options.timestamps);\n      accumulator.push(writeOperation);\n\n      return accumulator;\n    }\n\n    const delta = document.$__delta();\n    const isDocumentWithChanges = delta != null && !utils.isEmptyObject(delta[0]);\n\n    if (isDocumentWithChanges) {\n      const where = document.$__where(delta[0]);\n      const changes = delta[1];\n\n      _applyCustomWhere(document, where);\n\n      // Set the discriminator key, so bulk write casting knows which\n      // schema to use re: gh-13907\n      if (document[discriminatorKey] != null && !(discriminatorKey in where)) {\n        where[discriminatorKey] = document[discriminatorKey];\n      }\n\n      document.$__version(where, delta);\n      const writeOperation = { updateOne: { filter: where, update: changes } };\n      utils.injectTimestampsOption(writeOperation.updateOne, options.timestamps);\n      accumulator.push(writeOperation);\n\n      return accumulator;\n    }\n\n    return accumulator;\n  }, []);\n\n  return writeOperations;\n\n\n  function setDefaultOptions() {\n    options = options || {};\n    if (options.skipValidation == null) {\n      options.skipValidation = false;\n    }\n  }\n};\n\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * #### Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     const mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @param {Object|String|String[]} [projection] optional projection containing which fields should be selected for this document\n * @param {Object} [options] optional options\n * @param {Boolean} [options.setters=false] if true, apply schema setters when hydrating\n * @param {Boolean} [options.hydratedPopulatedDocs=false] if true, populates the docs if passing pre-populated data\n * @return {Document} document instance\n * @api public\n */\n\nModel.hydrate = function(obj, projection, options) {\n  _checkContext(this, 'hydrate');\n\n  if (projection != null) {\n    if (obj != null && obj.$__ != null) {\n      obj = obj.toObject(internalToObjectOptions);\n    }\n    obj = applyProjection(obj, projection);\n  }\n  const document = require('./queryHelpers').createModel(this, obj, projection);\n  document.$init(obj, options);\n  return document;\n};\n\n/**\n * Same as `updateOne()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} filter\n * @param {Object|Array} update. If array, this update will be treated as an update pipeline and not casted.\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options) {\n  _checkContext(this, 'updateMany');\n\n  return _update(this, 'updateMany', conditions, doc, options);\n};\n\n/**\n * Update _only_ the first document that matches `filter`.\n *\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using atomic operators like `$set`.\n *\n * #### Example:\n *\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} filter\n * @param {Object|Array} update. If array, this update will be treated as an update pipeline and not casted.\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @param {Boolean} [options.overwriteDiscriminatorKey=false] Mongoose removes discriminator key updates from `update` by default, set `overwriteDiscriminatorKey` to `true` to allow updating the discriminator key\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options) {\n  _checkContext(this, 'updateOne');\n\n  return _update(this, 'updateOne', conditions, doc, options);\n};\n\n/**\n * Replace the existing document with the given document (no atomic operators like `$set`).\n *\n * #### Example:\n *\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options) {\n  _checkContext(this, 'replaceOne');\n\n  const versionKey = this && this.schema && this.schema.options && this.schema.options.versionKey || null;\n  if (versionKey && !doc[versionKey]) {\n    doc[versionKey] = 0;\n  }\n\n  return _update(this, 'replaceOne', conditions, doc, options);\n};\n\n/**\n * Common code for `updateOne()`, `updateMany()`, `replaceOne()`, and `update()`\n * because they need to do the same thing\n * @api private\n */\n\nfunction _update(model, op, conditions, doc, options) {\n  const mq = new model.Query({}, {}, model, model.collection);\n\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = clone(conditions);\n  }\n  options = typeof options === 'function' ? options : clone(options);\n\n  const versionKey = model &&\n  model.schema &&\n  model.schema.options &&\n  model.schema.options.versionKey || null;\n  decorateUpdateWithVersionKey(doc, options, versionKey);\n\n  return mq[op](conditions, doc, options);\n}\n\n/**\n * Performs [aggregations](https://www.mongodb.com/docs/manual/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function triggers the following middleware.\n *\n * - `aggregate()`\n *\n * #### Example:\n *\n *     // Find the max balance of all accounts\n *     const res = await Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]);\n *\n *     console.log(res); // [ { maxBalance: 98000 } ]\n *\n *     // Or use the aggregation pipeline builder.\n *     const res = await Users.aggregate().\n *       group({ _id: null, maxBalance: { $max: '$balance' } }).\n *       project('-id maxBalance').\n *       exec();\n *     console.log(res); // [ { maxBalance: 98 } ]\n *\n * #### Note:\n *\n * - Mongoose does **not** cast aggregation pipelines to the model's schema because `$project` and `$group` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the [mongoose-cast-aggregation plugin](https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation) to enable minimal casting for aggregation pipelines.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n *\n * #### More About Aggregations:\n *\n * - [Mongoose `Aggregate`](https://mongoosejs.com/docs/api/aggregate.html)\n * - [An Introduction to Mongoose Aggregate](https://masteringjs.io/tutorials/mongoose/aggregate)\n * - [MongoDB Aggregation docs](https://www.mongodb.com/docs/manual/applications/aggregation/)\n *\n * @see Aggregate https://mongoosejs.com/docs/api/aggregate.html#Aggregate()\n * @see MongoDB https://www.mongodb.com/docs/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Object} [options] aggregation options\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, options) {\n  _checkContext(this, 'aggregate');\n\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.aggregate() no longer accepts a callback');\n  }\n\n  const aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n  if (options != null) {\n    aggregate.option(options);\n  }\n\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n\n  return aggregate;\n};\n\n/**\n * Casts and validates the given object against this model's schema, passing the\n * given `context` to custom validators.\n *\n * #### Example:\n *\n *     const Model = mongoose.model('Test', Schema({\n *       name: { type: String, required: true },\n *       age: { type: Number, required: true }\n *     });\n *\n *     try {\n *       await Model.validate({ name: null }, ['name'])\n *     } catch (err) {\n *       err instanceof mongoose.Error.ValidationError; // true\n *       Object.keys(err.errors); // ['name']\n *     }\n *\n * @param {Object} obj\n * @param {Object|Array|String} pathsOrOptions\n * @param {Object} [context]\n * @return {Promise<Object>} casted and validated copy of `obj` if validation succeeded\n * @api public\n */\n\nModel.validate = async function validate(obj, pathsOrOptions, context) {\n  if ((arguments.length < 3) || (arguments.length === 3 && typeof arguments[2] === 'function')) {\n    // For convenience, if we're validating a document or an object, make `context` default to\n    // the model so users don't have to always pass `context`, re: gh-10132, gh-10346\n    context = obj;\n  }\n  if (typeof context === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.validate() no longer accepts a callback');\n  }\n\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  if (schema.discriminators != null && obj != null && obj[discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[discriminatorKey]) || schema;\n  }\n  let paths = Object.keys(schema.paths);\n\n  if (pathsOrOptions != null) {\n    const _pathsToValidate = typeof pathsOrOptions === 'string' ? new Set(pathsOrOptions.split(' ')) : Array.isArray(pathsOrOptions) ? new Set(pathsOrOptions) : new Set(paths);\n    paths = paths.filter(p => {\n      if (pathsOrOptions.pathsToSkip) {\n        if (Array.isArray(pathsOrOptions.pathsToSkip)) {\n          if (pathsOrOptions.pathsToSkip.find(x => x == p)) {\n            return false;\n          }\n        } else if (typeof pathsOrOptions.pathsToSkip == 'string') {\n          if (pathsOrOptions.pathsToSkip.includes(p)) {\n            return false;\n          }\n        }\n      }\n      const pieces = p.split('.');\n      let cur = pieces[0];\n\n      for (const piece of pieces) {\n        if (_pathsToValidate.has(cur)) {\n          return true;\n        }\n        cur += '.' + piece;\n      }\n\n      return _pathsToValidate.has(p);\n    });\n  }\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray || schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n\n  let error = null;\n  paths = new Set(paths);\n\n  try {\n    obj = this.castObject(obj);\n  } catch (err) {\n    error = err;\n    for (const key of Object.keys(error.errors || {})) {\n      paths.delete(key);\n    }\n  }\n\n  let remaining = paths.size;\n\n  return new Promise((resolve, reject) => {\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (schemaType == null) {\n        _checkDone();\n        continue;\n      }\n\n      const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n      let cur = obj;\n      for (let i = 0; i < pieces.length - 1; ++i) {\n        cur = cur[pieces[i]];\n      }\n\n      const val = get(obj, path, void 0);\n\n      schemaType.doValidate(val, err => {\n        if (err) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        _checkDone();\n      }, context, { path: path });\n    }\n\n    function _checkDone() {\n      if (--remaining <= 0) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(obj);\n        }\n      }\n    }\n  });\n};\n\n/**\n * Populates document references.\n *\n * Changed in Mongoose 6: the model you call `populate()` on should be the\n * \"local field\" model, **not** the \"foreign field\" model.\n *\n * #### Available top-level options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n * - justOne: optional boolean, if true Mongoose will always set `path` to a document, or `null` if no document was found. If false, Mongoose will always set `path` to an array, which will be empty if no documents are found. Inferred from schema by default.\n * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.\n *\n * #### Example:\n *\n *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));\n *     const Person = mongoose.model('Person', new Schema({\n *       name: String,\n *       pet: { type: mongoose.ObjectId, ref: 'Dog' }\n *     }));\n *\n *     const pets = await Pet.create([\n *       { name: 'Daisy', breed: 'Beagle' },\n *       { name: 'Einstein', breed: 'Catalan Sheepdog' }\n *     ]);\n *\n *     // populate many plain objects\n *     const users = [\n *       { name: 'John Wick', dog: pets[0]._id },\n *       { name: 'Doc Brown', dog: pets[1]._id }\n *     ];\n *     await User.populate(users, { path: 'dog', select: 'name' });\n *     users[0].dog.name; // 'Daisy'\n *     users[0].dog.breed; // undefined because of `select`\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object|String} options Either the paths to populate or an object specifying all parameters\n * @param {string} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] By default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] If true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Boolean} [options.skipInvalidIds=false] By default, Mongoose throws a cast error if `localField` and `foreignField` schemas don't line up. If you enable this option, Mongoose will instead filter out any `localField` properties that cannot be casted to `foreignField`'s schema type.\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Boolean} [options.strictPopulate=true] Set to false to allow populating paths that aren't defined in the given model's schema.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = async function populate(docs, paths) {\n  _checkContext(this, 'populate');\n  if (typeof paths === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.populate() no longer accepts a callback');\n  }\n  const _this = this;\n  // normalized paths\n  paths = utils.populate(paths);\n  // data that should persist across subPopulate calls\n  const cache = {};\n\n  return new Promise((resolve, reject) => {\n    _populate(_this, docs, paths, cache, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {never} cache Unused\n * @param {Function} [callback] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  let pending = paths.length;\n  if (paths.length === 0) {\n    return callback(null, docs);\n  }\n  // each path has its own query options and must be executed separately\n  for (const path of paths) {\n    populate(model, docs, path, next);\n  }\n\n  function next(err) {\n    if (err) {\n      return callback(err, null);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nconst excludeIdReg = /\\s?-_id\\s?/;\nconst excludeIdRegGlobal = /\\s?-_id\\s?/g;\n\nfunction populate(model, docs, options, callback) {\n  const populateOptions = options;\n  if (options.strictPopulate == null) {\n    if (options._localModel != null && options._localModel.schema._userProvidedOptions.strictPopulate != null) {\n      populateOptions.strictPopulate = options._localModel.schema._userProvidedOptions.strictPopulate;\n    } else if (options._localModel != null && model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    } else if (model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    }\n  }\n\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n\n  const modelsMap = getModelsMapForPopulate(model, docs, populateOptions);\n\n  if (modelsMap instanceof MongooseError) {\n    return immediate(function() {\n      callback(modelsMap);\n    });\n  }\n  const len = modelsMap.length;\n  let vals = [];\n\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n\n  let _remaining = len;\n  let hasOne = false;\n  const params = [];\n  for (let i = 0; i < len; ++i) {\n    const mod = modelsMap[i];\n    let select = mod.options.select;\n    let ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n\n    const assignmentOpts = {};\n    assignmentOpts.sort = mod &&\n      mod.options &&\n      mod.options.options &&\n      mod.options.options.sort || void 0;\n    assignmentOpts.excludeId = excludeIdReg.test(select) || (select && select._id === 0);\n\n    // Lean transform may delete `_id`, which would cause assignment\n    // to fail. So delay running lean transform until _after_\n    // `_assign()`\n    if (mod.options &&\n        mod.options.options &&\n        mod.options.options.lean &&\n        mod.options.options.lean.transform) {\n      mod.options.options._leanTransform = mod.options.options.lean.transform;\n      mod.options.options.lean = true;\n    }\n\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      // Ensure that we set to 0 or empty array even\n      // if we don't actually execute a query to make sure there's a value\n      // and we know this path was populated for future sets. See gh-7731, gh-8230\n      --_remaining;\n      _assign(model, [], mod, assignmentOpts);\n      continue;\n    }\n\n    hasOne = true;\n    if (typeof populateOptions.foreignField === 'string') {\n      mod.foreignField.clear();\n      mod.foreignField.add(populateOptions.foreignField);\n    }\n    const match = createPopulateQueryFilter(ids, mod.match, mod.foreignField, mod.model, mod.options.skipInvalidIds);\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else if (Array.isArray(select)) {\n        select = select.filter(field => field !== '-_id');\n      } else {\n        // preserve original select conditions by copying\n        select = { ...select };\n        delete select._id;\n      }\n    }\n\n    if (mod.options.options && mod.options.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n    } else if (mod.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.limit;\n    }\n    params.push([mod, match, select, assignmentOpts, _next]);\n  }\n  if (!hasOne) {\n    // If models but no docs, skip further deep populate.\n    if (modelsMap.length !== 0) {\n      return callback();\n    }\n    // If no models to populate but we have a nested populate,\n    // keep trying, re: gh-8946\n    if (populateOptions.populate != null) {\n      const opts = utils.populate(populateOptions.populate).map(pop => Object.assign({}, pop, {\n        path: populateOptions.path + '.' + pop.path\n      }));\n      model.populate(docs, opts).then(res => { callback(null, res); }, err => { callback(err); });\n      return;\n    }\n    return callback();\n  }\n\n  for (const arr of params) {\n    _execPopulateQuery.apply(null, arr);\n  }\n  function _next(err, valsFromDb) {\n    if (err != null) {\n      return callback(err, null);\n    }\n    vals = vals.concat(valsFromDb);\n    if (--_remaining === 0) {\n      _done();\n    }\n  }\n\n  function _done() {\n    for (const arr of params) {\n      const mod = arr[0];\n      const assignmentOpts = arr[3];\n      for (const val of vals) {\n        mod.options._childDocs.push(val);\n      }\n      try {\n        _assign(model, vals, mod, assignmentOpts);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n\n    for (const arr of params) {\n      removeDeselectedForeignField(arr[0].foreignField, arr[0].options, vals);\n    }\n    for (const arr of params) {\n      const mod = arr[0];\n      if (mod.options && mod.options.options && mod.options.options._leanTransform) {\n        for (const doc of vals) {\n          mod.options.options._leanTransform(doc);\n        }\n      }\n    }\n    callback();\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _execPopulateQuery(mod, match, select, assignmentOpts, callback) {\n  let subPopulate = clone(mod.options.populate);\n  const queryOptions = Object.assign({\n    skip: mod.options.skip,\n    limit: mod.options.limit,\n    perDocumentLimit: mod.options.perDocumentLimit\n  }, mod.options.options);\n\n  if (mod.count) {\n    delete queryOptions.skip;\n  }\n\n  if (queryOptions.perDocumentLimit != null) {\n    queryOptions.limit = queryOptions.perDocumentLimit;\n    delete queryOptions.perDocumentLimit;\n  } else if (queryOptions.limit != null) {\n    queryOptions.limit = queryOptions.limit * mod.ids.length;\n  }\n\n  const query = mod.model.find(match, select, queryOptions);\n  // If we're doing virtual populate and projection is inclusive and foreign\n  // field is not selected, automatically select it because mongoose needs it.\n  // If projection is exclusive and client explicitly unselected the foreign\n  // field, that's the client's fault.\n  for (const foreignField of mod.foreignField) {\n    if (foreignField !== '_id' &&\n        query.selectedInclusively() &&\n        !isPathSelectedInclusive(query._fields, foreignField)) {\n      query.select(foreignField);\n    }\n  }\n\n  // If using count, still need the `foreignField` so we can match counts\n  // to documents, otherwise we would need a separate `count()` for every doc.\n  if (mod.count) {\n    for (const foreignField of mod.foreignField) {\n      query.select(foreignField);\n    }\n  }\n\n  // If we need to sub-populate, call populate recursively\n  if (subPopulate) {\n    // If subpopulating on a discriminator, skip check for non-existent\n    // paths. Because the discriminator may not have the path defined.\n    if (mod.model.baseModelName != null) {\n      if (Array.isArray(subPopulate)) {\n        subPopulate.forEach(pop => { pop.strictPopulate = false; });\n      } else if (typeof subPopulate === 'string') {\n        subPopulate = { path: subPopulate, strictPopulate: false };\n      } else {\n        subPopulate.strictPopulate = false;\n      }\n    }\n    const basePath = mod.options._fullPath || mod.options.path;\n\n    if (Array.isArray(subPopulate)) {\n      for (const pop of subPopulate) {\n        pop._fullPath = basePath + '.' + pop.path;\n      }\n    } else if (typeof subPopulate === 'object') {\n      subPopulate._fullPath = basePath + '.' + subPopulate.path;\n    }\n\n    query.populate(subPopulate);\n  }\n\n  query.exec().then(\n    docs => {\n      for (const val of docs) {\n        leanPopulateMap.set(val, mod.model);\n      }\n      callback(null, docs);\n    },\n    err => {\n      callback(err);\n    }\n  );\n}\n\n/*!\n * ignore\n */\n\nfunction _assign(model, vals, mod, assignmentOpts) {\n  const options = mod.options;\n  const isVirtual = mod.isVirtual;\n  const justOne = mod.justOne;\n  let _val;\n  const lean = options &&\n    options.options &&\n    options.options.lean || false;\n  const len = vals.length;\n  const rawOrder = {};\n  const rawDocs = {};\n  let key;\n  let val;\n\n  // Clone because `assignRawDocsToIdStructure` will mutate the array\n  const allIds = clone(mod.allIds);\n  // optimization:\n  // record the document positions as returned by\n  // the query result.\n  for (let i = 0; i < len; i++) {\n    val = vals[i];\n    if (val == null) {\n      continue;\n    }\n    for (const foreignField of mod.foreignField) {\n      _val = utils.getValue(foreignField, val);\n      if (Array.isArray(_val)) {\n        _val = utils.array.unique(utils.array.flatten(_val));\n\n        for (let __val of _val) {\n          if (__val instanceof Document) {\n            __val = __val._id;\n          }\n          key = String(__val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            if (isVirtual && !justOne) {\n              rawDocs[key] = [val];\n              rawOrder[key] = [i];\n            } else {\n              rawDocs[key] = val;\n              rawOrder[key] = i;\n            }\n          }\n        }\n      } else {\n        if (_val instanceof Document) {\n          _val = _val._id;\n        }\n        key = String(_val);\n        if (rawDocs[key]) {\n          if (Array.isArray(rawDocs[key])) {\n            rawDocs[key].push(val);\n            rawOrder[key].push(i);\n          } else if (isVirtual ||\n            rawDocs[key].constructor !== val.constructor ||\n            String(rawDocs[key]._id) !== String(val._id)) {\n            // May need to store multiple docs with the same id if there's multiple models\n            // if we have discriminators or a ref function. But avoid converting to an array\n            // if we have multiple queries on the same model because of `perDocumentLimit` re: gh-9906\n            rawDocs[key] = [rawDocs[key], val];\n            rawOrder[key] = [rawOrder[key], i];\n          }\n        } else {\n          rawDocs[key] = val;\n          rawOrder[key] = i;\n        }\n      }\n      // flag each as result of population\n      if (!lean) {\n        val.$__.wasPopulated = val.$__.wasPopulated || { value: _val };\n      }\n    }\n  }\n\n  assignVals({\n    originalModel: model,\n    // If virtual, make sure to not mutate original field\n    rawIds: mod.isVirtual ? allIds : mod.allIds,\n    allIds: allIds,\n    unpopulatedValues: mod.unpopulatedValues,\n    foreignField: mod.foreignField,\n    rawDocs: rawDocs,\n    rawOrder: rawOrder,\n    docs: mod.docs,\n    path: options.path,\n    options: assignmentOpts,\n    justOne: mod.justOne,\n    isVirtual: mod.isVirtual,\n    allOptions: mod,\n    populatedModel: mod.model,\n    lean: lean,\n    virtual: mod.virtual,\n    count: mod.count,\n    match: mod.match\n  });\n}\n\n/**\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n * @api private\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  const versioningEnabled = schema.options.versionKey !== false;\n\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    const o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n  let model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n\n  if (!(model.prototype instanceof Model)) {\n    Object.setPrototypeOf(model, Model);\n    Object.setPrototypeOf(model.prototype, Model.prototype);\n  }\n  model.model = function model(name) {\n    return this.db.model(name);\n  };\n\n  model.db = connection;\n  model.prototype.db = connection;\n  model.prototype[modelDbSymbol] = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n  model[modelSymbol] = true;\n  model.events = new EventEmitter();\n\n  schema._preCompile();\n\n  const _userProvidedOptions = schema._userProvidedOptions || {};\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: schema.options.capped,\n    Promise: model.base.Promise,\n    modelName: name\n  };\n  if (schema.options.autoCreate !== void 0) {\n    collectionOptions.autoCreate = schema.options.autoCreate;\n  }\n\n  const collection = connection.collection(\n    collectionName,\n    collectionOptions\n  );\n\n  model.prototype.collection = collection;\n  model.prototype.$collection = collection;\n  model.prototype[modelCollectionSymbol] = collection;\n\n  model.prototype.$__setSchema(schema);\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n  applyStaticHooks(model, schema.s.hooks, schema.statics);\n\n  model.schema = model.prototype.$__schema;\n  model.collection = collection;\n  model.$__collection = collection;\n\n  // Create custom query constructor\n  model.Query = function() {\n    Query.apply(this, arguments);\n  };\n  Object.setPrototypeOf(model.Query.prototype, Query.prototype);\n  model.Query.base = Query.base;\n  model.Query.prototype.constructor = Query;\n  model._applyQueryMiddleware();\n  applyQueryMethods(model, schema.query);\n\n  return model;\n};\n\n/**\n * Update this model to use the new connection, including updating all internal\n * references and creating a new `Collection` instance using the new connection.\n * Not for external use, only used by `setDriver()` to ensure that you can still\n * call `setDriver()` after creating a model using `mongoose.model()`.\n *\n * @param {Connection} newConnection the new connection to use\n * @api private\n */\n\nModel.$__updateConnection = function $__updateConnection(newConnection) {\n  this.db = newConnection;\n  this.prototype.db = newConnection;\n  this.prototype[modelDbSymbol] = newConnection;\n\n  const collection = newConnection.collection(\n    this.collection.collectionName,\n    this.collection.opts\n  );\n\n  this.prototype.collection = collection;\n  this.prototype.$collection = collection;\n  this.prototype[modelCollectionSymbol] = collection;\n\n  this.collection = collection;\n  this.$__collection = collection;\n};\n\n/**\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (const i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/**\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n * @api private\n * @memberOf Model\n * @static\n * @method __subclass\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  const _this = this;\n\n  const Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n\n  Object.setPrototypeOf(Model, _this);\n  Object.setPrototypeOf(Model.prototype, _this.prototype);\n  Model.db = conn;\n  Model.prototype.db = conn;\n  Model.prototype[modelDbSymbol] = conn;\n\n  _this[subclassedSymbol] = _this[subclassedSymbol] || [];\n  _this[subclassedSymbol].push(Model);\n  if (_this.discriminators != null) {\n    Model.discriminators = {};\n    for (const key of Object.keys(_this.discriminators)) {\n      Model.discriminators[key] = _this.discriminators[key].\n        __subclass(_this.db, _this.discriminators[key].schema, collection);\n    }\n  }\n\n  const s = schema && typeof schema !== 'string'\n    ? schema\n    : _this.prototype.$__schema;\n\n  const options = s.options || {};\n  const _userProvidedOptions = s._userProvidedOptions || {};\n\n  if (!collection) {\n    collection = _this.prototype.$__schema.get('collection') ||\n      utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: s && options.capped\n  };\n\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.prototype.$collection = Model.prototype.collection;\n  Model.prototype[modelCollectionSymbol] = Model.prototype.collection;\n  Model.collection = Model.prototype.collection;\n  Model.$__collection = Model.collection;\n  // Errors handled internally, so ignore\n  Model.init().catch(() => {});\n  return Model;\n};\n\n/**\n * Apply changes made to this model's schema after this model was compiled.\n * By default, adding virtuals and other properties to a schema after the model is compiled does nothing.\n * Call this function to apply virtuals and properties that were added later.\n *\n * #### Example:\n *\n *     const schema = new mongoose.Schema({ field: String });\n *     const TestModel = mongoose.model('Test', schema);\n *     TestModel.schema.virtual('myVirtual').get(function() {\n *       return this.field + ' from myVirtual';\n *     });\n *     const doc = new TestModel({ field: 'Hello' });\n *     doc.myVirtual; // undefined\n *\n *     TestModel.recompileSchema();\n *     doc.myVirtual; // 'Hello from myVirtual'\n *\n * @return {undefined}\n * @api public\n * @memberOf Model\n * @static\n * @method recompileSchema\n */\n\nModel.recompileSchema = function recompileSchema() {\n  this.prototype.$__setSchema(this.schema);\n\n  if (this.schema._applyDiscriminators != null) {\n    for (const disc of this.schema._applyDiscriminators.keys()) {\n      this.discriminator(disc, this.schema._applyDiscriminators.get(disc));\n    }\n  }\n\n  applyEmbeddedDiscriminators(this.schema, new WeakSet(), true);\n};\n\n/**\n * Helper for console.log. Given a model named 'MyModel', returns the string\n * `'Model { MyModel }'`.\n *\n * #### Example:\n *\n *     const MyModel = mongoose.model('Test', Schema({ name: String }));\n *     MyModel.inspect(); // 'Model { Test }'\n *     console.log(MyModel); // Prints 'Model { Test }'\n *\n * @api public\n */\n\nModel.inspect = function() {\n  return `Model { ${this.modelName} }`;\n};\n\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Model[util.inspect.custom] = Model.inspect;\n}\n\n/*!\n * Applies query middleware from this model's schema to this model's\n * Query constructor.\n */\n\nModel._applyQueryMiddleware = function _applyQueryMiddleware() {\n  const Query = this.Query;\n  const queryMiddleware = this.schema.s.hooks.filter(hook => {\n    const contexts = _getContexts(hook);\n    if (hook.name === 'validate') {\n      return !!contexts.query;\n    }\n    if (hook.name === 'deleteOne' || hook.name === 'updateOne') {\n      return !!contexts.query || Object.keys(contexts).length === 0;\n    }\n    if (hook.query != null || hook.document != null) {\n      return !!hook.query;\n    }\n    return true;\n  });\n\n  Query.prototype._queryMiddleware = queryMiddleware;\n};\n\nfunction _getContexts(hook) {\n  const ret = {};\n  if (hook.hasOwnProperty('query')) {\n    ret.query = hook.query;\n  }\n  if (hook.hasOwnProperty('document')) {\n    ret.document = hook.document;\n  }\n  return ret;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAKA,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAClC,IAAID,MAAM,YAAYlE,MAAM,EAAE;IAC5B,MAAM,IAAIoE,SAAS,CAAC,gEAAgE,GAClF,sEAAsE,GACtE,qBAAqB,CAAC;EAC1B;EACA,IAAI,OAAOH,GAAG,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIG,SAAS,CAAC,2DAA2D,GAC7E,sEAAsE,GACtE,qBAAqB,CAAC;EAC1B;EACA/E,QAAQ,CAACgF,IAAI,CAAC,IAAI,EAAEJ,GAAG,EAAEC,MAAM,EAAEC,MAAM,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAP,MAAM,CAACU,cAAc,CAACN,KAAK,CAACO,SAAS,EAAElF,QAAQ,CAACkF,SAAS,CAAC;AAC1DP,KAAK,CAACO,SAAS,CAACC,yBAAyB,GAAG,IAAI;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,KAAK,CAACO,SAAS,CAACE,EAAE;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,KAAK,CAACO,SAAS,CAACG,UAAU;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAV,KAAK,CAACO,SAAS,CAACI,aAAa;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,KAAK,CAACO,SAAS,CAACK,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,KAAK,CAACO,SAAS,CAACM,MAAM;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAb,KAAK,CAACO,SAAS,CAACO,aAAa;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,KAAK,CAACe,MAAM;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAf,KAAK,CAACg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C4D,KAAK,EAAE,IAAI,CAAC;IACvB,CACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;;AAEA,SAASpC,SAASA,CAAC9C,GAAG,EAAE0E,GAAG,EAAE;EAC3B1E,GAAG,CAACqC,MAAM,GAAGqC,GAAG;EAChB1E,GAAG,CAACgG,KAAK,CAAC,OAAO,EAAEtB,GAAG,CAAC;EACvB1E,GAAG,CAAC4E,WAAW,CAACqB,IAAI,CAAC,OAAO,EAAEvB,GAAG,CAAC;EAElC,MAAMoU,OAAO,GAAG9Y,GAAG,CAAC6L,cAAc,CAAC,CAAC;EACpC,KAAK,MAAMC,MAAM,IAAIgN,OAAO,EAAE;IAC5BhN,MAAM,CAACzJ,MAAM,GAAGqC,GAAG;IACnBoH,MAAM,CAAC9F,KAAK,CAAC,OAAO,EAAEtB,GAAG,CAAC;EAC5B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3E,KAAK,CAACgZ,SAAS,GAAG,eAAeA,SAASA,CAACjR,GAAG,EAAEzG,OAAO,EAAE;EACvDqL,aAAa,CAAC,IAAI,EAAE,WAAW,CAAC;EAEhC,IAAI,OAAOrL,OAAO,KAAK,UAAU,IAC7B,OAAO+E,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;IACtC,MAAM,IAAI1K,aAAa,CAAC,gDAAgD,CAAC;EAC3E;EACA2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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}